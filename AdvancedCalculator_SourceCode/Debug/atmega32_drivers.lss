
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  00005aac  00005b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001dc  008001dc  00005cbc  2**0
                  ALLOC
  3 .stab         00004f38  00000000  00000000  00005cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028d7  00000000  00000000  0000abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000d4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000d6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000d8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0001016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00011796  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00012b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00012d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00013083  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_1>
       8:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_2>
       c:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 22 	call	0x441c	; 0x441c <main>
      8a:	0c 94 54 2d 	jmp	0x5aa8	; 0x5aa8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 28 	jmp	0x50f0	; 0x50f0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e8       	ldi	r22, 0x8E	; 142
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 79 28 	jmp	0x50f2	; 0x50f2 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 95 28 	jmp	0x512a	; 0x512a <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 9c 28 	jmp	0x5138	; 0x5138 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 78 28 	jmp	0x50f0	; 0x50f0 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ea 56       	subi	r30, 0x6A	; 106
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <GPT_VoidInit>:

void __vector_11(void) __attribute__ ((signal,used));

static ISR_FuncPtr_t G_TIMER0_OVF_CBF = NULL;

void GPT_VoidInit(GPT_stConfig* copy_pGPT_stConfig) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <GPT_VoidInit+0x6>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pGPT_stConfig) {
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	09 f4       	brne	.+2      	; 0xf64 <GPT_VoidInit+0x1a>
     f62:	42 c0       	rjmp	.+132    	; 0xfe8 <GPT_VoidInit+0x9e>
		if (copy_pGPT_stConfig->GPT_timer == GPT_Timer0)
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	d1 f5       	brne	.+116    	; 0xfe2 <GPT_VoidInit+0x98>
		{
			if (copy_pGPT_stConfig->GPT_Mode == GPT_NormalMode)
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	88 23       	and	r24, r24
     f76:	c1 f5       	brne	.+112    	; 0xfe8 <GPT_VoidInit+0x9e>
			{

				// set call back func
				G_TIMER0_OVF_CBF = copy_pGPT_stConfig->GPT_Timer_CBF;
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	84 81       	ldd	r24, Z+4	; 0x04
     f7e:	95 81       	ldd	r25, Z+5	; 0x05
     f80:	90 93 dd 01 	sts	0x01DD, r25
     f84:	80 93 dc 01 	sts	0x01DC, r24
				/*select mode*/
				Clr_Bit(GPT_TCCR0_REG, GPT_TCCR0_WGM00_BIT);
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7b       	andi	r24, 0xBF	; 191
     f94:	8c 93       	st	X, r24
				Clr_Bit(GPT_TCCR0_REG, GPT_TCCR0_WGM01_BIT);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	87 7f       	andi	r24, 0xF7	; 247
     fa2:	8c 93       	st	X, r24
				// select clock source
				GPT_TCCR0_REG |= copy_pGPT_stConfig->GPT_Prescaler;
     fa4:	a3 e5       	ldi	r26, 0x53	; 83
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	90 81       	ld	r25, Z
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	89 2b       	or	r24, r25
     fb6:	8c 93       	st	X, r24
				// set preloaded value
				GPT_TCNT0_REG = copy_pGPT_stConfig->GPT_Preloaded;
     fb8:	a2 e5       	ldi	r26, 0x52	; 82
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e9 81       	ldd	r30, Y+1	; 0x01
     fbe:	fa 81       	ldd	r31, Y+2	; 0x02
     fc0:	83 81       	ldd	r24, Z+3	; 0x03
     fc2:	8c 93       	st	X, r24
				//enable timer ovf interrupt
				GPT_TIMSK_REG |= 0x01;
     fc4:	a9 e5       	ldi	r26, 0x59	; 89
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e9 e5       	ldi	r30, 0x59	; 89
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
				// enable gloable interrupt
				GIE_ENABLE();
     fd2:	af e5       	ldi	r26, 0x5F	; 95
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e5       	ldi	r30, 0x5F	; 95
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 68       	ori	r24, 0x80	; 128
     fde:	8c 93       	st	X, r24
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <GPT_VoidInit+0x9e>

			}
		}
		else if (copy_pGPT_stConfig->GPT_timer == GPT_Timer1)
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	80 81       	ld	r24, Z
			// to continue
		}
	} else {

	}
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPT_VoidSetPreload>:

void GPT_VoidSetPreload(GPT_enTimer Copy_GPT_enTimer, u8 Copy_u8PreloadVal) {
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPT_VoidSetPreload+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_GPT_enTimer == GPT_Timer0) {
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	88 23       	and	r24, r24
    1006:	21 f4       	brne	.+8      	; 0x1010 <GPT_VoidSetPreload+0x1c>
		GPT_TCNT0_REG = Copy_u8PreloadVal;
    1008:	e2 e5       	ldi	r30, 0x52	; 82
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	80 83       	st	Z, r24
	}
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <__vector_11>:

void __vector_11(void) {
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	4f 93       	push	r20
    102a:	5f 93       	push	r21
    102c:	6f 93       	push	r22
    102e:	7f 93       	push	r23
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	if (G_TIMER0_OVF_CBF)
    1044:	80 91 dc 01 	lds	r24, 0x01DC
    1048:	90 91 dd 01 	lds	r25, 0x01DD
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	29 f0       	breq	.+10     	; 0x105a <__vector_11+0x40>
		G_TIMER0_OVF_CBF();
    1050:	e0 91 dc 01 	lds	r30, 0x01DC
    1054:	f0 91 dd 01 	lds	r31, 0x01DD
    1058:	09 95       	icall
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	7f 91       	pop	r23
    106c:	6f 91       	pop	r22
    106e:	5f 91       	pop	r21
    1070:	4f 91       	pop	r20
    1072:	3f 91       	pop	r19
    1074:	2f 91       	pop	r18
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <ExtINT_VoidInit>:
void __vector_1(void) __attribute__ ((signal, used));
void __vector_2(void) __attribute__ ((signal , used));
void __vector_3(void) __attribute__ ((signal , used));

void ExtINT_VoidInit(ExtInt_stCfg* copy_pExtInt_stCfg)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <ExtINT_VoidInit+0x6>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != copy_pExtInt_stCfg && ( copy_pExtInt_stCfg->EXT_INT0_SC != EX_INT_DISABLE || copy_pExtInt_stCfg->EXT_INT1_SC != EX_INT_DISABLE || copy_pExtInt_stCfg->EXT_INT2_SC != EX_INT_DISABLE  ) )
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	09 f4       	brne	.+2      	; 0x1098 <ExtINT_VoidInit+0x18>
    1096:	bc c0       	rjmp	.+376    	; 0x1210 <ExtINT_VoidInit+0x190>
    1098:	e9 81       	ldd	r30, Y+1	; 0x01
    109a:	fa 81       	ldd	r31, Y+2	; 0x02
    109c:	80 81       	ld	r24, Z
    109e:	87 70       	andi	r24, 0x07	; 7
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	b1 f4       	brne	.+44     	; 0x10d0 <ExtINT_VoidInit+0x50>
    10a4:	e9 81       	ldd	r30, Y+1	; 0x01
    10a6:	fa 81       	ldd	r31, Y+2	; 0x02
    10a8:	80 81       	ld	r24, Z
    10aa:	88 73       	andi	r24, 0x38	; 56
    10ac:	80 32       	cpi	r24, 0x20	; 32
    10ae:	81 f4       	brne	.+32     	; 0x10d0 <ExtINT_VoidInit+0x50>
    10b0:	e9 81       	ldd	r30, Y+1	; 0x01
    10b2:	fa 81       	ldd	r31, Y+2	; 0x02
    10b4:	80 81       	ld	r24, Z
    10b6:	98 2f       	mov	r25, r24
    10b8:	92 95       	swap	r25
    10ba:	96 95       	lsr	r25
    10bc:	96 95       	lsr	r25
    10be:	93 70       	andi	r25, 0x03	; 3
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	81 70       	andi	r24, 0x01	; 1
    10c4:	88 0f       	add	r24, r24
    10c6:	88 0f       	add	r24, r24
    10c8:	89 2b       	or	r24, r25
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <ExtINT_VoidInit+0x50>
    10ce:	a0 c0       	rjmp	.+320    	; 0x1210 <ExtINT_VoidInit+0x190>
	{
		/*Enable Global Interrupt*/
		GIE_ENABLE();
    10d0:	af e5       	ldi	r26, 0x5F	; 95
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ef e5       	ldi	r30, 0x5F	; 95
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	8c 93       	st	X, r24

		if(copy_pExtInt_stCfg->EXT_INT0_SC != EX_INT_DISABLE)
    10de:	e9 81       	ldd	r30, Y+1	; 0x01
    10e0:	fa 81       	ldd	r31, Y+2	; 0x02
    10e2:	80 81       	ld	r24, Z
    10e4:	87 70       	andi	r24, 0x07	; 7
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	f9 f0       	breq	.+62     	; 0x1128 <ExtINT_VoidInit+0xa8>
			 *		same if pin was input
			 *		ext_int_config.h handle this cases to check if the user want internal pullup resistance or not
			 *
			 * */
#if	EXT_INT0_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN2 , DIO_PIN_LOGIC_HIGH);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	62 e0       	ldi	r22, 0x02	; 2
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN2,DIO_PIN_LOGIC_LOW);
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT0_ISC_SET(copy_pExtInt_stCfg->EXT_INT0_SC);
    10f4:	a5 e5       	ldi	r26, 0x55	; 85
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e5       	ldi	r30, 0x55	; 85
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	90 81       	ld	r25, Z
    10fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1100:	fa 81       	ldd	r31, Y+2	; 0x02
    1102:	80 81       	ld	r24, Z
    1104:	87 70       	andi	r24, 0x07	; 7
    1106:	89 2b       	or	r24, r25
    1108:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int0CallBack = copy_pExtInt_stCfg->ExtInt0_CBF;
    110a:	e9 81       	ldd	r30, Y+1	; 0x01
    110c:	fa 81       	ldd	r31, Y+2	; 0x02
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	90 93 df 01 	sts	0x01DF, r25
    1116:	80 93 de 01 	sts	0x01DE, r24
			/*enable INT0 interrupt*/
			EXT_INT0_ENABLE();
    111a:	ab e5       	ldi	r26, 0x5B	; 91
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	eb e5       	ldi	r30, 0x5B	; 91
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8c 93       	st	X, r24

		}
		else{/*Nothing*/}
		if(copy_pExtInt_stCfg->EXT_INT1_SC != EX_INT_DISABLE)
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	80 81       	ld	r24, Z
    112e:	88 73       	andi	r24, 0x38	; 56
    1130:	80 32       	cpi	r24, 0x20	; 32
    1132:	49 f1       	breq	.+82     	; 0x1186 <ExtINT_VoidInit+0x106>
		{
#if	EXT_INT1_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN3 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT1_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTD_IDX , DIO_PIN3,DIO_PIN_LOGIC_LOW);
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	63 e0       	ldi	r22, 0x03	; 3
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT1_ISC_SET(copy_pExtInt_stCfg->EXT_INT1_SC);
    113e:	a5 e5       	ldi	r26, 0x55	; 85
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e5       	ldi	r30, 0x55	; 85
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	80 81       	ld	r24, Z
    1150:	86 95       	lsr	r24
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	87 70       	andi	r24, 0x07	; 7
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	82 2b       	or	r24, r18
    1166:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int1CallBack = copy_pExtInt_stCfg->ExtInt1_CBF;
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	84 81       	ldd	r24, Z+4	; 0x04
    116e:	95 81       	ldd	r25, Z+5	; 0x05
    1170:	90 93 e1 01 	sts	0x01E1, r25
    1174:	80 93 e0 01 	sts	0x01E0, r24
			/*enable INT1 interrupt*/
			EXT_INT1_ENABLE();
    1178:	ab e5       	ldi	r26, 0x5B	; 91
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	eb e5       	ldi	r30, 0x5B	; 91
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	8c 93       	st	X, r24
		}
		else{/*Nothing*/}
		if(copy_pExtInt_stCfg->EXT_INT2_SC != EX_INT_DISABLE)
    1186:	e9 81       	ldd	r30, Y+1	; 0x01
    1188:	fa 81       	ldd	r31, Y+2	; 0x02
    118a:	80 81       	ld	r24, Z
    118c:	98 2f       	mov	r25, r24
    118e:	92 95       	swap	r25
    1190:	96 95       	lsr	r25
    1192:	96 95       	lsr	r25
    1194:	93 70       	andi	r25, 0x03	; 3
    1196:	81 81       	ldd	r24, Z+1	; 0x01
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	88 0f       	add	r24, r24
    119c:	88 0f       	add	r24, r24
    119e:	89 2b       	or	r24, r25
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	b1 f1       	breq	.+108    	; 0x1210 <ExtINT_VoidInit+0x190>
		{
#if	EXT_INT2_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_ENABLE
			DIO_VoidSetPinValue(DIO_PORTB_IDX , DIO_PIN2 , DIO_PIN_LOGIC_HIGH);
#elif EXT_INT2_INTERNAL_PULLUP == EXT_INT_INT_PULLUP_DISABLE
			DIO_VoidSetPinValue(DIO_PORTB_IDX , DIO_PIN2,DIO_PIN_LOGIC_LOW);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	62 e0       	ldi	r22, 0x02	; 2
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
#else
#warning "Check EXT_INT_Config.h please"
#endif
			/*configure sense control*/
			EXT_INT2_ISC_SET(copy_pExtInt_stCfg->EXT_INT2_SC);
    11ae:	a4 e5       	ldi	r26, 0x54	; 84
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e4 e5       	ldi	r30, 0x54	; 84
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	80 81       	ld	r24, Z
    11c0:	98 2f       	mov	r25, r24
    11c2:	92 95       	swap	r25
    11c4:	96 95       	lsr	r25
    11c6:	96 95       	lsr	r25
    11c8:	93 70       	andi	r25, 0x03	; 3
    11ca:	81 81       	ldd	r24, Z+1	; 0x01
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	88 0f       	add	r24, r24
    11d0:	88 0f       	add	r24, r24
    11d2:	89 2b       	or	r24, r25
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	90 70       	andi	r25, 0x00	; 0
    11dc:	00 24       	eor	r0, r0
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	07 94       	ror	r0
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	07 94       	ror	r0
    11ea:	98 2f       	mov	r25, r24
    11ec:	80 2d       	mov	r24, r0
    11ee:	82 2b       	or	r24, r18
    11f0:	8c 93       	st	X, r24
			/*set ISR Function*/
			ptrFunc_Int2CallBack = copy_pExtInt_stCfg->ExtInt2_CBF;
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	86 81       	ldd	r24, Z+6	; 0x06
    11f8:	97 81       	ldd	r25, Z+7	; 0x07
    11fa:	90 93 e3 01 	sts	0x01E3, r25
    11fe:	80 93 e2 01 	sts	0x01E2, r24
			/*enable INT2 interrupt*/
			EXT_INT2_ENABLE();
    1202:	ab e5       	ldi	r26, 0x5B	; 91
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e5       	ldi	r30, 0x5B	; 91
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 62       	ori	r24, 0x20	; 32
    120e:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <__vector_1>:

void __vector_1(void)
{
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int0CallBack)
    1244:	80 91 de 01 	lds	r24, 0x01DE
    1248:	90 91 df 01 	lds	r25, 0x01DF
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	29 f0       	breq	.+10     	; 0x125a <__vector_1+0x40>
		ptrFunc_Int0CallBack();
    1250:	e0 91 de 01 	lds	r30, 0x01DE
    1254:	f0 91 df 01 	lds	r31, 0x01DF
    1258:	09 95       	icall
}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	ff 91       	pop	r31
    1260:	ef 91       	pop	r30
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	7f 91       	pop	r23
    126c:	6f 91       	pop	r22
    126e:	5f 91       	pop	r21
    1270:	4f 91       	pop	r20
    1272:	3f 91       	pop	r19
    1274:	2f 91       	pop	r18
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__vector_2>:

void __vector_2(void)
{
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int1CallBack)
    12aa:	80 91 e0 01 	lds	r24, 0x01E0
    12ae:	90 91 e1 01 	lds	r25, 0x01E1
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	29 f0       	breq	.+10     	; 0x12c0 <__vector_2+0x40>
		ptrFunc_Int1CallBack();
    12b6:	e0 91 e0 01 	lds	r30, 0x01E0
    12ba:	f0 91 e1 01 	lds	r31, 0x01E1
    12be:	09 95       	icall
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	7f 91       	pop	r23
    12d2:	6f 91       	pop	r22
    12d4:	5f 91       	pop	r21
    12d6:	4f 91       	pop	r20
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <__vector_3>:

void __vector_3(void)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	4f 93       	push	r20
    12f6:	5f 93       	push	r21
    12f8:	6f 93       	push	r22
    12fa:	7f 93       	push	r23
    12fc:	8f 93       	push	r24
    12fe:	9f 93       	push	r25
    1300:	af 93       	push	r26
    1302:	bf 93       	push	r27
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	if(NULL != ptrFunc_Int2CallBack)
    1310:	80 91 e2 01 	lds	r24, 0x01E2
    1314:	90 91 e3 01 	lds	r25, 0x01E3
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	29 f0       	breq	.+10     	; 0x1326 <__vector_3+0x40>
		ptrFunc_Int2CallBack();
    131c:	e0 91 e2 01 	lds	r30, 0x01E2
    1320:	f0 91 e3 01 	lds	r31, 0x01E3
    1324:	09 95       	icall
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	0f 90       	pop	r0
    1348:	1f 90       	pop	r1
    134a:	18 95       	reti

0000134c <DIO_VoidSetPinDirection>:
static volatile u8* DIO_ARR_PIN[4] = {DIO_PINA_REG,DIO_PINB_REG,DIO_PINC_REG,DIO_PIND_REG};



void DIO_VoidSetPinDirection(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8direction)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <DIO_VoidSetPinDirection+0x6>
    1352:	00 d0       	rcall	.+0      	; 0x1354 <DIO_VoidSetPinDirection+0x8>
    1354:	0f 92       	push	r0
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	6a 83       	std	Y+2, r22	; 0x02
    135e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	08 f0       	brcs	.+2      	; 0x1368 <DIO_VoidSetPinDirection+0x1c>
    1366:	5d c0       	rjmp	.+186    	; 0x1422 <DIO_VoidSetPinDirection+0xd6>
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	08 f0       	brcs	.+2      	; 0x1370 <DIO_VoidSetPinDirection+0x24>
    136e:	59 c0       	rjmp	.+178    	; 0x1422 <DIO_VoidSetPinDirection+0xd6>
	{
		switch(Copy_u8direction)
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	2c 83       	std	Y+4, r18	; 0x04
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	31 f0       	breq	.+12     	; 0x138e <DIO_VoidSetPinDirection+0x42>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	21 30       	cpi	r18, 0x01	; 1
    1388:	31 05       	cpc	r19, r1
    138a:	39 f1       	breq	.+78     	; 0x13da <DIO_VoidSetPinDirection+0x8e>
    138c:	4a c0       	rjmp	.+148    	; 0x1422 <DIO_VoidSetPinDirection+0xd6>
		{
		case DIO_PIN_DIR_INPUT:
			Clr_Bit( (*DIO_ARR_DDR[Copy_u8port]) , Copy_u8pin);
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	fc 01       	movw	r30, r24
    139a:	ec 55       	subi	r30, 0x5C	; 92
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	a0 81       	ld	r26, Z
    13a0:	b1 81       	ldd	r27, Z+1	; 0x01
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	fc 01       	movw	r30, r24
    13ae:	ec 55       	subi	r30, 0x5C	; 92
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	01 90       	ld	r0, Z+
    13b4:	f0 81       	ld	r31, Z
    13b6:	e0 2d       	mov	r30, r0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_VoidSetPinDirection+0x82>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_VoidSetPinDirection+0x7e>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	24 c0       	rjmp	.+72     	; 0x1422 <DIO_VoidSetPinDirection+0xd6>
			break;
		case DIO_PIN_DIR_OUTPUT:
			Set_Bit( (*DIO_ARR_DDR[Copy_u8port]) , Copy_u8pin);
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	fc 01       	movw	r30, r24
    13e6:	ec 55       	subi	r30, 0x5C	; 92
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	a0 81       	ld	r26, Z
    13ec:	b1 81       	ldd	r27, Z+1	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	fc 01       	movw	r30, r24
    13fa:	ec 55       	subi	r30, 0x5C	; 92
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	01 90       	ld	r0, Z+
    1400:	f0 81       	ld	r31, Z
    1402:	e0 2d       	mov	r30, r0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_VoidSetPinDirection+0xce>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_VoidSetPinDirection+0xca>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
	else
	{
		// nothing
	}
	return;
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8value)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_VoidSetPinValue+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <DIO_VoidSetPinValue+0x8>
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	6a 83       	std	Y+2, r22	; 0x02
    1444:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	08 f0       	brcs	.+2      	; 0x144e <DIO_VoidSetPinValue+0x1c>
    144c:	5d c0       	rjmp	.+186    	; 0x1508 <DIO_VoidSetPinValue+0xd6>
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	88 30       	cpi	r24, 0x08	; 8
    1452:	08 f0       	brcs	.+2      	; 0x1456 <DIO_VoidSetPinValue+0x24>
    1454:	59 c0       	rjmp	.+178    	; 0x1508 <DIO_VoidSetPinValue+0xd6>
	{
		switch(Copy_u8value)
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3d 83       	std	Y+5, r19	; 0x05
    145e:	2c 83       	std	Y+4, r18	; 0x04
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	31 f0       	breq	.+12     	; 0x1474 <DIO_VoidSetPinValue+0x42>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	21 30       	cpi	r18, 0x01	; 1
    146e:	31 05       	cpc	r19, r1
    1470:	39 f1       	breq	.+78     	; 0x14c0 <DIO_VoidSetPinValue+0x8e>
    1472:	4a c0       	rjmp	.+148    	; 0x1508 <DIO_VoidSetPinValue+0xd6>
		{
		case DIO_PIN_LOGIC_LOW:
			Clr_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	fc 01       	movw	r30, r24
    1480:	e4 56       	subi	r30, 0x64	; 100
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	a0 81       	ld	r26, Z
    1486:	b1 81       	ldd	r27, Z+1	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	fc 01       	movw	r30, r24
    1494:	e4 56       	subi	r30, 0x64	; 100
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_VoidSetPinValue+0x82>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_VoidSetPinValue+0x7e>
    14b8:	80 95       	com	r24
    14ba:	84 23       	and	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	24 c0       	rjmp	.+72     	; 0x1508 <DIO_VoidSetPinValue+0xd6>
			break;
		case DIO_PIN_LOGIC_HIGH:
			Set_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	fc 01       	movw	r30, r24
    14cc:	e4 56       	subi	r30, 0x64	; 100
    14ce:	fe 4f       	sbci	r31, 0xFE	; 254
    14d0:	a0 81       	ld	r26, Z
    14d2:	b1 81       	ldd	r27, Z+1	; 0x01
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	fc 01       	movw	r30, r24
    14e0:	e4 56       	subi	r30, 0x64	; 100
    14e2:	fe 4f       	sbci	r31, 0xFE	; 254
    14e4:	01 90       	ld	r0, Z+
    14e6:	f0 81       	ld	r31, Z
    14e8:	e0 2d       	mov	r30, r0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_VoidSetPinValue+0xce>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_VoidSetPinValue+0xca>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
		}
	}
	else
	{/*nothing*/}
	return;
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <DIO_VoidTogglePinValue>:
void DIO_VoidTogglePinValue(u8 Copy_u8port,u8 Copy_u8pin)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <DIO_VoidTogglePinValue+0x6>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	38 f5       	brcc	.+78     	; 0x157a <DIO_VoidTogglePinValue+0x62>
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 30       	cpi	r24, 0x08	; 8
    1530:	20 f5       	brcc	.+72     	; 0x157a <DIO_VoidTogglePinValue+0x62>
	{
		Toggle_Bit((*DIO_ARR_PORT[Copy_u8port]) , Copy_u8pin);
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	fc 01       	movw	r30, r24
    153e:	e4 56       	subi	r30, 0x64	; 100
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	a0 81       	ld	r26, Z
    1544:	b1 81       	ldd	r27, Z+1	; 0x01
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	fc 01       	movw	r30, r24
    1552:	e4 56       	subi	r30, 0x64	; 100
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	01 90       	ld	r0, Z+
    1558:	f0 81       	ld	r31, Z
    155a:	e0 2d       	mov	r30, r0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_VoidTogglePinValue+0x5a>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_VoidTogglePinValue+0x56>
    1576:	84 27       	eor	r24, r20
    1578:	8c 93       	st	X, r24
	}
	else
	{/*nothing*/}
	return;
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <DIO_VoidGetPinValue>:
void DIO_VoidGetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 *Copy_pu8Return)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <DIO_VoidGetPinValue+0x6>
    158a:	00 d0       	rcall	.+0      	; 0x158c <DIO_VoidGetPinValue+0x8>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
    1594:	5c 83       	std	Y+4, r21	; 0x04
    1596:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 && Copy_pu8Return )
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	18 f5       	brcc	.+70     	; 0x15e4 <DIO_VoidGetPinValue+0x60>
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	00 f5       	brcc	.+64     	; 0x15e4 <DIO_VoidGetPinValue+0x60>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	e1 f0       	breq	.+56     	; 0x15e4 <DIO_VoidGetPinValue+0x60>
	{
		*Copy_pu8Return = Get_Bit(*(DIO_ARR_PIN[Copy_u8port]) , Copy_u8pin);
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	fc 01       	movw	r30, r24
    15b8:	e4 55       	subi	r30, 0x54	; 84
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	01 90       	ld	r0, Z+
    15be:	f0 81       	ld	r31, Z
    15c0:	e0 2d       	mov	r30, r0
    15c2:	80 81       	ld	r24, Z
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a9 01       	movw	r20, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_VoidGetPinValue+0x52>
    15d2:	55 95       	asr	r21
    15d4:	47 95       	ror	r20
    15d6:	8a 95       	dec	r24
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_VoidGetPinValue+0x4e>
    15da:	ca 01       	movw	r24, r20
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	eb 81       	ldd	r30, Y+3	; 0x03
    15e0:	fc 81       	ldd	r31, Y+4	; 0x04
    15e2:	80 83       	st	Z, r24
	}
	else
	{/*nothing*/}
	return;
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <DIO_VoidSetPortDirection+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX)
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	84 30       	cpi	r24, 0x04	; 4
    1604:	68 f4       	brcc	.+26     	; 0x1620 <DIO_VoidSetPortDirection+0x2e>
	{
		*DIO_ARR_DDR[Copy_u8port] = Copy_u8direction;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	fc 01       	movw	r30, r24
    1612:	ec 55       	subi	r30, 0x5C	; 92
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	01 90       	ld	r0, Z+
    1618:	f0 81       	ld	r31, Z
    161a:	e0 2d       	mov	r30, r0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8port,u8 Copy_u8value)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <DIO_VoidSetPortValue+0x6>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	68 f4       	brcc	.+26     	; 0x1658 <DIO_VoidSetPortValue+0x2e>
	{
		*DIO_ARR_PORT[Copy_u8port] = Copy_u8value;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	fc 01       	movw	r30, r24
    164a:	e4 56       	subi	r30, 0x64	; 100
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	01 90       	ld	r0, Z+
    1650:	f0 81       	ld	r31, Z
    1652:	e0 2d       	mov	r30, r0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <DIO_VoidTogglePortValue>:

void DIO_VoidTogglePortValue(u8 Copy_u8port)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8port <= DIO_PORTD_IDX)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	c0 f4       	brcc	.+48     	; 0x16a4 <DIO_VoidTogglePortValue+0x42>
	{
		( *DIO_ARR_PORT[Copy_u8port] ) ^= (0xff);
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	fc 01       	movw	r30, r24
    1680:	e4 56       	subi	r30, 0x64	; 100
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
    1684:	a0 81       	ld	r26, Z
    1686:	b1 81       	ldd	r27, Z+1	; 0x01
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	fc 01       	movw	r30, r24
    1694:	e4 56       	subi	r30, 0x64	; 100
    1696:	fe 4f       	sbci	r31, 0xFE	; 254
    1698:	01 90       	ld	r0, Z+
    169a:	f0 81       	ld	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	80 81       	ld	r24, Z
    16a0:	80 95       	com	r24
    16a2:	8c 93       	st	X, r24
	}
	else {/*nothing*/}
	return;
}
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <DIO_VoidGetPortValue>:
void DIO_VoidGetPortValue(u8 Copy_u8port,u8 *Copy_pu8Return)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_VoidGetPortValue+0x6>
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	7b 83       	std	Y+3, r23	; 0x03
    16bc:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_pu8Return)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	98 f4       	brcc	.+38     	; 0x16ea <DIO_VoidGetPortValue+0x3e>
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	79 f0       	breq	.+30     	; 0x16ea <DIO_VoidGetPortValue+0x3e>
	{
		*Copy_pu8Return = *DIO_ARR_PIN[Copy_u8port];
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	fc 01       	movw	r30, r24
    16d8:	e4 55       	subi	r30, 0x54	; 84
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	01 90       	ld	r0, Z+
    16de:	f0 81       	ld	r31, Z
    16e0:	e0 2d       	mov	r30, r0
    16e2:	80 81       	ld	r24, Z
    16e4:	ea 81       	ldd	r30, Y+2	; 0x02
    16e6:	fb 81       	ldd	r31, Y+3	; 0x03
    16e8:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <DIO_VoidSet4bitsValue>:

void DIO_VoidSet4bitsValue(u8 Copy_u8port,u8 Copy_u8value,u8 Copy_u8Bitselection)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <DIO_VoidSet4bitsValue+0x6>
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	6a 83       	std	Y+2, r22	; 0x02
    1706:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_u8value <= 15 && Copy_u8Bitselection <= DIO_PIN5 )
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	08 f0       	brcs	.+2      	; 0x1710 <DIO_VoidSet4bitsValue+0x1a>
    170e:	52 c0       	rjmp	.+164    	; 0x17b4 <DIO_VoidSet4bitsValue+0xbe>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 31       	cpi	r24, 0x10	; 16
    1714:	08 f0       	brcs	.+2      	; 0x1718 <DIO_VoidSet4bitsValue+0x22>
    1716:	4e c0       	rjmp	.+156    	; 0x17b4 <DIO_VoidSet4bitsValue+0xbe>
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	86 30       	cpi	r24, 0x06	; 6
    171c:	08 f0       	brcs	.+2      	; 0x1720 <DIO_VoidSet4bitsValue+0x2a>
    171e:	4a c0       	rjmp	.+148    	; 0x17b4 <DIO_VoidSet4bitsValue+0xbe>
	{
		(*DIO_ARR_PORT[Copy_u8port]) &= ~(0x0f << Copy_u8Bitselection); // to delete old value
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	fc 01       	movw	r30, r24
    172c:	e4 56       	subi	r30, 0x64	; 100
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	a0 81       	ld	r26, Z
    1732:	b1 81       	ldd	r27, Z+1	; 0x01
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	fc 01       	movw	r30, r24
    1740:	e4 56       	subi	r30, 0x64	; 100
    1742:	fe 4f       	sbci	r31, 0xFE	; 254
    1744:	01 90       	ld	r0, Z+
    1746:	f0 81       	ld	r31, Z
    1748:	e0 2d       	mov	r30, r0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8f e0       	ldi	r24, 0x0F	; 15
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_VoidSet4bitsValue+0x68>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	2a 95       	dec	r18
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_VoidSet4bitsValue+0x64>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
		(*DIO_ARR_PORT[Copy_u8port]) |=  (Copy_u8value << Copy_u8Bitselection); // write new value
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	fc 01       	movw	r30, r24
    1774:	e4 56       	subi	r30, 0x64	; 100
    1776:	fe 4f       	sbci	r31, 0xFE	; 254
    1778:	a0 81       	ld	r26, Z
    177a:	b1 81       	ldd	r27, Z+1	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	fc 01       	movw	r30, r24
    1788:	e4 56       	subi	r30, 0x64	; 100
    178a:	fe 4f       	sbci	r31, 0xFE	; 254
    178c:	01 90       	ld	r0, Z+
    178e:	f0 81       	ld	r31, Z
    1790:	e0 2d       	mov	r30, r0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	b9 01       	movw	r22, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_VoidSet4bitsValue+0xb4>
    17a6:	66 0f       	add	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	8a 95       	dec	r24
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_VoidSet4bitsValue+0xb0>
    17ae:	cb 01       	movw	r24, r22
    17b0:	84 2b       	or	r24, r20
    17b2:	8c 93       	st	X, r24

	}
	else {/*nothing*/}
	return;
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_VoidGet4bitsValue>:

void DIO_VoidGet4bitsValue(u8 Copy_u8port,u8* Copy_u8value,u8 Copy_u8Bitselection)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <DIO_VoidGet4bitsValue+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <DIO_VoidGet4bitsValue+0x8>
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	7c 83       	std	Y+4, r23	; 0x04
    17d2:	6b 83       	std	Y+3, r22	; 0x03
    17d4:	4d 83       	std	Y+5, r20	; 0x05
	u8 l_copyOfPinVal = *DIO_ARR_PIN[Copy_u8port];
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	fc 01       	movw	r30, r24
    17e2:	e4 55       	subi	r30, 0x54	; 84
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	01 90       	ld	r0, Z+
    17e8:	f0 81       	ld	r31, Z
    17ea:	e0 2d       	mov	r30, r0
    17ec:	80 81       	ld	r24, Z
    17ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8port <= DIO_PORTD_IDX && Copy_u8value  && Copy_u8Bitselection <= DIO_PIN5 )
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	c0 f4       	brcc	.+48     	; 0x1826 <DIO_VoidGet4bitsValue+0x66>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	a1 f0       	breq	.+40     	; 0x1826 <DIO_VoidGet4bitsValue+0x66>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	86 30       	cpi	r24, 0x06	; 6
    1802:	88 f4       	brcc	.+34     	; 0x1826 <DIO_VoidGet4bitsValue+0x66>
	{
		(*Copy_u8value) = (l_copyOfPinVal >> Copy_u8Bitselection) & 0x0f;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a9 01       	movw	r20, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_VoidGet4bitsValue+0x58>
    1814:	55 95       	asr	r21
    1816:	47 95       	ror	r20
    1818:	8a 95       	dec	r24
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_VoidGet4bitsValue+0x54>
    181c:	ca 01       	movw	r24, r20
    181e:	8f 70       	andi	r24, 0x0F	; 15
    1820:	eb 81       	ldd	r30, Y+3	; 0x03
    1822:	fc 81       	ldd	r31, Y+4	; 0x04
    1824:	80 83       	st	Z, r24

	}
	else {/*nothing*/}
	return;
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO_voidPortInit>:

void DIO_voidPortInit(u8 Copy_u8port , u8 Copy_u8direction , u8 Copy_u8value)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_voidPortInit+0x6>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	6a 83       	std	Y+2, r22	; 0x02
    1846:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8port <= DIO_PORTD_IDX)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	d0 f4       	brcc	.+52     	; 0x1882 <DIO_voidPortInit+0x4c>
	{
		*DIO_ARR_DDR[Copy_u8port] = Copy_u8direction;
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	fc 01       	movw	r30, r24
    185a:	ec 55       	subi	r30, 0x5C	; 92
    185c:	fe 4f       	sbci	r31, 0xFE	; 254
    185e:	01 90       	ld	r0, Z+
    1860:	f0 81       	ld	r31, Z
    1862:	e0 2d       	mov	r30, r0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	80 83       	st	Z, r24
		*DIO_ARR_PORT[Copy_u8port] = Copy_u8value;
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	fc 01       	movw	r30, r24
    1874:	e4 56       	subi	r30, 0x64	; 100
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	01 90       	ld	r0, Z+
    187a:	f0 81       	ld	r31, Z
    187c:	e0 2d       	mov	r30, r0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	80 83       	st	Z, r24
	}
	else {/*nothing*/}
	return;
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_voidPinInit>:

void DIO_voidPinInit(u8 Copy_u8port ,u8 Copy_u8pin,u8 Copy_u8direction , u8 Copy_u8value)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DIO_voidPinInit+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_voidPinInit+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
    189e:	4b 83       	std	Y+3, r20	; 0x03
    18a0:	2c 83       	std	Y+4, r18	; 0x04
	if(Copy_u8port <= DIO_PORTD_IDX  && Copy_u8pin <= DIO_PIN7 )
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	68 f4       	brcc	.+26     	; 0x18c2 <DIO_voidPinInit+0x34>
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	88 30       	cpi	r24, 0x08	; 8
    18ac:	50 f4       	brcc	.+20     	; 0x18c2 <DIO_voidPinInit+0x34>
	{
		DIO_VoidSetPinValue(Copy_u8port,Copy_u8pin,Copy_u8value);
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	6a 81       	ldd	r22, Y+2	; 0x02
    18b2:	4c 81       	ldd	r20, Y+4	; 0x04
    18b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinDirection(Copy_u8port,Copy_u8pin,Copy_u8direction);
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	6a 81       	ldd	r22, Y+2	; 0x02
    18bc:	4b 81       	ldd	r20, Y+3	; 0x03
    18be:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>

	}
	else {/*nothing*/}
	return;
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <ADC_VoidInit_interrupt>:
#endif

#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_ENABLE_CFG

void ADC_VoidInit_interrupt(ISR_FuncPtr_t copy_ISR_FuncPtr_t)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <ADC_VoidInit_interrupt+0x6>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
	/*Set ADC Voltage Ref*/
	AD_VREF_SELECT(ADC_VOLTAGE_REF_CFG);
    18de:	a7 e2       	ldi	r26, 0x27	; 39
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e7 e2       	ldi	r30, 0x27	; 39
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 73       	andi	r24, 0x3F	; 63
    18ea:	80 64       	ori	r24, 0x40	; 64
    18ec:	8c 93       	st	X, r24

	/*Set ADC PRESCALER*/
	AD_PRESCALER_SELECT(ADC_PRESCALER_CFG);
    18ee:	a6 e2       	ldi	r26, 0x26	; 38
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e6 e2       	ldi	r30, 0x26	; 38
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	87 60       	ori	r24, 0x07	; 7
    18fa:	8c 93       	st	X, r24

	/*set ADC Result read as right Adjust clear ADLAR*/
	AD_ADMUX_REG &=	~(0x01 << AD_ADMUX_ADLAR_BIT);
    18fc:	a7 e2       	ldi	r26, 0x27	; 39
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e7 e2       	ldi	r30, 0x27	; 39
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8f 7d       	andi	r24, 0xDF	; 223
    1908:	8c 93       	st	X, r24
#if ADC_AUTO_TRIGGER_CFG == ADC_AUTO_TRIGGER_ENABLE_CFG
	AD_ATRIGGER_SOURCE_SELECT(ADC_ATRIGGER_SOURCE_CFG);
	AD_AUTO_TRIGGER_ENABLE();
#endif
	/** set isr function**/
	Global_pADC_ISR = copy_ISR_FuncPtr_t;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	90 93 e5 01 	sts	0x01E5, r25
    1912:	80 93 e4 01 	sts	0x01E4, r24
	/*Enable Global Interrupt*/
	GIE_ENABLE();
    1916:	af e5       	ldi	r26, 0x5F	; 95
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ef e5       	ldi	r30, 0x5F	; 95
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 68       	ori	r24, 0x80	; 128
    1922:	8c 93       	st	X, r24
	/*enable specific interrupt*/
	AD_INTERRUPT_ENABLE();
    1924:	a6 e2       	ldi	r26, 0x26	; 38
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e6 e2       	ldi	r30, 0x26	; 38
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	88 60       	ori	r24, 0x08	; 8
    1930:	8c 93       	st	X, r24
	/*Enable ADC*/
	AD_ENABLE();
    1932:	a6 e2       	ldi	r26, 0x26	; 38
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e6 e2       	ldi	r30, 0x26	; 38
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 68       	ori	r24, 0x80	; 128
    193e:	8c 93       	st	X, r24

	return;
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <ADC_VoidStartConv_interrupt>:

void ADC_VoidStartConv_interrupt(u8 copy_u8ADChannel)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8ADChannel <= ADC_CHANNEL7 && (AD_READ_CONVSTAT() == ADC_CONV_FINSHED_CFG))
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	f0 f4       	brcc	.+60     	; 0x1998 <ADC_VoidStartConv_interrupt+0x4e>
    195c:	e6 e2       	ldi	r30, 0x26	; 38
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	82 95       	swap	r24
    1964:	86 95       	lsr	r24
    1966:	86 95       	lsr	r24
    1968:	83 70       	andi	r24, 0x03	; 3
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	89 f4       	brne	.+34     	; 0x1998 <ADC_VoidStartConv_interrupt+0x4e>
	{
		// select adc channel before start adc conversion
		AD_CHANNEL_SELECT(copy_u8ADChannel);
    1976:	a7 e2       	ldi	r26, 0x27	; 39
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e7 e2       	ldi	r30, 0x27	; 39
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	98 2f       	mov	r25, r24
    1982:	90 7e       	andi	r25, 0xE0	; 224
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	89 2b       	or	r24, r25
    1988:	8c 93       	st	X, r24
		//Start conversion
		AD_STARTCONV();
    198a:	a6 e2       	ldi	r26, 0x26	; 38
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e6 e2       	ldi	r30, 0x26	; 38
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 64       	ori	r24, 0x40	; 64
    1996:	8c 93       	st	X, r24
	}
	else {/*nothing*/}
}
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <ADC_voidReadResult>:


#endif

void ADC_voidReadResult(u16* copy_pu16AdcResult)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <ADC_voidReadResult+0x6>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu16AdcResult)
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	91 f0       	breq	.+36     	; 0x19da <ADC_voidReadResult+0x3a>
	{
		*copy_pu16AdcResult = AD_READ_RESULT();
    19b6:	e4 e2       	ldi	r30, 0x24	; 36
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	e5 e2       	ldi	r30, 0x25	; 37
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 2f       	mov	r25, r24
    19cc:	88 27       	eor	r24, r24
    19ce:	82 2b       	or	r24, r18
    19d0:	93 2b       	or	r25, r19
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
	}
	else
	{
		/*nothing*/
	}
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <ADC_voidGetCurrChannel>:

void ADC_voidGetCurrChannel(u8* copy_pu8CurrAdcChannel)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <ADC_voidGetCurrChannel+0x6>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01
		*copy_pu8CurrAdcChannel = (AD_ADMUX_REG &0x1F);
    19f2:	e7 e2       	ldi	r30, 0x27	; 39
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 71       	andi	r24, 0x1F	; 31
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	80 83       	st	Z, r24
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <ADC_VoidSelectChannel>:

void ADC_VoidSelectChannel(u8 copy_u8Channel)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
	AD_CHANNEL_SELECT(copy_u8Channel);
    1a16:	a7 e2       	ldi	r26, 0x27	; 39
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e7 e2       	ldi	r30, 0x27	; 39
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	98 2f       	mov	r25, r24
    1a22:	90 7e       	andi	r25, 0xE0	; 224
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	89 2b       	or	r24, r25
    1a28:	8c 93       	st	X, r24
}
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <ADC_VoidRefresh_freeRunning>:
void ADC_VoidRefresh_freeRunning(void)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	ADC_CURR_CHANNEL_IDX = 0;
    1a3a:	10 92 e6 01 	sts	0x01E6, r1
	AD_CHANNEL_SELECT(ADC_CHANNEL_AT_ARR[ADC_CURR_CHANNEL_IDX]);
    1a3e:	a7 e2       	ldi	r26, 0x27	; 39
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e2       	ldi	r30, 0x27	; 39
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	28 2f       	mov	r18, r24
    1a4a:	20 7e       	andi	r18, 0xE0	; 224
    1a4c:	80 91 e6 01 	lds	r24, 0x01E6
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	fc 01       	movw	r30, r24
    1a56:	ec 54       	subi	r30, 0x4C	; 76
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	80 81       	ld	r24, Z
    1a5c:	82 2b       	or	r24, r18
    1a5e:	8c 93       	st	X, r24
	AD_STARTCONV();
    1a60:	a6 e2       	ldi	r26, 0x26	; 38
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e2       	ldi	r30, 0x26	; 38
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 64       	ori	r24, 0x40	; 64
    1a6c:	8c 93       	st	X, r24
}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <__vector_16>:

void __vector_16(void)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
			AD_STARTCONV();
		}
	}

#else
	if(Global_pADC_ISR)
    1a9e:	80 91 e4 01 	lds	r24, 0x01E4
    1aa2:	90 91 e5 01 	lds	r25, 0x01E5
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	29 f0       	breq	.+10     	; 0x1ab4 <__vector_16+0x40>
		Global_pADC_ISR();
    1aaa:	e0 91 e4 01 	lds	r30, 0x01E4
    1aae:	f0 91 e5 01 	lds	r31, 0x01E5
    1ab2:	09 95       	icall
#endif


}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <SSD_u8Init>:

static u8 SSD_u8CommonTypes_init(const SSD_t* copy_pSSD_tConfig);
#endif
/***************************************/
u8 SSD_u8Init(const SSD_t* copy_pSSD_tConfig)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <SSD_u8Init+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9b 83       	std	Y+3, r25	; 0x03
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    1aea:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pSSD_tConfig && (copy_pSSD_tConfig->EnablePort <=DIO_PORTD_IDX) && (copy_pSSD_tConfig->Port <=DIO_PORTD_IDX) && (copy_pSSD_tConfig->EnablePin <=DIO_PIN7)  )
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	81 f1       	breq	.+96     	; 0x1b54 <SSD_u8Init+0x7a>
    1af4:	ea 81       	ldd	r30, Y+2	; 0x02
    1af6:	fb 81       	ldd	r31, Y+3	; 0x03
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 70       	andi	r24, 0x0F	; 15
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	84 30       	cpi	r24, 0x04	; 4
    1b02:	91 05       	cpc	r25, r1
    1b04:	3c f5       	brge	.+78     	; 0x1b54 <SSD_u8Init+0x7a>
    1b06:	ea 81       	ldd	r30, Y+2	; 0x02
    1b08:	fb 81       	ldd	r31, Y+3	; 0x03
    1b0a:	80 81       	ld	r24, Z
    1b0c:	82 95       	swap	r24
    1b0e:	8f 70       	andi	r24, 0x0F	; 15
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	91 05       	cpc	r25, r1
    1b18:	ec f4       	brge	.+58     	; 0x1b54 <SSD_u8Init+0x7a>
    1b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1e:	81 81       	ldd	r24, Z+1	; 0x01
    1b20:	87 70       	andi	r24, 0x07	; 7
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	91 05       	cpc	r25, r1
    1b2a:	a4 f4       	brge	.+40     	; 0x1b54 <SSD_u8Init+0x7a>
		DIO_voidPinInit(copy_pSSD_tConfig->EnablePort , copy_pSSD_tConfig->EnablePin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
#endif
#if SSD_USE_BCD_DECODER == FEATURE_ON
		ret = SSD_voidBCD_init(copy_pSSD_tConfig);
#else
		if (copy_pSSD_tConfig->SSDType == Seg_CommonCathod || copy_pSSD_tConfig->SSDType == Seg_CommonAnode)
    1b2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b30:	81 81       	ldd	r24, Z+1	; 0x01
    1b32:	80 74       	andi	r24, 0x40	; 64
    1b34:	88 23       	and	r24, r24
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <SSD_u8Init+0x6a>
    1b38:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3c:	81 81       	ldd	r24, Z+1	; 0x01
    1b3e:	80 74       	andi	r24, 0x40	; 64
    1b40:	88 23       	and	r24, r24
    1b42:	31 f0       	breq	.+12     	; 0x1b50 <SSD_u8Init+0x76>
			ret = SSD_u8CommonTypes_init(copy_pSSD_tConfig);
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	9b 81       	ldd	r25, Y+3	; 0x03
    1b48:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <SSD_u8CommonTypes_init>
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <SSD_u8Init+0x7c>
		else
			ret = 0;
    1b50:	19 82       	std	Y+1, r1	; 0x01
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <SSD_u8Init+0x7c>
#endif
	}
	else
	{
		ret = 0;
    1b54:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <SSD_u8SetNumber>:

u8 SSD_u8SetNumber(const SSD_t* copy_pSSD_tConfig , u8 copy_u8Number)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <SSD_u8SetNumber+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <SSD_u8SetNumber+0x8>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <SSD_u8SetNumber+0xa>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9b 83       	std	Y+3, r25	; 0x03
    1b74:	8a 83       	std	Y+2, r24	; 0x02
    1b76:	6c 83       	std	Y+4, r22	; 0x04
	u8 ret = 0;
    1b78:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pSSD_tConfig && copy_u8Number <= 9)
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	49 f1       	breq	.+82     	; 0x1bd4 <SSD_u8SetNumber+0x70>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	8a 30       	cpi	r24, 0x0A	; 10
    1b86:	30 f5       	brcc	.+76     	; 0x1bd4 <SSD_u8SetNumber+0x70>
				break;
			default: ret = 0; break;
		}
#else

		switch(copy_pSSD_tConfig->SSDType)
    1b88:	ea 81       	ldd	r30, Y+2	; 0x02
    1b8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b8c:	81 81       	ldd	r24, Z+1	; 0x01
    1b8e:	82 95       	swap	r24
    1b90:	86 95       	lsr	r24
    1b92:	86 95       	lsr	r24
    1b94:	83 70       	andi	r24, 0x03	; 3
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	2d 83       	std	Y+5, r18	; 0x05
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	31 f0       	breq	.+12     	; 0x1bb4 <SSD_u8SetNumber+0x50>
    1ba8:	2d 81       	ldd	r18, Y+5	; 0x05
    1baa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bac:	21 30       	cpi	r18, 0x01	; 1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	41 f0       	breq	.+16     	; 0x1bc2 <SSD_u8SetNumber+0x5e>
    1bb2:	0e c0       	rjmp	.+28     	; 0x1bd0 <SSD_u8SetNumber+0x6c>
		{
			case Seg_CommonCathod:
				ret = SSD_u8ComCathodWriteVal(copy_pSSD_tConfig,copy_u8Number);
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb8:	6c 81       	ldd	r22, Y+4	; 0x04
    1bba:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SSD_u8ComCathodWriteVal>
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	0a c0       	rjmp	.+20     	; 0x1bd6 <SSD_u8SetNumber+0x72>
#if SSD_USE_ENABLE_PIN == FEATURE_ON
				DIO_VoidSetPinValue(copy_pSSD_tConfig->EnablePort , copy_pSSD_tConfig->EnablePin ,  DIO_PIN_LOGIC_LOW);
#endif
				break;
			case Seg_CommonAnode:
				ret = SSD_u8ComAnodeWriteVal(copy_pSSD_tConfig ,copy_u8Number);
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc6:	6c 81       	ldd	r22, Y+4	; 0x04
    1bc8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <SSD_u8ComAnodeWriteVal>
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <SSD_u8SetNumber+0x72>
#if SSD_USE_ENABLE_PIN == FEATURE_ON
				DIO_VoidSetPinValue(copy_pSSD_tConfig->EnablePort , copy_pSSD_tConfig->EnablePin ,  DIO_PIN_LOGIC_HIGH);
#endif
				break;
			default: ret = 0; break;
    1bd0:	19 82       	std	Y+1, r1	; 0x01
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <SSD_u8SetNumber+0x72>
		}
#endif
	}
	else
	{
		ret = 0;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd8:	26 96       	adiw	r28, 0x06	; 6
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <SSD_u8CommonTypes_init>:
}

#else

static inline u8 SSD_u8CommonTypes_init(const SSD_t* copy_pSSD_tConfig)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <SSD_u8CommonTypes_init+0x6>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	9b 83       	std	Y+3, r25	; 0x03
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <SSD_u8CommonTypes_init+0x2e>
	for(; i < DIO_PIN7 ; ++i)
	{
		DIO_voidPinInit(copy_pSSD_tConfig->Port , i , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
    1bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1c00:	fb 81       	ldd	r31, Y+3	; 0x03
    1c02:	80 81       	ld	r24, Z
    1c04:	82 95       	swap	r24
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	69 81       	ldd	r22, Y+1	; 0x01
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
#else

static inline u8 SSD_u8CommonTypes_init(const SSD_t* copy_pSSD_tConfig)
{
	u8 i = 0;
	for(; i < DIO_PIN7 ; ++i)
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	87 30       	cpi	r24, 0x07	; 7
    1c1c:	80 f3       	brcs	.-32     	; 0x1bfe <SSD_u8CommonTypes_init+0x14>
	{
		DIO_voidPinInit(copy_pSSD_tConfig->Port , i , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
	}

	return 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <SSD_u8ComAnodeWriteVal>:



static u8 SSD_u8ComAnodeWriteVal(const SSD_t* copy_pSSD_tConfig , u8 copy_u8Number)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <SSD_u8ComAnodeWriteVal+0x6>
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VoidSetPortValue(copy_pSSD_tConfig->Port, ~(SSD_arrCommonCathod[copy_u8Number]) );
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	80 81       	ld	r24, Z
    1c44:	82 95       	swap	r24
    1c46:	8f 70       	andi	r24, 0x0F	; 15
    1c48:	28 2f       	mov	r18, r24
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	fc 01       	movw	r30, r24
    1c52:	e9 54       	subi	r30, 0x49	; 73
    1c54:	fe 4f       	sbci	r31, 0xFE	; 254
    1c56:	80 81       	ld	r24, Z
    1c58:	98 2f       	mov	r25, r24
    1c5a:	90 95       	com	r25
    1c5c:	82 2f       	mov	r24, r18
    1c5e:	69 2f       	mov	r22, r25
    1c60:	0e 94 15 0b 	call	0x162a	; 0x162a <DIO_VoidSetPortValue>
	return 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <SSD_u8ComCathodWriteVal>:

static u8 SSD_u8ComCathodWriteVal(const SSD_t* copy_pSSD_tConfig , u8 copy_u8Number)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <SSD_u8ComCathodWriteVal+0x6>
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VoidSetPortValue(copy_pSSD_tConfig->Port, SSD_arrCommonCathod[copy_u8Number] );
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	80 81       	ld	r24, Z
    1c8a:	82 95       	swap	r24
    1c8c:	8f 70       	andi	r24, 0x0F	; 15
    1c8e:	28 2f       	mov	r18, r24
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	fc 01       	movw	r30, r24
    1c98:	e9 54       	subi	r30, 0x49	; 73
    1c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9c:	90 81       	ld	r25, Z
    1c9e:	82 2f       	mov	r24, r18
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	0e 94 15 0b 	call	0x162a	; 0x162a <DIO_VoidSetPortValue>
	return 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <SW_u8Init>:
static u8 prev_SelfLocking_logic = 0;



u8 SW_u8Init(const SW_t* Copy_pSW_tConfig)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <SW_u8Init+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <SW_u8Init+0x8>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	9b 83       	std	Y+3, r25	; 0x03
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pSW_tConfig && Copy_pSW_tConfig->Port <= DIO_PORTD_IDX && Copy_pSW_tConfig->Pin <= DIO_PIN7)
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <SW_u8Init+0x1e>
    1cd0:	75 c0       	rjmp	.+234    	; 0x1dbc <SW_u8Init+0x108>
    1cd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd6:	80 81       	ld	r24, Z
    1cd8:	87 70       	andi	r24, 0x07	; 7
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	0c f0       	brlt	.+2      	; 0x1ce6 <SW_u8Init+0x32>
    1ce4:	6b c0       	rjmp	.+214    	; 0x1dbc <SW_u8Init+0x108>
    1ce6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cea:	80 81       	ld	r24, Z
    1cec:	86 95       	lsr	r24
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	87 70       	andi	r24, 0x07	; 7
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	88 30       	cpi	r24, 0x08	; 8
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	0c f0       	brlt	.+2      	; 0x1d00 <SW_u8Init+0x4c>
    1cfe:	5e c0       	rjmp	.+188    	; 0x1dbc <SW_u8Init+0x108>
	{
		switch(Copy_pSW_tConfig->PullType)
    1d00:	ea 81       	ldd	r30, Y+2	; 0x02
    1d02:	fb 81       	ldd	r31, Y+3	; 0x03
    1d04:	80 81       	ld	r24, Z
    1d06:	82 95       	swap	r24
    1d08:	86 95       	lsr	r24
    1d0a:	86 95       	lsr	r24
    1d0c:	83 70       	andi	r24, 0x03	; 3
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3d 83       	std	Y+5, r19	; 0x05
    1d14:	2c 83       	std	Y+4, r18	; 0x04
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	31 f0       	breq	.+12     	; 0x1d2c <SW_u8Init+0x78>
    1d20:	2c 81       	ldd	r18, Y+4	; 0x04
    1d22:	3d 81       	ldd	r19, Y+5	; 0x05
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	b9 f0       	breq	.+46     	; 0x1d58 <SW_u8Init+0xa4>
    1d2a:	2c c0       	rjmp	.+88     	; 0x1d84 <SW_u8Init+0xd0>
		{
		case SW_ExPullUpType || SW_ExPullDownType:
			DIO_voidPinInit(Copy_pSW_tConfig->Port ,Copy_pSW_tConfig->Pin , DIO_PIN_DIR_INPUT ,DIO_PIN_LOGIC_LOW);
    1d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d30:	80 81       	ld	r24, Z
    1d32:	87 70       	andi	r24, 0x07	; 7
    1d34:	28 2f       	mov	r18, r24
    1d36:	ea 81       	ldd	r30, Y+2	; 0x02
    1d38:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3a:	80 81       	ld	r24, Z
    1d3c:	86 95       	lsr	r24
    1d3e:	86 95       	lsr	r24
    1d40:	86 95       	lsr	r24
    1d42:	87 70       	andi	r24, 0x07	; 7
    1d44:	98 2f       	mov	r25, r24
    1d46:	82 2f       	mov	r24, r18
    1d48:	69 2f       	mov	r22, r25
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
			ret = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	17 c0       	rjmp	.+46     	; 0x1d86 <SW_u8Init+0xd2>
			break;
		case SW_IntPullUpType:
			DIO_voidPinInit(Copy_pSW_tConfig->Port ,Copy_pSW_tConfig->Pin , DIO_PIN_DIR_INPUT ,DIO_PIN_LOGIC_HIGH);
    1d58:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5c:	80 81       	ld	r24, Z
    1d5e:	87 70       	andi	r24, 0x07	; 7
    1d60:	28 2f       	mov	r18, r24
    1d62:	ea 81       	ldd	r30, Y+2	; 0x02
    1d64:	fb 81       	ldd	r31, Y+3	; 0x03
    1d66:	80 81       	ld	r24, Z
    1d68:	86 95       	lsr	r24
    1d6a:	86 95       	lsr	r24
    1d6c:	86 95       	lsr	r24
    1d6e:	87 70       	andi	r24, 0x07	; 7
    1d70:	98 2f       	mov	r25, r24
    1d72:	82 2f       	mov	r24, r18
    1d74:	69 2f       	mov	r22, r25
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	21 e0       	ldi	r18, 0x01	; 1
    1d7a:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
			ret = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <SW_u8Init+0xd2>
			break;
		default: ret = 0; break;
    1d84:	19 82       	std	Y+1, r1	; 0x01
		}
		if(Copy_pSW_tConfig->SelfLockingType == SW_Type_SelfLocking)
    1d86:	ea 81       	ldd	r30, Y+2	; 0x02
    1d88:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8a:	81 81       	ldd	r24, Z+1	; 0x01
    1d8c:	81 70       	andi	r24, 0x01	; 1
    1d8e:	88 23       	and	r24, r24
    1d90:	b1 f4       	brne	.+44     	; 0x1dbe <SW_u8Init+0x10a>
		{
			DIO_VoidGetPinValue(Copy_pSW_tConfig->Port,Copy_pSW_tConfig->Pin,&prev_SelfLocking_logic);
    1d92:	ea 81       	ldd	r30, Y+2	; 0x02
    1d94:	fb 81       	ldd	r31, Y+3	; 0x03
    1d96:	80 81       	ld	r24, Z
    1d98:	87 70       	andi	r24, 0x07	; 7
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1da0:	80 81       	ld	r24, Z
    1da2:	86 95       	lsr	r24
    1da4:	86 95       	lsr	r24
    1da6:	86 95       	lsr	r24
    1da8:	87 70       	andi	r24, 0x07	; 7
    1daa:	98 2f       	mov	r25, r24
    1dac:	27 ef       	ldi	r18, 0xF7	; 247
    1dae:	31 e0       	ldi	r19, 0x01	; 1
    1db0:	84 2f       	mov	r24, r20
    1db2:	69 2f       	mov	r22, r25
    1db4:	a9 01       	movw	r20, r18
    1db6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_VoidGetPinValue>
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <SW_u8Init+0x10a>
		}

	}
	else
	{
		ret = 0;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <SW_u8GetState>:

u8 SW_u8GetState(const SW_t* Copy_pSW_tConfig , u8* Copy_pu8SwitchState)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	27 97       	sbiw	r28, 0x07	; 7
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
    1de8:	7e 83       	std	Y+6, r23	; 0x06
    1dea:	6d 83       	std	Y+5, r22	; 0x05
	u8 ret = 0;
    1dec:	19 82       	std	Y+1, r1	; 0x01
	u8 l_read_Pin = 0;
    1dee:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pSW_tConfig && Copy_pSW_tConfig->Port <= DIO_PORTD_IDX && Copy_pSW_tConfig->Pin <= DIO_PIN7)
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <SW_u8GetState+0x2a>
    1df8:	55 c0       	rjmp	.+170    	; 0x1ea4 <SW_u8GetState+0xd4>
    1dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfe:	80 81       	ld	r24, Z
    1e00:	87 70       	andi	r24, 0x07	; 7
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	91 05       	cpc	r25, r1
    1e0a:	0c f0       	brlt	.+2      	; 0x1e0e <SW_u8GetState+0x3e>
    1e0c:	4b c0       	rjmp	.+150    	; 0x1ea4 <SW_u8GetState+0xd4>
    1e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e10:	fc 81       	ldd	r31, Y+4	; 0x04
    1e12:	80 81       	ld	r24, Z
    1e14:	86 95       	lsr	r24
    1e16:	86 95       	lsr	r24
    1e18:	86 95       	lsr	r24
    1e1a:	87 70       	andi	r24, 0x07	; 7
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	88 30       	cpi	r24, 0x08	; 8
    1e22:	91 05       	cpc	r25, r1
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <SW_u8GetState+0x58>
    1e26:	3e c0       	rjmp	.+124    	; 0x1ea4 <SW_u8GetState+0xd4>
	{
		DIO_VoidGetPinValue(Copy_pSW_tConfig->Port,Copy_pSW_tConfig->Pin,&l_read_Pin); // read sw logic
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	80 81       	ld	r24, Z
    1e2e:	87 70       	andi	r24, 0x07	; 7
    1e30:	48 2f       	mov	r20, r24
    1e32:	eb 81       	ldd	r30, Y+3	; 0x03
    1e34:	fc 81       	ldd	r31, Y+4	; 0x04
    1e36:	80 81       	ld	r24, Z
    1e38:	86 95       	lsr	r24
    1e3a:	86 95       	lsr	r24
    1e3c:	86 95       	lsr	r24
    1e3e:	87 70       	andi	r24, 0x07	; 7
    1e40:	98 2f       	mov	r25, r24
    1e42:	9e 01       	movw	r18, r28
    1e44:	2e 5f       	subi	r18, 0xFE	; 254
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	84 2f       	mov	r24, r20
    1e4a:	69 2f       	mov	r22, r25
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_VoidGetPinValue>
		if(Copy_pSW_tConfig->SelfLockingType == SW_Type_NotSelfLocking)
    1e52:	eb 81       	ldd	r30, Y+3	; 0x03
    1e54:	fc 81       	ldd	r31, Y+4	; 0x04
    1e56:	81 81       	ldd	r24, Z+1	; 0x01
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	88 23       	and	r24, r24
    1e5c:	39 f0       	breq	.+14     	; 0x1e6c <SW_u8GetState+0x9c>
		{
			*Copy_pu8SwitchState = l_read_Pin;
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	ed 81       	ldd	r30, Y+5	; 0x05
    1e62:	fe 81       	ldd	r31, Y+6	; 0x06
    1e64:	80 83       	st	Z, r24
			ret = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	1d c0       	rjmp	.+58     	; 0x1ea6 <SW_u8GetState+0xd6>
		}
		else if (Copy_pSW_tConfig->SelfLockingType == SW_Type_SelfLocking)
    1e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
    1e72:	81 70       	andi	r24, 0x01	; 1
    1e74:	88 23       	and	r24, r24
    1e76:	a1 f4       	brne	.+40     	; 0x1ea0 <SW_u8GetState+0xd0>
		{
			*(Copy_pu8SwitchState) = (l_read_Pin == prev_SelfLocking_logic)? SW_SelfLocking_NotPressed : SW_SelfLocking_Pressed;
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	80 91 f7 01 	lds	r24, 0x01F7
    1e7e:	98 17       	cp	r25, r24
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <SW_u8GetState+0xb8>
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <SW_u8GetState+0xbc>
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	8f 83       	std	Y+7, r24	; 0x07
    1e8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e90:	8f 81       	ldd	r24, Y+7	; 0x07
    1e92:	80 83       	st	Z, r24
			prev_SelfLocking_logic = l_read_Pin;
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	80 93 f7 01 	sts	0x01F7, r24
			ret = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	03 c0       	rjmp	.+6      	; 0x1ea6 <SW_u8GetState+0xd6>
		}
		else
		{
			ret = 0;
    1ea0:	19 82       	std	Y+1, r1	; 0x01
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <SW_u8GetState+0xd6>
		}

	}
	else
	{
		ret = 0;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea8:	27 96       	adiw	r28, 0x07	; 7
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <StepperMotor_VoidInit>:
#include "StepperMotor_config.h"
#include "StepperMotor_interface.h"


void StepperMotor_VoidInit(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <StepperMotor_VoidInit+0x6>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pStepMotor_st_Config)
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <StepperMotor_VoidInit+0x18>
    1ed0:	4a c0       	rjmp	.+148    	; 0x1f66 <StepperMotor_VoidInit+0xac>
	{
		// init blue pin
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_DIR_OUTPUT);
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	84 81       	ldd	r24, Z+4	; 0x04
    1ed8:	82 95       	swap	r24
    1eda:	86 95       	lsr	r24
    1edc:	86 95       	lsr	r24
    1ede:	83 70       	andi	r24, 0x03	; 3
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee6:	84 81       	ldd	r24, Z+4	; 0x04
    1ee8:	87 70       	andi	r24, 0x07	; 7
    1eea:	98 2f       	mov	r25, r24
    1eec:	82 2f       	mov	r24, r18
    1eee:	69 2f       	mov	r22, r25
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
		//pink
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_DIR_OUTPUT);
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	85 81       	ldd	r24, Z+5	; 0x05
    1efc:	82 95       	swap	r24
    1efe:	86 95       	lsr	r24
    1f00:	86 95       	lsr	r24
    1f02:	83 70       	andi	r24, 0x03	; 3
    1f04:	28 2f       	mov	r18, r24
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	84 81       	ldd	r24, Z+4	; 0x04
    1f0c:	86 95       	lsr	r24
    1f0e:	86 95       	lsr	r24
    1f10:	86 95       	lsr	r24
    1f12:	87 70       	andi	r24, 0x07	; 7
    1f14:	98 2f       	mov	r25, r24
    1f16:	82 2f       	mov	r24, r18
    1f18:	69 2f       	mov	r22, r25
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
		//orange
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_DIR_OUTPUT);
    1f20:	e9 81       	ldd	r30, Y+1	; 0x01
    1f22:	fa 81       	ldd	r31, Y+2	; 0x02
    1f24:	86 81       	ldd	r24, Z+6	; 0x06
    1f26:	83 70       	andi	r24, 0x03	; 3
    1f28:	28 2f       	mov	r18, r24
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	85 81       	ldd	r24, Z+5	; 0x05
    1f30:	87 70       	andi	r24, 0x07	; 7
    1f32:	98 2f       	mov	r25, r24
    1f34:	82 2f       	mov	r24, r18
    1f36:	69 2f       	mov	r22, r25
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
		//yellow
		DIO_VoidSetPinDirection(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_DIR_OUTPUT);
    1f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f40:	fa 81       	ldd	r31, Y+2	; 0x02
    1f42:	86 81       	ldd	r24, Z+6	; 0x06
    1f44:	86 95       	lsr	r24
    1f46:	86 95       	lsr	r24
    1f48:	83 70       	andi	r24, 0x03	; 3
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	85 81       	ldd	r24, Z+5	; 0x05
    1f52:	86 95       	lsr	r24
    1f54:	86 95       	lsr	r24
    1f56:	86 95       	lsr	r24
    1f58:	87 70       	andi	r24, 0x07	; 7
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	82 2f       	mov	r24, r18
    1f5e:	69 2f       	mov	r22, r25
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
	else
	{

	}
	return;
}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <StepperMotor_VoidStepClockWise>:

void StepperMotor_VoidStepClockWise(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	c8 54       	subi	r28, 0x48	; 72
    1f7e:	d0 40       	sbci	r29, 0x00	; 0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e9 5b       	subi	r30, 0xB9	; 185
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
	if(Copy_pStepMotor_st_Config)
    1f94:	fe 01       	movw	r30, r28
    1f96:	e9 5b       	subi	r30, 0xB9	; 185
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <StepperMotor_VoidStepClockWise+0x34>
    1fa2:	21 c3       	rjmp	.+1602   	; 0x25e6 <StepperMotor_VoidStepClockWise+0x676>
	{
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_HIGH);
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e9 5b       	subi	r30, 0xB9	; 185
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	01 90       	ld	r0, Z+
    1fac:	f0 81       	ld	r31, Z
    1fae:	e0 2d       	mov	r30, r0
    1fb0:	84 81       	ldd	r24, Z+4	; 0x04
    1fb2:	82 95       	swap	r24
    1fb4:	86 95       	lsr	r24
    1fb6:	86 95       	lsr	r24
    1fb8:	83 70       	andi	r24, 0x03	; 3
    1fba:	28 2f       	mov	r18, r24
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e9 5b       	subi	r30, 0xB9	; 185
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	01 90       	ld	r0, Z+
    1fc4:	f0 81       	ld	r31, Z
    1fc6:	e0 2d       	mov	r30, r0
    1fc8:	84 81       	ldd	r24, Z+4	; 0x04
    1fca:	87 70       	andi	r24, 0x07	; 7
    1fcc:	98 2f       	mov	r25, r24
    1fce:	82 2f       	mov	r24, r18
    1fd0:	69 2f       	mov	r22, r25
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 5b       	subi	r30, 0xBD	; 189
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e2       	ldi	r26, 0x20	; 32
    1fe4:	b1 e4       	ldi	r27, 0x41	; 65
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	8e 01       	movw	r16, r28
    1ff0:	01 5c       	subi	r16, 0xC1	; 193
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ed 5b       	subi	r30, 0xBD	; 189
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	f8 01       	movw	r30, r16
    2014:	80 83       	st	Z, r24
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	a2 83       	std	Z+2, r26	; 0x02
    201a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    201c:	fe 01       	movw	r30, r28
    201e:	ff 96       	adiw	r30, 0x3f	; 63
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <StepperMotor_VoidStepClockWise+0xd2>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e af       	std	Y+62, r25	; 0x3e
    203e:	8d af       	std	Y+61, r24	; 0x3d
    2040:	46 c0       	rjmp	.+140    	; 0x20ce <StepperMotor_VoidStepClockWise+0x15e>
	else if (__tmp > 65535)
    2042:	fe 01       	movw	r30, r28
    2044:	ff 96       	adiw	r30, 0x3f	; 63
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	3f ef       	ldi	r19, 0xFF	; 255
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	57 e4       	ldi	r21, 0x47	; 71
    2056:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    205a:	18 16       	cp	r1, r24
    205c:	64 f5       	brge	.+88     	; 0x20b6 <StepperMotor_VoidStepClockWise+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205e:	fe 01       	movw	r30, r28
    2060:	ed 5b       	subi	r30, 0xBD	; 189
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e af       	std	Y+62, r25	; 0x3e
    208a:	8d af       	std	Y+61, r24	; 0x3d
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <StepperMotor_VoidStepClockWise+0x13c>
    208e:	88 ec       	ldi	r24, 0xC8	; 200
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9c af       	std	Y+60, r25	; 0x3c
    2094:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2096:	8b ad       	ldd	r24, Y+59	; 0x3b
    2098:	9c ad       	ldd	r25, Y+60	; 0x3c
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <StepperMotor_VoidStepClockWise+0x12a>
    209e:	9c af       	std	Y+60, r25	; 0x3c
    20a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	9e af       	std	Y+62, r25	; 0x3e
    20aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	69 f7       	brne	.-38     	; 0x208e <StepperMotor_VoidStepClockWise+0x11e>
    20b4:	16 c0       	rjmp	.+44     	; 0x20e2 <StepperMotor_VoidStepClockWise+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	fe 01       	movw	r30, r28
    20b8:	ff 96       	adiw	r30, 0x3f	; 63
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e af       	std	Y+62, r25	; 0x3e
    20cc:	8d af       	std	Y+61, r24	; 0x3d
    20ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    20d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20d2:	9a af       	std	Y+58, r25	; 0x3a
    20d4:	89 af       	std	Y+57, r24	; 0x39
    20d6:	89 ad       	ldd	r24, Y+57	; 0x39
    20d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <StepperMotor_VoidStepClockWise+0x16a>
    20de:	9a af       	std	Y+58, r25	; 0x3a
    20e0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_LOW);
    20e2:	fe 01       	movw	r30, r28
    20e4:	e9 5b       	subi	r30, 0xB9	; 185
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	01 90       	ld	r0, Z+
    20ea:	f0 81       	ld	r31, Z
    20ec:	e0 2d       	mov	r30, r0
    20ee:	84 81       	ldd	r24, Z+4	; 0x04
    20f0:	82 95       	swap	r24
    20f2:	86 95       	lsr	r24
    20f4:	86 95       	lsr	r24
    20f6:	83 70       	andi	r24, 0x03	; 3
    20f8:	28 2f       	mov	r18, r24
    20fa:	fe 01       	movw	r30, r28
    20fc:	e9 5b       	subi	r30, 0xB9	; 185
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	01 90       	ld	r0, Z+
    2102:	f0 81       	ld	r31, Z
    2104:	e0 2d       	mov	r30, r0
    2106:	84 81       	ldd	r24, Z+4	; 0x04
    2108:	87 70       	andi	r24, 0x07	; 7
    210a:	98 2f       	mov	r25, r24
    210c:	82 2f       	mov	r24, r18
    210e:	69 2f       	mov	r22, r25
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_HIGH);
    2116:	fe 01       	movw	r30, r28
    2118:	e9 5b       	subi	r30, 0xB9	; 185
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	01 90       	ld	r0, Z+
    211e:	f0 81       	ld	r31, Z
    2120:	e0 2d       	mov	r30, r0
    2122:	85 81       	ldd	r24, Z+5	; 0x05
    2124:	82 95       	swap	r24
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	83 70       	andi	r24, 0x03	; 3
    212c:	28 2f       	mov	r18, r24
    212e:	fe 01       	movw	r30, r28
    2130:	e9 5b       	subi	r30, 0xB9	; 185
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	01 90       	ld	r0, Z+
    2136:	f0 81       	ld	r31, Z
    2138:	e0 2d       	mov	r30, r0
    213a:	84 81       	ldd	r24, Z+4	; 0x04
    213c:	86 95       	lsr	r24
    213e:	86 95       	lsr	r24
    2140:	86 95       	lsr	r24
    2142:	87 70       	andi	r24, 0x07	; 7
    2144:	98 2f       	mov	r25, r24
    2146:	82 2f       	mov	r24, r18
    2148:	69 2f       	mov	r22, r25
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e2       	ldi	r26, 0x20	; 32
    2156:	b1 e4       	ldi	r27, 0x41	; 65
    2158:	8d ab       	std	Y+53, r24	; 0x35
    215a:	9e ab       	std	Y+54, r25	; 0x36
    215c:	af ab       	std	Y+55, r26	; 0x37
    215e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6d a9       	ldd	r22, Y+53	; 0x35
    2162:	7e a9       	ldd	r23, Y+54	; 0x36
    2164:	8f a9       	ldd	r24, Y+55	; 0x37
    2166:	98 ad       	ldd	r25, Y+56	; 0x38
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a ef       	ldi	r20, 0xFA	; 250
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	89 ab       	std	Y+49, r24	; 0x31
    217a:	9a ab       	std	Y+50, r25	; 0x32
    217c:	ab ab       	std	Y+51, r26	; 0x33
    217e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <StepperMotor_VoidStepClockWise+0x232>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	98 ab       	std	Y+48, r25	; 0x30
    219e:	8f a7       	std	Y+47, r24	; 0x2f
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <StepperMotor_VoidStepClockWise+0x2b0>
	else if (__tmp > 65535)
    21a2:	69 a9       	ldd	r22, Y+49	; 0x31
    21a4:	7a a9       	ldd	r23, Y+50	; 0x32
    21a6:	8b a9       	ldd	r24, Y+51	; 0x33
    21a8:	9c a9       	ldd	r25, Y+52	; 0x34
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <StepperMotor_VoidStepClockWise+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6d a9       	ldd	r22, Y+53	; 0x35
    21bc:	7e a9       	ldd	r23, Y+54	; 0x36
    21be:	8f a9       	ldd	r24, Y+55	; 0x37
    21c0:	98 ad       	ldd	r25, Y+56	; 0x38
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	98 ab       	std	Y+48, r25	; 0x30
    21e0:	8f a7       	std	Y+47, r24	; 0x2f
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <StepperMotor_VoidStepClockWise+0x292>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9e a7       	std	Y+46, r25	; 0x2e
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
    21ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <StepperMotor_VoidStepClockWise+0x280>
    21f4:	9e a7       	std	Y+46, r25	; 0x2e
    21f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fa:	98 a9       	ldd	r25, Y+48	; 0x30
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	98 ab       	std	Y+48, r25	; 0x30
    2200:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8f a5       	ldd	r24, Y+47	; 0x2f
    2204:	98 a9       	ldd	r25, Y+48	; 0x30
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <StepperMotor_VoidStepClockWise+0x274>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <StepperMotor_VoidStepClockWise+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	69 a9       	ldd	r22, Y+49	; 0x31
    220e:	7a a9       	ldd	r23, Y+50	; 0x32
    2210:	8b a9       	ldd	r24, Y+51	; 0x33
    2212:	9c a9       	ldd	r25, Y+52	; 0x34
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	8f a5       	ldd	r24, Y+47	; 0x2f
    2222:	98 a9       	ldd	r25, Y+48	; 0x30
    2224:	9c a7       	std	Y+44, r25	; 0x2c
    2226:	8b a7       	std	Y+43, r24	; 0x2b
    2228:	8b a5       	ldd	r24, Y+43	; 0x2b
    222a:	9c a5       	ldd	r25, Y+44	; 0x2c
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <StepperMotor_VoidStepClockWise+0x2bc>
    2230:	9c a7       	std	Y+44, r25	; 0x2c
    2232:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_LOW);
    2234:	fe 01       	movw	r30, r28
    2236:	e9 5b       	subi	r30, 0xB9	; 185
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	01 90       	ld	r0, Z+
    223c:	f0 81       	ld	r31, Z
    223e:	e0 2d       	mov	r30, r0
    2240:	85 81       	ldd	r24, Z+5	; 0x05
    2242:	82 95       	swap	r24
    2244:	86 95       	lsr	r24
    2246:	86 95       	lsr	r24
    2248:	83 70       	andi	r24, 0x03	; 3
    224a:	28 2f       	mov	r18, r24
    224c:	fe 01       	movw	r30, r28
    224e:	e9 5b       	subi	r30, 0xB9	; 185
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	01 90       	ld	r0, Z+
    2254:	f0 81       	ld	r31, Z
    2256:	e0 2d       	mov	r30, r0
    2258:	84 81       	ldd	r24, Z+4	; 0x04
    225a:	86 95       	lsr	r24
    225c:	86 95       	lsr	r24
    225e:	86 95       	lsr	r24
    2260:	87 70       	andi	r24, 0x07	; 7
    2262:	98 2f       	mov	r25, r24
    2264:	82 2f       	mov	r24, r18
    2266:	69 2f       	mov	r22, r25
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_HIGH);
    226e:	fe 01       	movw	r30, r28
    2270:	e9 5b       	subi	r30, 0xB9	; 185
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	01 90       	ld	r0, Z+
    2276:	f0 81       	ld	r31, Z
    2278:	e0 2d       	mov	r30, r0
    227a:	86 81       	ldd	r24, Z+6	; 0x06
    227c:	83 70       	andi	r24, 0x03	; 3
    227e:	28 2f       	mov	r18, r24
    2280:	fe 01       	movw	r30, r28
    2282:	e9 5b       	subi	r30, 0xB9	; 185
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	01 90       	ld	r0, Z+
    2288:	f0 81       	ld	r31, Z
    228a:	e0 2d       	mov	r30, r0
    228c:	85 81       	ldd	r24, Z+5	; 0x05
    228e:	87 70       	andi	r24, 0x07	; 7
    2290:	98 2f       	mov	r25, r24
    2292:	82 2f       	mov	r24, r18
    2294:	69 2f       	mov	r22, r25
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e2       	ldi	r26, 0x20	; 32
    22a2:	b1 e4       	ldi	r27, 0x41	; 65
    22a4:	8f a3       	std	Y+39, r24	; 0x27
    22a6:	98 a7       	std	Y+40, r25	; 0x28
    22a8:	a9 a7       	std	Y+41, r26	; 0x29
    22aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	6f a1       	ldd	r22, Y+39	; 0x27
    22ae:	78 a5       	ldd	r23, Y+40	; 0x28
    22b0:	89 a5       	ldd	r24, Y+41	; 0x29
    22b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a ef       	ldi	r20, 0xFA	; 250
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8b a3       	std	Y+35, r24	; 0x23
    22c6:	9c a3       	std	Y+36, r25	; 0x24
    22c8:	ad a3       	std	Y+37, r26	; 0x25
    22ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22cc:	6b a1       	ldd	r22, Y+35	; 0x23
    22ce:	7c a1       	ldd	r23, Y+36	; 0x24
    22d0:	8d a1       	ldd	r24, Y+37	; 0x25
    22d2:	9e a1       	ldd	r25, Y+38	; 0x26
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <StepperMotor_VoidStepClockWise+0x37e>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9a a3       	std	Y+34, r25	; 0x22
    22ea:	89 a3       	std	Y+33, r24	; 0x21
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <StepperMotor_VoidStepClockWise+0x3fc>
	else if (__tmp > 65535)
    22ee:	6b a1       	ldd	r22, Y+35	; 0x23
    22f0:	7c a1       	ldd	r23, Y+36	; 0x24
    22f2:	8d a1       	ldd	r24, Y+37	; 0x25
    22f4:	9e a1       	ldd	r25, Y+38	; 0x26
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <StepperMotor_VoidStepClockWise+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	6f a1       	ldd	r22, Y+39	; 0x27
    2308:	78 a5       	ldd	r23, Y+40	; 0x28
    230a:	89 a5       	ldd	r24, Y+41	; 0x29
    230c:	9a a5       	ldd	r25, Y+42	; 0x2a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9a a3       	std	Y+34, r25	; 0x22
    232c:	89 a3       	std	Y+33, r24	; 0x21
    232e:	0f c0       	rjmp	.+30     	; 0x234e <StepperMotor_VoidStepClockWise+0x3de>
    2330:	88 ec       	ldi	r24, 0xC8	; 200
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	98 a3       	std	Y+32, r25	; 0x20
    2336:	8f 8f       	std	Y+31, r24	; 0x1f
    2338:	8f 8d       	ldd	r24, Y+31	; 0x1f
    233a:	98 a1       	ldd	r25, Y+32	; 0x20
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <StepperMotor_VoidStepClockWise+0x3cc>
    2340:	98 a3       	std	Y+32, r25	; 0x20
    2342:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	89 a1       	ldd	r24, Y+33	; 0x21
    2346:	9a a1       	ldd	r25, Y+34	; 0x22
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9a a3       	std	Y+34, r25	; 0x22
    234c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	89 a1       	ldd	r24, Y+33	; 0x21
    2350:	9a a1       	ldd	r25, Y+34	; 0x22
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <StepperMotor_VoidStepClockWise+0x3c0>
    2356:	14 c0       	rjmp	.+40     	; 0x2380 <StepperMotor_VoidStepClockWise+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	89 a3       	std	Y+33, r24	; 0x21
    236c:	89 a1       	ldd	r24, Y+33	; 0x21
    236e:	9a a1       	ldd	r25, Y+34	; 0x22
    2370:	9e 8f       	std	Y+30, r25	; 0x1e
    2372:	8d 8f       	std	Y+29, r24	; 0x1d
    2374:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2376:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <StepperMotor_VoidStepClockWise+0x408>
    237c:	9e 8f       	std	Y+30, r25	; 0x1e
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_LOW);
    2380:	fe 01       	movw	r30, r28
    2382:	e9 5b       	subi	r30, 0xB9	; 185
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	01 90       	ld	r0, Z+
    2388:	f0 81       	ld	r31, Z
    238a:	e0 2d       	mov	r30, r0
    238c:	86 81       	ldd	r24, Z+6	; 0x06
    238e:	83 70       	andi	r24, 0x03	; 3
    2390:	28 2f       	mov	r18, r24
    2392:	fe 01       	movw	r30, r28
    2394:	e9 5b       	subi	r30, 0xB9	; 185
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	01 90       	ld	r0, Z+
    239a:	f0 81       	ld	r31, Z
    239c:	e0 2d       	mov	r30, r0
    239e:	85 81       	ldd	r24, Z+5	; 0x05
    23a0:	87 70       	andi	r24, 0x07	; 7
    23a2:	98 2f       	mov	r25, r24
    23a4:	82 2f       	mov	r24, r18
    23a6:	69 2f       	mov	r22, r25
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_HIGH);
    23ae:	fe 01       	movw	r30, r28
    23b0:	e9 5b       	subi	r30, 0xB9	; 185
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	01 90       	ld	r0, Z+
    23b6:	f0 81       	ld	r31, Z
    23b8:	e0 2d       	mov	r30, r0
    23ba:	86 81       	ldd	r24, Z+6	; 0x06
    23bc:	86 95       	lsr	r24
    23be:	86 95       	lsr	r24
    23c0:	83 70       	andi	r24, 0x03	; 3
    23c2:	28 2f       	mov	r18, r24
    23c4:	fe 01       	movw	r30, r28
    23c6:	e9 5b       	subi	r30, 0xB9	; 185
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	01 90       	ld	r0, Z+
    23cc:	f0 81       	ld	r31, Z
    23ce:	e0 2d       	mov	r30, r0
    23d0:	85 81       	ldd	r24, Z+5	; 0x05
    23d2:	86 95       	lsr	r24
    23d4:	86 95       	lsr	r24
    23d6:	86 95       	lsr	r24
    23d8:	87 70       	andi	r24, 0x07	; 7
    23da:	98 2f       	mov	r25, r24
    23dc:	82 2f       	mov	r24, r18
    23de:	69 2f       	mov	r22, r25
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a0 e2       	ldi	r26, 0x20	; 32
    23ec:	b1 e4       	ldi	r27, 0x41	; 65
    23ee:	89 8f       	std	Y+25, r24	; 0x19
    23f0:	9a 8f       	std	Y+26, r25	; 0x1a
    23f2:	ab 8f       	std	Y+27, r26	; 0x1b
    23f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	69 8d       	ldd	r22, Y+25	; 0x19
    23f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	4a ef       	ldi	r20, 0xFA	; 250
    2404:	54 e4       	ldi	r21, 0x44	; 68
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8d 8b       	std	Y+21, r24	; 0x15
    2410:	9e 8b       	std	Y+22, r25	; 0x16
    2412:	af 8b       	std	Y+23, r26	; 0x17
    2414:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <StepperMotor_VoidStepClockWise+0x4c8>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 8b       	std	Y+20, r25	; 0x14
    2434:	8b 8b       	std	Y+19, r24	; 0x13
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <StepperMotor_VoidStepClockWise+0x546>
	else if (__tmp > 65535)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <StepperMotor_VoidStepClockWise+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	69 8d       	ldd	r22, Y+25	; 0x19
    2452:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2454:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2456:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <StepperMotor_VoidStepClockWise+0x528>
    247a:	88 ec       	ldi	r24, 0xC8	; 200
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9a 8b       	std	Y+18, r25	; 0x12
    2480:	89 8b       	std	Y+17, r24	; 0x11
    2482:	89 89       	ldd	r24, Y+17	; 0x11
    2484:	9a 89       	ldd	r25, Y+18	; 0x12
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <StepperMotor_VoidStepClockWise+0x516>
    248a:	9a 8b       	std	Y+18, r25	; 0x12
    248c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	8b 89       	ldd	r24, Y+19	; 0x13
    2490:	9c 89       	ldd	r25, Y+20	; 0x14
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	9c 8b       	std	Y+20, r25	; 0x14
    2496:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	8b 89       	ldd	r24, Y+19	; 0x13
    249a:	9c 89       	ldd	r25, Y+20	; 0x14
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <StepperMotor_VoidStepClockWise+0x50a>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <StepperMotor_VoidStepClockWise+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	6d 89       	ldd	r22, Y+21	; 0x15
    24a4:	7e 89       	ldd	r23, Y+22	; 0x16
    24a6:	8f 89       	ldd	r24, Y+23	; 0x17
    24a8:	98 8d       	ldd	r25, Y+24	; 0x18
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	8b 89       	ldd	r24, Y+19	; 0x13
    24b8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ba:	98 8b       	std	Y+16, r25	; 0x10
    24bc:	8f 87       	std	Y+15, r24	; 0x0f
    24be:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c0:	98 89       	ldd	r25, Y+16	; 0x10
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <StepperMotor_VoidStepClockWise+0x552>
    24c6:	98 8b       	std	Y+16, r25	; 0x10
    24c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_LOW);
    24ca:	fe 01       	movw	r30, r28
    24cc:	e9 5b       	subi	r30, 0xB9	; 185
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	01 90       	ld	r0, Z+
    24d2:	f0 81       	ld	r31, Z
    24d4:	e0 2d       	mov	r30, r0
    24d6:	86 81       	ldd	r24, Z+6	; 0x06
    24d8:	86 95       	lsr	r24
    24da:	86 95       	lsr	r24
    24dc:	83 70       	andi	r24, 0x03	; 3
    24de:	28 2f       	mov	r18, r24
    24e0:	fe 01       	movw	r30, r28
    24e2:	e9 5b       	subi	r30, 0xB9	; 185
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	01 90       	ld	r0, Z+
    24e8:	f0 81       	ld	r31, Z
    24ea:	e0 2d       	mov	r30, r0
    24ec:	85 81       	ldd	r24, Z+5	; 0x05
    24ee:	86 95       	lsr	r24
    24f0:	86 95       	lsr	r24
    24f2:	86 95       	lsr	r24
    24f4:	87 70       	andi	r24, 0x07	; 7
    24f6:	98 2f       	mov	r25, r24
    24f8:	82 2f       	mov	r24, r18
    24fa:	69 2f       	mov	r22, r25
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a0 e2       	ldi	r26, 0x20	; 32
    2508:	b1 e4       	ldi	r27, 0x41	; 65
    250a:	8b 87       	std	Y+11, r24	; 0x0b
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	ad 87       	std	Y+13, r26	; 0x0d
    2510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a ef       	ldi	r20, 0xFA	; 250
    2520:	54 e4       	ldi	r21, 0x44	; 68
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8f 83       	std	Y+7, r24	; 0x07
    252c:	98 87       	std	Y+8, r25	; 0x08
    252e:	a9 87       	std	Y+9, r26	; 0x09
    2530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <StepperMotor_VoidStepClockWise+0x5e4>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	3f c0       	rjmp	.+126    	; 0x25d2 <StepperMotor_VoidStepClockWise+0x662>
	else if (__tmp > 65535)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	4c f5       	brge	.+82     	; 0x25be <StepperMotor_VoidStepClockWise+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	9e 85       	ldd	r25, Y+14	; 0x0e
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <StepperMotor_VoidStepClockWise+0x644>
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <StepperMotor_VoidStepClockWise+0x632>
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	69 f7       	brne	.-38     	; 0x2596 <StepperMotor_VoidStepClockWise+0x626>
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <StepperMotor_VoidStepClockWise+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <StepperMotor_VoidStepClockWise+0x66e>
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	return;
}
    25e6:	c8 5b       	subi	r28, 0xB8	; 184
    25e8:	df 4f       	sbci	r29, 0xFF	; 255
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	08 95       	ret

000025fe <StepperMotor_VoidStepAntiClockWise>:

void StepperMotor_VoidStepAntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config)
{
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	c8 54       	subi	r28, 0x48	; 72
    260c:	d0 40       	sbci	r29, 0x00	; 0
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	fe 01       	movw	r30, r28
    261a:	e9 5b       	subi	r30, 0xB9	; 185
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24
	if(Copy_pStepMotor_st_Config)
    2622:	fe 01       	movw	r30, r28
    2624:	e9 5b       	subi	r30, 0xB9	; 185
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	09 f4       	brne	.+2      	; 0x2632 <StepperMotor_VoidStepAntiClockWise+0x34>
    2630:	21 c3       	rjmp	.+1602   	; 0x2c74 <StepperMotor_VoidStepAntiClockWise+0x676>
	{
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_HIGH);
    2632:	fe 01       	movw	r30, r28
    2634:	e9 5b       	subi	r30, 0xB9	; 185
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	01 90       	ld	r0, Z+
    263a:	f0 81       	ld	r31, Z
    263c:	e0 2d       	mov	r30, r0
    263e:	86 81       	ldd	r24, Z+6	; 0x06
    2640:	83 70       	andi	r24, 0x03	; 3
    2642:	28 2f       	mov	r18, r24
    2644:	fe 01       	movw	r30, r28
    2646:	e9 5b       	subi	r30, 0xB9	; 185
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	01 90       	ld	r0, Z+
    264c:	f0 81       	ld	r31, Z
    264e:	e0 2d       	mov	r30, r0
    2650:	85 81       	ldd	r24, Z+5	; 0x05
    2652:	87 70       	andi	r24, 0x07	; 7
    2654:	98 2f       	mov	r25, r24
    2656:	82 2f       	mov	r24, r18
    2658:	69 2f       	mov	r22, r25
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    2660:	fe 01       	movw	r30, r28
    2662:	ed 5b       	subi	r30, 0xBD	; 189
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 e2       	ldi	r26, 0x20	; 32
    266c:	b1 e4       	ldi	r27, 0x41	; 65
    266e:	80 83       	st	Z, r24
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	a2 83       	std	Z+2, r26	; 0x02
    2674:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	8e 01       	movw	r16, r28
    2678:	01 5c       	subi	r16, 0xC1	; 193
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	fe 01       	movw	r30, r28
    267e:	ed 5b       	subi	r30, 0xBD	; 189
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a ef       	ldi	r20, 0xFA	; 250
    2690:	54 e4       	ldi	r21, 0x44	; 68
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	f8 01       	movw	r30, r16
    269c:	80 83       	st	Z, r24
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	a2 83       	std	Z+2, r26	; 0x02
    26a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a4:	fe 01       	movw	r30, r28
    26a6:	ff 96       	adiw	r30, 0x3f	; 63
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <StepperMotor_VoidStepAntiClockWise+0xcc>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9e af       	std	Y+62, r25	; 0x3e
    26c6:	8d af       	std	Y+61, r24	; 0x3d
    26c8:	46 c0       	rjmp	.+140    	; 0x2756 <StepperMotor_VoidStepAntiClockWise+0x158>
	else if (__tmp > 65535)
    26ca:	fe 01       	movw	r30, r28
    26cc:	ff 96       	adiw	r30, 0x3f	; 63
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	64 f5       	brge	.+88     	; 0x273e <StepperMotor_VoidStepAntiClockWise+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e6:	fe 01       	movw	r30, r28
    26e8:	ed 5b       	subi	r30, 0xBD	; 189
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9e af       	std	Y+62, r25	; 0x3e
    2712:	8d af       	std	Y+61, r24	; 0x3d
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <StepperMotor_VoidStepAntiClockWise+0x136>
    2716:	88 ec       	ldi	r24, 0xC8	; 200
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9c af       	std	Y+60, r25	; 0x3c
    271c:	8b af       	std	Y+59, r24	; 0x3b
    271e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2720:	9c ad       	ldd	r25, Y+60	; 0x3c
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <StepperMotor_VoidStepAntiClockWise+0x124>
    2726:	9c af       	std	Y+60, r25	; 0x3c
    2728:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	8d ad       	ldd	r24, Y+61	; 0x3d
    272c:	9e ad       	ldd	r25, Y+62	; 0x3e
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9e af       	std	Y+62, r25	; 0x3e
    2732:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	8d ad       	ldd	r24, Y+61	; 0x3d
    2736:	9e ad       	ldd	r25, Y+62	; 0x3e
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <StepperMotor_VoidStepAntiClockWise+0x118>
    273c:	16 c0       	rjmp	.+44     	; 0x276a <StepperMotor_VoidStepAntiClockWise+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	fe 01       	movw	r30, r28
    2740:	ff 96       	adiw	r30, 0x3f	; 63
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9e af       	std	Y+62, r25	; 0x3e
    2754:	8d af       	std	Y+61, r24	; 0x3d
    2756:	8d ad       	ldd	r24, Y+61	; 0x3d
    2758:	9e ad       	ldd	r25, Y+62	; 0x3e
    275a:	9a af       	std	Y+58, r25	; 0x3a
    275c:	89 af       	std	Y+57, r24	; 0x39
    275e:	89 ad       	ldd	r24, Y+57	; 0x39
    2760:	9a ad       	ldd	r25, Y+58	; 0x3a
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <StepperMotor_VoidStepAntiClockWise+0x164>
    2766:	9a af       	std	Y+58, r25	; 0x3a
    2768:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_OrangePort, Copy_pStepMotor_st_Config->Motor_OrangePin , DIO_PIN_LOGIC_LOW);
    276a:	fe 01       	movw	r30, r28
    276c:	e9 5b       	subi	r30, 0xB9	; 185
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	01 90       	ld	r0, Z+
    2772:	f0 81       	ld	r31, Z
    2774:	e0 2d       	mov	r30, r0
    2776:	86 81       	ldd	r24, Z+6	; 0x06
    2778:	83 70       	andi	r24, 0x03	; 3
    277a:	28 2f       	mov	r18, r24
    277c:	fe 01       	movw	r30, r28
    277e:	e9 5b       	subi	r30, 0xB9	; 185
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	01 90       	ld	r0, Z+
    2784:	f0 81       	ld	r31, Z
    2786:	e0 2d       	mov	r30, r0
    2788:	85 81       	ldd	r24, Z+5	; 0x05
    278a:	87 70       	andi	r24, 0x07	; 7
    278c:	98 2f       	mov	r25, r24
    278e:	82 2f       	mov	r24, r18
    2790:	69 2f       	mov	r22, r25
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort, Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_HIGH);
    2798:	fe 01       	movw	r30, r28
    279a:	e9 5b       	subi	r30, 0xB9	; 185
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	01 90       	ld	r0, Z+
    27a0:	f0 81       	ld	r31, Z
    27a2:	e0 2d       	mov	r30, r0
    27a4:	86 81       	ldd	r24, Z+6	; 0x06
    27a6:	86 95       	lsr	r24
    27a8:	86 95       	lsr	r24
    27aa:	83 70       	andi	r24, 0x03	; 3
    27ac:	28 2f       	mov	r18, r24
    27ae:	fe 01       	movw	r30, r28
    27b0:	e9 5b       	subi	r30, 0xB9	; 185
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	01 90       	ld	r0, Z+
    27b6:	f0 81       	ld	r31, Z
    27b8:	e0 2d       	mov	r30, r0
    27ba:	85 81       	ldd	r24, Z+5	; 0x05
    27bc:	86 95       	lsr	r24
    27be:	86 95       	lsr	r24
    27c0:	86 95       	lsr	r24
    27c2:	87 70       	andi	r24, 0x07	; 7
    27c4:	98 2f       	mov	r25, r24
    27c6:	82 2f       	mov	r24, r18
    27c8:	69 2f       	mov	r22, r25
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a0 e2       	ldi	r26, 0x20	; 32
    27d6:	b1 e4       	ldi	r27, 0x41	; 65
    27d8:	8d ab       	std	Y+53, r24	; 0x35
    27da:	9e ab       	std	Y+54, r25	; 0x36
    27dc:	af ab       	std	Y+55, r26	; 0x37
    27de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e0:	6d a9       	ldd	r22, Y+53	; 0x35
    27e2:	7e a9       	ldd	r23, Y+54	; 0x36
    27e4:	8f a9       	ldd	r24, Y+55	; 0x37
    27e6:	98 ad       	ldd	r25, Y+56	; 0x38
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4a ef       	ldi	r20, 0xFA	; 250
    27ee:	54 e4       	ldi	r21, 0x44	; 68
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	89 ab       	std	Y+49, r24	; 0x31
    27fa:	9a ab       	std	Y+50, r25	; 0x32
    27fc:	ab ab       	std	Y+51, r26	; 0x33
    27fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2800:	69 a9       	ldd	r22, Y+49	; 0x31
    2802:	7a a9       	ldd	r23, Y+50	; 0x32
    2804:	8b a9       	ldd	r24, Y+51	; 0x33
    2806:	9c a9       	ldd	r25, Y+52	; 0x34
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e8       	ldi	r20, 0x80	; 128
    280e:	5f e3       	ldi	r21, 0x3F	; 63
    2810:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2814:	88 23       	and	r24, r24
    2816:	2c f4       	brge	.+10     	; 0x2822 <StepperMotor_VoidStepAntiClockWise+0x224>
		__ticks = 1;
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	98 ab       	std	Y+48, r25	; 0x30
    281e:	8f a7       	std	Y+47, r24	; 0x2f
    2820:	3f c0       	rjmp	.+126    	; 0x28a0 <StepperMotor_VoidStepAntiClockWise+0x2a2>
	else if (__tmp > 65535)
    2822:	69 a9       	ldd	r22, Y+49	; 0x31
    2824:	7a a9       	ldd	r23, Y+50	; 0x32
    2826:	8b a9       	ldd	r24, Y+51	; 0x33
    2828:	9c a9       	ldd	r25, Y+52	; 0x34
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	3f ef       	ldi	r19, 0xFF	; 255
    282e:	4f e7       	ldi	r20, 0x7F	; 127
    2830:	57 e4       	ldi	r21, 0x47	; 71
    2832:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2836:	18 16       	cp	r1, r24
    2838:	4c f5       	brge	.+82     	; 0x288c <StepperMotor_VoidStepAntiClockWise+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283a:	6d a9       	ldd	r22, Y+53	; 0x35
    283c:	7e a9       	ldd	r23, Y+54	; 0x36
    283e:	8f a9       	ldd	r24, Y+55	; 0x37
    2840:	98 ad       	ldd	r25, Y+56	; 0x38
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e2       	ldi	r20, 0x20	; 32
    2848:	51 e4       	ldi	r21, 0x41	; 65
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	bc 01       	movw	r22, r24
    2854:	cd 01       	movw	r24, r26
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	98 ab       	std	Y+48, r25	; 0x30
    2860:	8f a7       	std	Y+47, r24	; 0x2f
    2862:	0f c0       	rjmp	.+30     	; 0x2882 <StepperMotor_VoidStepAntiClockWise+0x284>
    2864:	88 ec       	ldi	r24, 0xC8	; 200
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e a7       	std	Y+46, r25	; 0x2e
    286a:	8d a7       	std	Y+45, r24	; 0x2d
    286c:	8d a5       	ldd	r24, Y+45	; 0x2d
    286e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <StepperMotor_VoidStepAntiClockWise+0x272>
    2874:	9e a7       	std	Y+46, r25	; 0x2e
    2876:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2878:	8f a5       	ldd	r24, Y+47	; 0x2f
    287a:	98 a9       	ldd	r25, Y+48	; 0x30
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	98 ab       	std	Y+48, r25	; 0x30
    2880:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2882:	8f a5       	ldd	r24, Y+47	; 0x2f
    2884:	98 a9       	ldd	r25, Y+48	; 0x30
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	69 f7       	brne	.-38     	; 0x2864 <StepperMotor_VoidStepAntiClockWise+0x266>
    288a:	14 c0       	rjmp	.+40     	; 0x28b4 <StepperMotor_VoidStepAntiClockWise+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288c:	69 a9       	ldd	r22, Y+49	; 0x31
    288e:	7a a9       	ldd	r23, Y+50	; 0x32
    2890:	8b a9       	ldd	r24, Y+51	; 0x33
    2892:	9c a9       	ldd	r25, Y+52	; 0x34
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	98 ab       	std	Y+48, r25	; 0x30
    289e:	8f a7       	std	Y+47, r24	; 0x2f
    28a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a2:	98 a9       	ldd	r25, Y+48	; 0x30
    28a4:	9c a7       	std	Y+44, r25	; 0x2c
    28a6:	8b a7       	std	Y+43, r24	; 0x2b
    28a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <StepperMotor_VoidStepAntiClockWise+0x2ae>
    28b0:	9c a7       	std	Y+44, r25	; 0x2c
    28b2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_YellowPort , Copy_pStepMotor_st_Config->Motor_YellowPin , DIO_PIN_LOGIC_LOW);
    28b4:	fe 01       	movw	r30, r28
    28b6:	e9 5b       	subi	r30, 0xB9	; 185
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	01 90       	ld	r0, Z+
    28bc:	f0 81       	ld	r31, Z
    28be:	e0 2d       	mov	r30, r0
    28c0:	86 81       	ldd	r24, Z+6	; 0x06
    28c2:	86 95       	lsr	r24
    28c4:	86 95       	lsr	r24
    28c6:	83 70       	andi	r24, 0x03	; 3
    28c8:	28 2f       	mov	r18, r24
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 5b       	subi	r30, 0xB9	; 185
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	01 90       	ld	r0, Z+
    28d2:	f0 81       	ld	r31, Z
    28d4:	e0 2d       	mov	r30, r0
    28d6:	85 81       	ldd	r24, Z+5	; 0x05
    28d8:	86 95       	lsr	r24
    28da:	86 95       	lsr	r24
    28dc:	86 95       	lsr	r24
    28de:	87 70       	andi	r24, 0x07	; 7
    28e0:	98 2f       	mov	r25, r24
    28e2:	82 2f       	mov	r24, r18
    28e4:	69 2f       	mov	r22, r25
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_HIGH);
    28ec:	fe 01       	movw	r30, r28
    28ee:	e9 5b       	subi	r30, 0xB9	; 185
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	01 90       	ld	r0, Z+
    28f4:	f0 81       	ld	r31, Z
    28f6:	e0 2d       	mov	r30, r0
    28f8:	85 81       	ldd	r24, Z+5	; 0x05
    28fa:	82 95       	swap	r24
    28fc:	86 95       	lsr	r24
    28fe:	86 95       	lsr	r24
    2900:	83 70       	andi	r24, 0x03	; 3
    2902:	28 2f       	mov	r18, r24
    2904:	fe 01       	movw	r30, r28
    2906:	e9 5b       	subi	r30, 0xB9	; 185
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	01 90       	ld	r0, Z+
    290c:	f0 81       	ld	r31, Z
    290e:	e0 2d       	mov	r30, r0
    2910:	84 81       	ldd	r24, Z+4	; 0x04
    2912:	86 95       	lsr	r24
    2914:	86 95       	lsr	r24
    2916:	86 95       	lsr	r24
    2918:	87 70       	andi	r24, 0x07	; 7
    291a:	98 2f       	mov	r25, r24
    291c:	82 2f       	mov	r24, r18
    291e:	69 2f       	mov	r22, r25
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e2       	ldi	r26, 0x20	; 32
    292c:	b1 e4       	ldi	r27, 0x41	; 65
    292e:	8f a3       	std	Y+39, r24	; 0x27
    2930:	98 a7       	std	Y+40, r25	; 0x28
    2932:	a9 a7       	std	Y+41, r26	; 0x29
    2934:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2936:	6f a1       	ldd	r22, Y+39	; 0x27
    2938:	78 a5       	ldd	r23, Y+40	; 0x28
    293a:	89 a5       	ldd	r24, Y+41	; 0x29
    293c:	9a a5       	ldd	r25, Y+42	; 0x2a
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4a ef       	ldi	r20, 0xFA	; 250
    2944:	54 e4       	ldi	r21, 0x44	; 68
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	8b a3       	std	Y+35, r24	; 0x23
    2950:	9c a3       	std	Y+36, r25	; 0x24
    2952:	ad a3       	std	Y+37, r26	; 0x25
    2954:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2956:	6b a1       	ldd	r22, Y+35	; 0x23
    2958:	7c a1       	ldd	r23, Y+36	; 0x24
    295a:	8d a1       	ldd	r24, Y+37	; 0x25
    295c:	9e a1       	ldd	r25, Y+38	; 0x26
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e8       	ldi	r20, 0x80	; 128
    2964:	5f e3       	ldi	r21, 0x3F	; 63
    2966:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    296a:	88 23       	and	r24, r24
    296c:	2c f4       	brge	.+10     	; 0x2978 <StepperMotor_VoidStepAntiClockWise+0x37a>
		__ticks = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9a a3       	std	Y+34, r25	; 0x22
    2974:	89 a3       	std	Y+33, r24	; 0x21
    2976:	3f c0       	rjmp	.+126    	; 0x29f6 <StepperMotor_VoidStepAntiClockWise+0x3f8>
	else if (__tmp > 65535)
    2978:	6b a1       	ldd	r22, Y+35	; 0x23
    297a:	7c a1       	ldd	r23, Y+36	; 0x24
    297c:	8d a1       	ldd	r24, Y+37	; 0x25
    297e:	9e a1       	ldd	r25, Y+38	; 0x26
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	3f ef       	ldi	r19, 0xFF	; 255
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	57 e4       	ldi	r21, 0x47	; 71
    2988:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	4c f5       	brge	.+82     	; 0x29e2 <StepperMotor_VoidStepAntiClockWise+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2990:	6f a1       	ldd	r22, Y+39	; 0x27
    2992:	78 a5       	ldd	r23, Y+40	; 0x28
    2994:	89 a5       	ldd	r24, Y+41	; 0x29
    2996:	9a a5       	ldd	r25, Y+42	; 0x2a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e2       	ldi	r20, 0x20	; 32
    299e:	51 e4       	ldi	r21, 0x41	; 65
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9a a3       	std	Y+34, r25	; 0x22
    29b6:	89 a3       	std	Y+33, r24	; 0x21
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <StepperMotor_VoidStepAntiClockWise+0x3da>
    29ba:	88 ec       	ldi	r24, 0xC8	; 200
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	98 a3       	std	Y+32, r25	; 0x20
    29c0:	8f 8f       	std	Y+31, r24	; 0x1f
    29c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c4:	98 a1       	ldd	r25, Y+32	; 0x20
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <StepperMotor_VoidStepAntiClockWise+0x3c8>
    29ca:	98 a3       	std	Y+32, r25	; 0x20
    29cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	89 a1       	ldd	r24, Y+33	; 0x21
    29d0:	9a a1       	ldd	r25, Y+34	; 0x22
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	9a a3       	std	Y+34, r25	; 0x22
    29d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d8:	89 a1       	ldd	r24, Y+33	; 0x21
    29da:	9a a1       	ldd	r25, Y+34	; 0x22
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	69 f7       	brne	.-38     	; 0x29ba <StepperMotor_VoidStepAntiClockWise+0x3bc>
    29e0:	14 c0       	rjmp	.+40     	; 0x2a0a <StepperMotor_VoidStepAntiClockWise+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	6b a1       	ldd	r22, Y+35	; 0x23
    29e4:	7c a1       	ldd	r23, Y+36	; 0x24
    29e6:	8d a1       	ldd	r24, Y+37	; 0x25
    29e8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9a a3       	std	Y+34, r25	; 0x22
    29f4:	89 a3       	std	Y+33, r24	; 0x21
    29f6:	89 a1       	ldd	r24, Y+33	; 0x21
    29f8:	9a a1       	ldd	r25, Y+34	; 0x22
    29fa:	9e 8f       	std	Y+30, r25	; 0x1e
    29fc:	8d 8f       	std	Y+29, r24	; 0x1d
    29fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <StepperMotor_VoidStepAntiClockWise+0x404>
    2a06:	9e 8f       	std	Y+30, r25	; 0x1e
    2a08:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_PinkPort, Copy_pStepMotor_st_Config->Motor_PinkPin , DIO_PIN_LOGIC_LOW);
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e9 5b       	subi	r30, 0xB9	; 185
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	01 90       	ld	r0, Z+
    2a12:	f0 81       	ld	r31, Z
    2a14:	e0 2d       	mov	r30, r0
    2a16:	85 81       	ldd	r24, Z+5	; 0x05
    2a18:	82 95       	swap	r24
    2a1a:	86 95       	lsr	r24
    2a1c:	86 95       	lsr	r24
    2a1e:	83 70       	andi	r24, 0x03	; 3
    2a20:	28 2f       	mov	r18, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	e9 5b       	subi	r30, 0xB9	; 185
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	01 90       	ld	r0, Z+
    2a2a:	f0 81       	ld	r31, Z
    2a2c:	e0 2d       	mov	r30, r0
    2a2e:	84 81       	ldd	r24, Z+4	; 0x04
    2a30:	86 95       	lsr	r24
    2a32:	86 95       	lsr	r24
    2a34:	86 95       	lsr	r24
    2a36:	87 70       	andi	r24, 0x07	; 7
    2a38:	98 2f       	mov	r25, r24
    2a3a:	82 2f       	mov	r24, r18
    2a3c:	69 2f       	mov	r22, r25
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_HIGH);
    2a44:	fe 01       	movw	r30, r28
    2a46:	e9 5b       	subi	r30, 0xB9	; 185
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	01 90       	ld	r0, Z+
    2a4c:	f0 81       	ld	r31, Z
    2a4e:	e0 2d       	mov	r30, r0
    2a50:	84 81       	ldd	r24, Z+4	; 0x04
    2a52:	82 95       	swap	r24
    2a54:	86 95       	lsr	r24
    2a56:	86 95       	lsr	r24
    2a58:	83 70       	andi	r24, 0x03	; 3
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e9 5b       	subi	r30, 0xB9	; 185
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	01 90       	ld	r0, Z+
    2a64:	f0 81       	ld	r31, Z
    2a66:	e0 2d       	mov	r30, r0
    2a68:	84 81       	ldd	r24, Z+4	; 0x04
    2a6a:	87 70       	andi	r24, 0x07	; 7
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	82 2f       	mov	r24, r18
    2a70:	69 2f       	mov	r22, r25
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 e2       	ldi	r26, 0x20	; 32
    2a7e:	b1 e4       	ldi	r27, 0x41	; 65
    2a80:	89 8f       	std	Y+25, r24	; 0x19
    2a82:	9a 8f       	std	Y+26, r25	; 0x1a
    2a84:	ab 8f       	std	Y+27, r26	; 0x1b
    2a86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	54 e4       	ldi	r21, 0x44	; 68
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	8d 8b       	std	Y+21, r24	; 0x15
    2aa2:	9e 8b       	std	Y+22, r25	; 0x16
    2aa4:	af 8b       	std	Y+23, r26	; 0x17
    2aa6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2aac:	8f 89       	ldd	r24, Y+23	; 0x17
    2aae:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <StepperMotor_VoidStepAntiClockWise+0x4cc>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9c 8b       	std	Y+20, r25	; 0x14
    2ac6:	8b 8b       	std	Y+19, r24	; 0x13
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <StepperMotor_VoidStepAntiClockWise+0x54a>
	else if (__tmp > 65535)
    2aca:	6d 89       	ldd	r22, Y+21	; 0x15
    2acc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ace:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <StepperMotor_VoidStepAntiClockWise+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9c 8b       	std	Y+20, r25	; 0x14
    2b08:	8b 8b       	std	Y+19, r24	; 0x13
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <StepperMotor_VoidStepAntiClockWise+0x52c>
    2b0c:	88 ec       	ldi	r24, 0xC8	; 200
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9a 8b       	std	Y+18, r25	; 0x12
    2b12:	89 8b       	std	Y+17, r24	; 0x11
    2b14:	89 89       	ldd	r24, Y+17	; 0x11
    2b16:	9a 89       	ldd	r25, Y+18	; 0x12
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <StepperMotor_VoidStepAntiClockWise+0x51a>
    2b1c:	9a 8b       	std	Y+18, r25	; 0x12
    2b1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	8b 89       	ldd	r24, Y+19	; 0x13
    2b22:	9c 89       	ldd	r25, Y+20	; 0x14
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	9c 8b       	std	Y+20, r25	; 0x14
    2b28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <StepperMotor_VoidStepAntiClockWise+0x50e>
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <StepperMotor_VoidStepAntiClockWise+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	6d 89       	ldd	r22, Y+21	; 0x15
    2b36:	7e 89       	ldd	r23, Y+22	; 0x16
    2b38:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9c 8b       	std	Y+20, r25	; 0x14
    2b46:	8b 8b       	std	Y+19, r24	; 0x13
    2b48:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4c:	98 8b       	std	Y+16, r25	; 0x10
    2b4e:	8f 87       	std	Y+15, r24	; 0x0f
    2b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b52:	98 89       	ldd	r25, Y+16	; 0x10
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <StepperMotor_VoidStepAntiClockWise+0x556>
    2b58:	98 8b       	std	Y+16, r25	; 0x10
    2b5a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_VoidSetPinValue(Copy_pStepMotor_st_Config->Motor_BluePort, Copy_pStepMotor_st_Config->Motor_BluePin , DIO_PIN_LOGIC_LOW);
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e9 5b       	subi	r30, 0xB9	; 185
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	01 90       	ld	r0, Z+
    2b64:	f0 81       	ld	r31, Z
    2b66:	e0 2d       	mov	r30, r0
    2b68:	84 81       	ldd	r24, Z+4	; 0x04
    2b6a:	82 95       	swap	r24
    2b6c:	86 95       	lsr	r24
    2b6e:	86 95       	lsr	r24
    2b70:	83 70       	andi	r24, 0x03	; 3
    2b72:	28 2f       	mov	r18, r24
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 5b       	subi	r30, 0xB9	; 185
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	01 90       	ld	r0, Z+
    2b7c:	f0 81       	ld	r31, Z
    2b7e:	e0 2d       	mov	r30, r0
    2b80:	84 81       	ldd	r24, Z+4	; 0x04
    2b82:	87 70       	andi	r24, 0x07	; 7
    2b84:	98 2f       	mov	r25, r24
    2b86:	82 2f       	mov	r24, r18
    2b88:	69 2f       	mov	r22, r25
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	a0 e2       	ldi	r26, 0x20	; 32
    2b96:	b1 e4       	ldi	r27, 0x41	; 65
    2b98:	8b 87       	std	Y+11, r24	; 0x0b
    2b9a:	9c 87       	std	Y+12, r25	; 0x0c
    2b9c:	ad 87       	std	Y+13, r26	; 0x0d
    2b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a ef       	ldi	r20, 0xFA	; 250
    2bae:	54 e4       	ldi	r21, 0x44	; 68
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	8f 83       	std	Y+7, r24	; 0x07
    2bba:	98 87       	std	Y+8, r25	; 0x08
    2bbc:	a9 87       	std	Y+9, r26	; 0x09
    2bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e8       	ldi	r20, 0x80	; 128
    2bce:	5f e3       	ldi	r21, 0x3F	; 63
    2bd0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bd4:	88 23       	and	r24, r24
    2bd6:	2c f4       	brge	.+10     	; 0x2be2 <StepperMotor_VoidStepAntiClockWise+0x5e4>
		__ticks = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9e 83       	std	Y+6, r25	; 0x06
    2bde:	8d 83       	std	Y+5, r24	; 0x05
    2be0:	3f c0       	rjmp	.+126    	; 0x2c60 <StepperMotor_VoidStepAntiClockWise+0x662>
	else if (__tmp > 65535)
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	3f ef       	ldi	r19, 0xFF	; 255
    2bee:	4f e7       	ldi	r20, 0x7F	; 127
    2bf0:	57 e4       	ldi	r21, 0x47	; 71
    2bf2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bf6:	18 16       	cp	r1, r24
    2bf8:	4c f5       	brge	.+82     	; 0x2c4c <StepperMotor_VoidStepAntiClockWise+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e2       	ldi	r20, 0x20	; 32
    2c08:	51 e4       	ldi	r21, 0x41	; 65
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	0f c0       	rjmp	.+30     	; 0x2c42 <StepperMotor_VoidStepAntiClockWise+0x644>
    2c24:	88 ec       	ldi	r24, 0xC8	; 200
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	9c 83       	std	Y+4, r25	; 0x04
    2c2a:	8b 83       	std	Y+3, r24	; 0x03
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <StepperMotor_VoidStepAntiClockWise+0x632>
    2c34:	9c 83       	std	Y+4, r25	; 0x04
    2c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	69 f7       	brne	.-38     	; 0x2c24 <StepperMotor_VoidStepAntiClockWise+0x626>
    2c4a:	14 c0       	rjmp	.+40     	; 0x2c74 <StepperMotor_VoidStepAntiClockWise+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4e:	78 85       	ldd	r23, Y+8	; 0x08
    2c50:	89 85       	ldd	r24, Y+9	; 0x09
    2c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	8d 81       	ldd	r24, Y+5	; 0x05
    2c62:	9e 81       	ldd	r25, Y+6	; 0x06
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <StepperMotor_VoidStepAntiClockWise+0x66e>
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	return;
}
    2c74:	c8 5b       	subi	r28, 0xB8	; 184
    2c76:	df 4f       	sbci	r29, 0xFF	; 255
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <StepperMotor_VoidSteps_ClockWise>:


void StepperMotor_VoidSteps_ClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	2a 97       	sbiw	r28, 0x0a	; 10
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	4f 83       	std	Y+7, r20	; 0x07
    2ca6:	58 87       	std	Y+8, r21	; 0x08
    2ca8:	69 87       	std	Y+9, r22	; 0x09
    2caa:	7a 87       	std	Y+10, r23	; 0x0a
	u32 i = 0;
    2cac:	19 82       	std	Y+1, r1	; 0x01
    2cae:	1a 82       	std	Y+2, r1	; 0x02
    2cb0:	1b 82       	std	Y+3, r1	; 0x03
    2cb2:	1c 82       	std	Y+4, r1	; 0x04
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <StepperMotor_VoidSteps_ClockWise+0x48>
	for(; i <copy_u8Numsteps ; ++i)
		StepperMotor_VoidStepClockWise(Copy_pStepMotor_st_Config);
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <StepperMotor_VoidStepClockWise>


void StepperMotor_VoidSteps_ClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
	u32 i = 0;
	for(; i <copy_u8Numsteps ; ++i)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	ab 81       	ldd	r26, Y+3	; 0x03
    2cc4:	bc 81       	ldd	r27, Y+4	; 0x04
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	a1 1d       	adc	r26, r1
    2cca:	b1 1d       	adc	r27, r1
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	ab 83       	std	Y+3, r26	; 0x03
    2cd2:	bc 83       	std	Y+4, r27	; 0x04
    2cd4:	29 81       	ldd	r18, Y+1	; 0x01
    2cd6:	3a 81       	ldd	r19, Y+2	; 0x02
    2cd8:	4b 81       	ldd	r20, Y+3	; 0x03
    2cda:	5c 81       	ldd	r21, Y+4	; 0x04
    2cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cde:	98 85       	ldd	r25, Y+8	; 0x08
    2ce0:	a9 85       	ldd	r26, Y+9	; 0x09
    2ce2:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ce4:	28 17       	cp	r18, r24
    2ce6:	39 07       	cpc	r19, r25
    2ce8:	4a 07       	cpc	r20, r26
    2cea:	5b 07       	cpc	r21, r27
    2cec:	20 f3       	brcs	.-56     	; 0x2cb6 <StepperMotor_VoidSteps_ClockWise+0x2a>
		StepperMotor_VoidStepClockWise(Copy_pStepMotor_st_Config);
	return;
}
    2cee:	2a 96       	adiw	r28, 0x0a	; 10
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <StepperMotor_VoidSteps_AntiClockWise>:
void StepperMotor_VoidSteps_AntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	2a 97       	sbiw	r28, 0x0a	; 10
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
    2d18:	4f 83       	std	Y+7, r20	; 0x07
    2d1a:	58 87       	std	Y+8, r21	; 0x08
    2d1c:	69 87       	std	Y+9, r22	; 0x09
    2d1e:	7a 87       	std	Y+10, r23	; 0x0a
	u32 i = 0;
    2d20:	19 82       	std	Y+1, r1	; 0x01
    2d22:	1a 82       	std	Y+2, r1	; 0x02
    2d24:	1b 82       	std	Y+3, r1	; 0x03
    2d26:	1c 82       	std	Y+4, r1	; 0x04
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <StepperMotor_VoidSteps_AntiClockWise+0x48>
	for(; i <copy_u8Numsteps ; ++i)
		StepperMotor_VoidStepAntiClockWise(Copy_pStepMotor_st_Config);
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <StepperMotor_VoidStepAntiClockWise>
	return;
}
void StepperMotor_VoidSteps_AntiClockWise(const StepMotor_st* Copy_pStepMotor_st_Config , u32 copy_u8Numsteps)
{
	u32 i = 0;
	for(; i <copy_u8Numsteps ; ++i)
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
    2d36:	ab 81       	ldd	r26, Y+3	; 0x03
    2d38:	bc 81       	ldd	r27, Y+4	; 0x04
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	a1 1d       	adc	r26, r1
    2d3e:	b1 1d       	adc	r27, r1
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	ab 83       	std	Y+3, r26	; 0x03
    2d46:	bc 83       	std	Y+4, r27	; 0x04
    2d48:	29 81       	ldd	r18, Y+1	; 0x01
    2d4a:	3a 81       	ldd	r19, Y+2	; 0x02
    2d4c:	4b 81       	ldd	r20, Y+3	; 0x03
    2d4e:	5c 81       	ldd	r21, Y+4	; 0x04
    2d50:	8f 81       	ldd	r24, Y+7	; 0x07
    2d52:	98 85       	ldd	r25, Y+8	; 0x08
    2d54:	a9 85       	ldd	r26, Y+9	; 0x09
    2d56:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d58:	28 17       	cp	r18, r24
    2d5a:	39 07       	cpc	r19, r25
    2d5c:	4a 07       	cpc	r20, r26
    2d5e:	5b 07       	cpc	r21, r27
    2d60:	20 f3       	brcs	.-56     	; 0x2d2a <StepperMotor_VoidSteps_AntiClockWise+0x2a>
		StepperMotor_VoidStepAntiClockWise(Copy_pStepMotor_st_Config);
}
    2d62:	2a 96       	adiw	r28, 0x0a	; 10
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <LED_u8Init>:
#include"Led_interface.h"
#include "Led_private.h"
#include "led_config.h"

u8 LED_u8Init(const LED_t* Copy_pled_tConfig)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <LED_u8Init+0x6>
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <LED_u8Init+0x8>
    2d7c:	0f 92       	push	r0
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	9b 83       	std	Y+3, r25	; 0x03
    2d84:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    2d86:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <LED_u8Init+0x1e>
    2d90:	55 c0       	rjmp	.+170    	; 0x2e3c <LED_u8Init+0xc8>
    2d92:	ea 81       	ldd	r30, Y+2	; 0x02
    2d94:	fb 81       	ldd	r31, Y+3	; 0x03
    2d96:	80 81       	ld	r24, Z
    2d98:	8f 70       	andi	r24, 0x0F	; 15
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	84 30       	cpi	r24, 0x04	; 4
    2da0:	91 05       	cpc	r25, r1
    2da2:	0c f0       	brlt	.+2      	; 0x2da6 <LED_u8Init+0x32>
    2da4:	4b c0       	rjmp	.+150    	; 0x2e3c <LED_u8Init+0xc8>
    2da6:	ea 81       	ldd	r30, Y+2	; 0x02
    2da8:	fb 81       	ldd	r31, Y+3	; 0x03
    2daa:	80 81       	ld	r24, Z
    2dac:	82 95       	swap	r24
    2dae:	8f 70       	andi	r24, 0x0F	; 15
    2db0:	87 70       	andi	r24, 0x07	; 7
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	88 30       	cpi	r24, 0x08	; 8
    2db8:	91 05       	cpc	r25, r1
    2dba:	0c f0       	brlt	.+2      	; 0x2dbe <LED_u8Init+0x4a>
    2dbc:	3f c0       	rjmp	.+126    	; 0x2e3c <LED_u8Init+0xc8>
	{
		switch(Copy_pled_tConfig->ConType)
    2dbe:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc0:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc2:	80 81       	ld	r24, Z
    2dc4:	88 1f       	adc	r24, r24
    2dc6:	88 27       	eor	r24, r24
    2dc8:	88 1f       	adc	r24, r24
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	3d 83       	std	Y+5, r19	; 0x05
    2dd0:	2c 83       	std	Y+4, r18	; 0x04
    2dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	d1 f0       	breq	.+52     	; 0x2e0e <LED_u8Init+0x9a>
    2dda:	2c 81       	ldd	r18, Y+4	; 0x04
    2ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    2dde:	21 30       	cpi	r18, 0x01	; 1
    2de0:	31 05       	cpc	r19, r1
    2de2:	51 f5       	brne	.+84     	; 0x2e38 <LED_u8Init+0xc4>
		{
		case LED_Con_Source:
			DIO_voidPinInit(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_LOW);
    2de4:	ea 81       	ldd	r30, Y+2	; 0x02
    2de6:	fb 81       	ldd	r31, Y+3	; 0x03
    2de8:	80 81       	ld	r24, Z
    2dea:	8f 70       	andi	r24, 0x0F	; 15
    2dec:	28 2f       	mov	r18, r24
    2dee:	ea 81       	ldd	r30, Y+2	; 0x02
    2df0:	fb 81       	ldd	r31, Y+3	; 0x03
    2df2:	80 81       	ld	r24, Z
    2df4:	82 95       	swap	r24
    2df6:	8f 70       	andi	r24, 0x0F	; 15
    2df8:	87 70       	andi	r24, 0x07	; 7
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	82 2f       	mov	r24, r18
    2dfe:	69 2f       	mov	r22, r25
    2e00:	41 e0       	ldi	r20, 0x01	; 1
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
			ret = 1;
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	18 c0       	rjmp	.+48     	; 0x2e3e <LED_u8Init+0xca>
			break;
		case LED_Con_Sink:
			DIO_voidPinInit(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin , DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
    2e0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e10:	fb 81       	ldd	r31, Y+3	; 0x03
    2e12:	80 81       	ld	r24, Z
    2e14:	8f 70       	andi	r24, 0x0F	; 15
    2e16:	28 2f       	mov	r18, r24
    2e18:	ea 81       	ldd	r30, Y+2	; 0x02
    2e1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e1c:	80 81       	ld	r24, Z
    2e1e:	82 95       	swap	r24
    2e20:	8f 70       	andi	r24, 0x0F	; 15
    2e22:	87 70       	andi	r24, 0x07	; 7
    2e24:	98 2f       	mov	r25, r24
    2e26:	82 2f       	mov	r24, r18
    2e28:	69 2f       	mov	r22, r25
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	21 e0       	ldi	r18, 0x01	; 1
    2e2e:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
			ret = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <LED_u8Init+0xca>
			break;
		default: ret = 0; break;
    2e38:	19 82       	std	Y+1, r1	; 0x01
    2e3a:	01 c0       	rjmp	.+2      	; 0x2e3e <LED_u8Init+0xca>
		}
	}
	else
	{
		ret = 0;
    2e3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <LED_u8TurnOff>:
u8 LED_u8TurnOff(const LED_t* Copy_pled_tConfig)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <LED_u8TurnOff+0x6>
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <LED_u8TurnOff+0x8>
    2e58:	0f 92       	push	r0
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	9b 83       	std	Y+3, r25	; 0x03
    2e60:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    2e62:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	9b 81       	ldd	r25, Y+3	; 0x03
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <LED_u8TurnOff+0x1e>
    2e6c:	52 c0       	rjmp	.+164    	; 0x2f12 <LED_u8TurnOff+0xc2>
    2e6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e70:	fb 81       	ldd	r31, Y+3	; 0x03
    2e72:	80 81       	ld	r24, Z
    2e74:	8f 70       	andi	r24, 0x0F	; 15
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	0c f0       	brlt	.+2      	; 0x2e82 <LED_u8TurnOff+0x32>
    2e80:	48 c0       	rjmp	.+144    	; 0x2f12 <LED_u8TurnOff+0xc2>
    2e82:	ea 81       	ldd	r30, Y+2	; 0x02
    2e84:	fb 81       	ldd	r31, Y+3	; 0x03
    2e86:	80 81       	ld	r24, Z
    2e88:	82 95       	swap	r24
    2e8a:	8f 70       	andi	r24, 0x0F	; 15
    2e8c:	87 70       	andi	r24, 0x07	; 7
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	88 30       	cpi	r24, 0x08	; 8
    2e94:	91 05       	cpc	r25, r1
    2e96:	ec f5       	brge	.+122    	; 0x2f12 <LED_u8TurnOff+0xc2>
	{
		switch(Copy_pled_tConfig->ConType)
    2e98:	ea 81       	ldd	r30, Y+2	; 0x02
    2e9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 1f       	adc	r24, r24
    2ea0:	88 27       	eor	r24, r24
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	3d 83       	std	Y+5, r19	; 0x05
    2eaa:	2c 83       	std	Y+4, r18	; 0x04
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	c9 f0       	breq	.+50     	; 0x2ee6 <LED_u8TurnOff+0x96>
    2eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb8:	21 30       	cpi	r18, 0x01	; 1
    2eba:	31 05       	cpc	r19, r1
    2ebc:	41 f5       	brne	.+80     	; 0x2f0e <LED_u8TurnOff+0xbe>
		{
			case LED_Con_Source:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_LOW);
    2ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    2ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ec2:	80 81       	ld	r24, Z
    2ec4:	8f 70       	andi	r24, 0x0F	; 15
    2ec6:	28 2f       	mov	r18, r24
    2ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eca:	fb 81       	ldd	r31, Y+3	; 0x03
    2ecc:	80 81       	ld	r24, Z
    2ece:	82 95       	swap	r24
    2ed0:	8f 70       	andi	r24, 0x0F	; 15
    2ed2:	87 70       	andi	r24, 0x07	; 7
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	82 2f       	mov	r24, r18
    2ed8:	69 2f       	mov	r22, r25
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
				ret = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	17 c0       	rjmp	.+46     	; 0x2f14 <LED_u8TurnOff+0xc4>
				break;
			case LED_Con_Sink:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_HIGH);
    2ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    2eea:	80 81       	ld	r24, Z
    2eec:	8f 70       	andi	r24, 0x0F	; 15
    2eee:	28 2f       	mov	r18, r24
    2ef0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef4:	80 81       	ld	r24, Z
    2ef6:	82 95       	swap	r24
    2ef8:	8f 70       	andi	r24, 0x0F	; 15
    2efa:	87 70       	andi	r24, 0x07	; 7
    2efc:	98 2f       	mov	r25, r24
    2efe:	82 2f       	mov	r24, r18
    2f00:	69 2f       	mov	r22, r25
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
				ret = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <LED_u8TurnOff+0xc4>
				break;
			default: ret = 0; break;
    2f0e:	19 82       	std	Y+1, r1	; 0x01
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <LED_u8TurnOff+0xc4>
		}
	}
	else
	{
		ret = 0;
    2f12:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <LED_u8TurnOn>:

u8 LED_u8TurnOn(const LED_t* Copy_pled_tConfig)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <LED_u8TurnOn+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <LED_u8TurnOn+0x8>
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	9b 83       	std	Y+3, r25	; 0x03
    2f36:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    2f38:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <LED_u8TurnOn+0x1e>
    2f42:	52 c0       	rjmp	.+164    	; 0x2fe8 <LED_u8TurnOn+0xc2>
    2f44:	ea 81       	ldd	r30, Y+2	; 0x02
    2f46:	fb 81       	ldd	r31, Y+3	; 0x03
    2f48:	80 81       	ld	r24, Z
    2f4a:	8f 70       	andi	r24, 0x0F	; 15
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	84 30       	cpi	r24, 0x04	; 4
    2f52:	91 05       	cpc	r25, r1
    2f54:	0c f0       	brlt	.+2      	; 0x2f58 <LED_u8TurnOn+0x32>
    2f56:	48 c0       	rjmp	.+144    	; 0x2fe8 <LED_u8TurnOn+0xc2>
    2f58:	ea 81       	ldd	r30, Y+2	; 0x02
    2f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f5c:	80 81       	ld	r24, Z
    2f5e:	82 95       	swap	r24
    2f60:	8f 70       	andi	r24, 0x0F	; 15
    2f62:	87 70       	andi	r24, 0x07	; 7
    2f64:	88 2f       	mov	r24, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	88 30       	cpi	r24, 0x08	; 8
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	ec f5       	brge	.+122    	; 0x2fe8 <LED_u8TurnOn+0xc2>
	{
		switch(Copy_pled_tConfig->ConType)
    2f6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f70:	fb 81       	ldd	r31, Y+3	; 0x03
    2f72:	80 81       	ld	r24, Z
    2f74:	88 1f       	adc	r24, r24
    2f76:	88 27       	eor	r24, r24
    2f78:	88 1f       	adc	r24, r24
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	3d 83       	std	Y+5, r19	; 0x05
    2f80:	2c 83       	std	Y+4, r18	; 0x04
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	9d 81       	ldd	r25, Y+5	; 0x05
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	c9 f0       	breq	.+50     	; 0x2fbc <LED_u8TurnOn+0x96>
    2f8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f8e:	21 30       	cpi	r18, 0x01	; 1
    2f90:	31 05       	cpc	r19, r1
    2f92:	41 f5       	brne	.+80     	; 0x2fe4 <LED_u8TurnOn+0xbe>
		{
			case LED_Con_Source:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_HIGH);
    2f94:	ea 81       	ldd	r30, Y+2	; 0x02
    2f96:	fb 81       	ldd	r31, Y+3	; 0x03
    2f98:	80 81       	ld	r24, Z
    2f9a:	8f 70       	andi	r24, 0x0F	; 15
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	ea 81       	ldd	r30, Y+2	; 0x02
    2fa0:	fb 81       	ldd	r31, Y+3	; 0x03
    2fa2:	80 81       	ld	r24, Z
    2fa4:	82 95       	swap	r24
    2fa6:	8f 70       	andi	r24, 0x0F	; 15
    2fa8:	87 70       	andi	r24, 0x07	; 7
    2faa:	98 2f       	mov	r25, r24
    2fac:	82 2f       	mov	r24, r18
    2fae:	69 2f       	mov	r22, r25
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
				ret = 1;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	17 c0       	rjmp	.+46     	; 0x2fea <LED_u8TurnOn+0xc4>
				break;
			case LED_Con_Sink:
				DIO_VoidSetPinValue(Copy_pled_tConfig->Port,Copy_pled_tConfig->Pin, DIO_PIN_LOGIC_LOW);
    2fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8f 70       	andi	r24, 0x0F	; 15
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	ea 81       	ldd	r30, Y+2	; 0x02
    2fc8:	fb 81       	ldd	r31, Y+3	; 0x03
    2fca:	80 81       	ld	r24, Z
    2fcc:	82 95       	swap	r24
    2fce:	8f 70       	andi	r24, 0x0F	; 15
    2fd0:	87 70       	andi	r24, 0x07	; 7
    2fd2:	98 2f       	mov	r25, r24
    2fd4:	82 2f       	mov	r24, r18
    2fd6:	69 2f       	mov	r22, r25
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
				ret = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <LED_u8TurnOn+0xc4>
				break;
			default: ret = 0; break;
    2fe4:	19 82       	std	Y+1, r1	; 0x01
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <LED_u8TurnOn+0xc4>
		}
	}
	else
	{
		ret = 0;
    2fe8:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <LED_u8Toggle>:

u8 LED_u8Toggle(const LED_t* Copy_pled_tConfig)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <LED_u8Toggle+0x6>
    3002:	0f 92       	push	r0
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	9b 83       	std	Y+3, r25	; 0x03
    300a:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = 0;
    300c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pled_tConfig  && Copy_pled_tConfig->Port <= DIO_PORTD_IDX && Copy_pled_tConfig->Pin <= DIO_PIN7 )
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	9b 81       	ldd	r25, Y+3	; 0x03
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	39 f1       	breq	.+78     	; 0x3064 <LED_u8Toggle+0x68>
    3016:	ea 81       	ldd	r30, Y+2	; 0x02
    3018:	fb 81       	ldd	r31, Y+3	; 0x03
    301a:	80 81       	ld	r24, Z
    301c:	8f 70       	andi	r24, 0x0F	; 15
    301e:	88 2f       	mov	r24, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	84 30       	cpi	r24, 0x04	; 4
    3024:	91 05       	cpc	r25, r1
    3026:	f4 f4       	brge	.+60     	; 0x3064 <LED_u8Toggle+0x68>
    3028:	ea 81       	ldd	r30, Y+2	; 0x02
    302a:	fb 81       	ldd	r31, Y+3	; 0x03
    302c:	80 81       	ld	r24, Z
    302e:	82 95       	swap	r24
    3030:	8f 70       	andi	r24, 0x0F	; 15
    3032:	87 70       	andi	r24, 0x07	; 7
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	88 30       	cpi	r24, 0x08	; 8
    303a:	91 05       	cpc	r25, r1
    303c:	9c f4       	brge	.+38     	; 0x3064 <LED_u8Toggle+0x68>
	{
		DIO_VoidTogglePinValue(Copy_pled_tConfig->Port , Copy_pled_tConfig->Pin);
    303e:	ea 81       	ldd	r30, Y+2	; 0x02
    3040:	fb 81       	ldd	r31, Y+3	; 0x03
    3042:	80 81       	ld	r24, Z
    3044:	8f 70       	andi	r24, 0x0F	; 15
    3046:	28 2f       	mov	r18, r24
    3048:	ea 81       	ldd	r30, Y+2	; 0x02
    304a:	fb 81       	ldd	r31, Y+3	; 0x03
    304c:	80 81       	ld	r24, Z
    304e:	82 95       	swap	r24
    3050:	8f 70       	andi	r24, 0x0F	; 15
    3052:	87 70       	andi	r24, 0x07	; 7
    3054:	98 2f       	mov	r25, r24
    3056:	82 2f       	mov	r24, r18
    3058:	69 2f       	mov	r22, r25
    305a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <DIO_VoidTogglePinValue>
		ret = 1;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	89 83       	std	Y+1, r24	; 0x01
    3062:	01 c0       	rjmp	.+2      	; 0x3066 <LED_u8Toggle+0x6a>
	}
	else
	{
		ret = 0;
    3064:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    3066:	89 81       	ldd	r24, Y+1	; 0x01
}
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <LM35_voidInit>:




void LM35_voidInit(ISR_FuncPtr_t Copy_ISR_FuncPtr_tAdcIsR)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	00 d0       	rcall	.+0      	; 0x307a <LM35_voidInit+0x6>
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	9a 83       	std	Y+2, r25	; 0x02
    3080:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(DIO_PORTA_IDX ,LM35_ADC_CHANNEL_SELECT, DIO_PIN_DIR_INPUT);
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG
	ADC_VoidInit();
#endif
#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_VoidInit_interrupt(Copy_ISR_FuncPtr_tAdcIsR);
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ADC_VoidInit_interrupt>
#endif
}
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <LM35_voidStartConv>:



void LM35_voidStartConv(void)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	AD_CHANNEL_SELECT(LM35_ADC_CHANNEL_SELECT);
    30a6:	a7 e2       	ldi	r26, 0x27	; 39
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	e7 e2       	ldi	r30, 0x27	; 39
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	80 7e       	andi	r24, 0xE0	; 224
    30b2:	8c 93       	st	X, r24
	AD_STARTCONV();
    30b4:	a6 e2       	ldi	r26, 0x26	; 38
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e6 e2       	ldi	r30, 0x26	; 38
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	80 64       	ori	r24, 0x40	; 64
    30c0:	8c 93       	st	X, r24
}
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <LM35_voidReadDegree>:


void LM35_voidReadDegree(u16* copy_pu16Tempcelsius)
{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <LM35_voidReadDegree+0x6>
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <LM35_voidReadDegree+0x8>
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9c 83       	std	Y+4, r25	; 0x04
    30d6:	8b 83       	std	Y+3, r24	; 0x03
	u16 adcVal = 0;
    30d8:	1a 82       	std	Y+2, r1	; 0x02
    30da:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidReadResult(&adcVal);
	*copy_pu16Tempcelsius = (adcVal/LM35_AdcVal_Per_degree);
#endif

#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_voidReadResult(&adcVal);
    30dc:	ce 01       	movw	r24, r28
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <ADC_voidReadResult>
	*copy_pu16Tempcelsius = (adcVal/LM35_AdcVal_Per_degree);
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	cc 01       	movw	r24, r24
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	2f e6       	ldi	r18, 0x6F	; 111
    3100:	32 e1       	ldi	r19, 0x12	; 18
    3102:	43 e0       	ldi	r20, 0x03	; 3
    3104:	50 e4       	ldi	r21, 0x40	; 64
    3106:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	eb 81       	ldd	r30, Y+3	; 0x03
    311c:	fc 81       	ldd	r31, Y+4	; 0x04
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
#endif


}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <LDR_VoidInit>:
#include "../../MCAL/DIO/DIO_Config.h"
#include "../../MCAL/DIO/DIO_Interface.h"


void LDR_VoidInit(ISR_FuncPtr_t Copy_ISR_FuncPtr_tAdcIsR)
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	00 d0       	rcall	.+0      	; 0x3136 <LDR_VoidInit+0x6>
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinDirection(DIO_PORTA_IDX ,LDR_ADC_CHANNEL_CFG, DIO_PIN_DIR_INPUT);
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
#if ADC_INTERRUPT_CFG == ADC_INTERRUPT_DISABLE_CFG
	ADC_VoidInit();
#endif
#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_VoidInit_interrupt(Copy_ISR_FuncPtr_tAdcIsR);
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ADC_VoidInit_interrupt>
#endif
}
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <LDR_VoidStartConv>:

void LDR_VoidStartConv(void)
{
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
	AD_CHANNEL_SELECT(LDR_ADC_CHANNEL_CFG);
    3162:	a7 e2       	ldi	r26, 0x27	; 39
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e7 e2       	ldi	r30, 0x27	; 39
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	80 7e       	andi	r24, 0xE0	; 224
    316e:	8c 93       	st	X, r24
	AD_STARTCONV();
    3170:	a6 e2       	ldi	r26, 0x26	; 38
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e6 e2       	ldi	r30, 0x26	; 38
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	80 64       	ori	r24, 0x40	; 64
    317c:	8c 93       	st	X, r24
}
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <LDR_VoidGetTime>:


void LDR_VoidGetTime(u8* copy_pu8RetTime)
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	29 97       	sbiw	r28, 0x09	; 9
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	98 87       	std	Y+8, r25	; 0x08
    319a:	8f 83       	std	Y+7, r24	; 0x07
	u16 adcVal = 0;
    319c:	1e 82       	std	Y+6, r1	; 0x06
    319e:	1d 82       	std	Y+5, r1	; 0x05
	f32 ldrVolt = 0;
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	a0 e0       	ldi	r26, 0x00	; 0
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	ab 83       	std	Y+3, r26	; 0x03
    31ae:	bc 83       	std	Y+4, r27	; 0x04
	*copy_pu8RetTime = (ldrVolt >= LDR_NIGHT_VOLT) ? LDR_NIGHT_TIME : LDR_SUN_TIME;
#endif


#if ADC_INTERRUPT_ENABLE_CFG == ADC_INTERRUPT_CFG
	ADC_voidReadResult(&adcVal);
    31b0:	ce 01       	movw	r24, r28
    31b2:	05 96       	adiw	r24, 0x05	; 5
    31b4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <ADC_voidReadResult>
	ldrVolt = (adcVal/LDR_adcVal_PER_Volt);
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	cc 01       	movw	r24, r24
    31be:	a0 e0       	ldi	r26, 0x00	; 0
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	48 e4       	ldi	r20, 0x48	; 72
    31d8:	53 e4       	ldi	r21, 0x43	; 67
    31da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	ab 83       	std	Y+3, r26	; 0x03
    31e8:	bc 83       	std	Y+4, r27	; 0x04
	*copy_pu8RetTime = (ldrVolt >= LDR_NIGHT_VOLT) ? LDR_NIGHT_TIME : LDR_SUN_TIME;
    31ea:	19 86       	std	Y+9, r1	; 0x09
    31ec:	69 81       	ldd	r22, Y+1	; 0x01
    31ee:	7a 81       	ldd	r23, Y+2	; 0x02
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	23 e3       	ldi	r18, 0x33	; 51
    31f6:	33 e3       	ldi	r19, 0x33	; 51
    31f8:	43 e5       	ldi	r20, 0x53	; 83
    31fa:	50 e4       	ldi	r21, 0x40	; 64
    31fc:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    3200:	88 23       	and	r24, r24
    3202:	14 f0       	brlt	.+4      	; 0x3208 <LDR_VoidGetTime+0x84>
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	89 87       	std	Y+9, r24	; 0x09
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	99 85       	ldd	r25, Y+9	; 0x09
    320c:	89 27       	eor	r24, r25
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	ef 81       	ldd	r30, Y+7	; 0x07
    3214:	f8 85       	ldd	r31, Y+8	; 0x08
    3216:	80 83       	st	Z, r24
#endif
}
    3218:	29 96       	adiw	r28, 0x09	; 9
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <LCD_voidInit>:
static void LCD_void4Bit_SendChar(LCD_stConfig* copy_pstConfig , u8 copy_u8Char);
#endif


void LCD_voidInit(LCD_stConfig* copy_pstConfig)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <LCD_voidInit+0x6>
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	9a 83       	std	Y+2, r25	; 0x02
    3236:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pstConfig)
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	21 f0       	breq	.+8      	; 0x3248 <LCD_voidInit+0x1e>
	{
#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG
		LCD_void8Bit_Init(copy_pstConfig);
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	0e 94 4e 1a 	call	0x349c	; 0x349c <LCD_void8Bit_Init>
#endif
	}
	else {}

	return;
}
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <LCD_voidSendCommand>:


void LCD_voidSendCommand(LCD_stConfig* copy_pstConfig, u8 copy_u8Command)
{
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	00 d0       	rcall	.+0      	; 0x3258 <LCD_voidSendCommand+0x6>
    3258:	0f 92       	push	r0
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	9a 83       	std	Y+2, r25	; 0x02
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pstConfig && copy_u8Command <=255 )
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	9a 81       	ldd	r25, Y+2	; 0x02
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	29 f0       	breq	.+10     	; 0x3276 <LCD_voidSendCommand+0x24>
	{
#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG
		LCD_void8Bit_SendCommand(copy_pstConfig,copy_u8Command);
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	6b 81       	ldd	r22, Y+3	; 0x03
    3272:	0e 94 86 1c 	call	0x390c	; 0x390c <LCD_void8Bit_SendCommand>
	else
	{
		/*nothing*/
	}
	return;
}
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <LCD_voidSendChar>:




void LCD_voidSendChar(LCD_stConfig* copy_pstConfig , u8 copy_u8Char)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <LCD_voidSendChar+0x6>
    3288:	0f 92       	push	r0
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	6b 83       	std	Y+3, r22	; 0x03
	if(copy_pstConfig && copy_u8Char <=255)
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	29 f0       	breq	.+10     	; 0x32a6 <LCD_voidSendChar+0x24>
	{
#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG
		LCD_void8Bit_SendChar(copy_pstConfig,copy_u8Char);
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
    32a0:	6b 81       	ldd	r22, Y+3	; 0x03
    32a2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <LCD_void8Bit_SendChar>
	else
	{
		/*nothing*/
	}
	return;
}
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <LCD_voidSetCursor>:

void LCD_voidSetCursor(LCD_stConfig* copy_pstConfig , u8 copy_u8Row , u8 copy_u8Colum)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <LCD_voidSetCursor+0x6>
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <LCD_voidSetCursor+0x8>
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	9a 83       	std	Y+2, r25	; 0x02
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	6b 83       	std	Y+3, r22	; 0x03
    32c4:	4c 83       	std	Y+4, r20	; 0x04
	if(copy_pstConfig && copy_u8Row <=LCD_U8ROW2 && copy_u8Colum <= LCD_U8COL16 )
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	00 97       	sbiw	r24, 0x00	; 0
    32cc:	81 f0       	breq	.+32     	; 0x32ee <LCD_voidSetCursor+0x3c>
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	81 34       	cpi	r24, 0x41	; 65
    32d2:	68 f4       	brcc	.+26     	; 0x32ee <LCD_voidSetCursor+0x3c>
    32d4:	8c 81       	ldd	r24, Y+4	; 0x04
    32d6:	80 31       	cpi	r24, 0x10	; 16
    32d8:	50 f4       	brcc	.+20     	; 0x32ee <LCD_voidSetCursor+0x3c>
	{
		LCD_voidSendCommand(copy_pstConfig ,  (LCD_U8DDRAM_OFFSET | (copy_u8Row + copy_u8Colum)) );
    32da:	9b 81       	ldd	r25, Y+3	; 0x03
    32dc:	8c 81       	ldd	r24, Y+4	; 0x04
    32de:	89 0f       	add	r24, r25
    32e0:	80 68       	ori	r24, 0x80	; 128
    32e2:	28 2f       	mov	r18, r24
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	9a 81       	ldd	r25, Y+2	; 0x02
    32e8:	62 2f       	mov	r22, r18
    32ea:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
	else
	{
		/*nothing*/
	}
	return;
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <LCD_voidSendChar_Postion>:

void LCD_voidSendChar_Postion(LCD_stConfig* copy_pstConfig , u8 copy_u8Char , u8 copy_u8Row , u8 copy_u8Colum)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	00 d0       	rcall	.+0      	; 0x3302 <LCD_voidSendChar_Postion+0x6>
    3302:	00 d0       	rcall	.+0      	; 0x3304 <LCD_voidSendChar_Postion+0x8>
    3304:	0f 92       	push	r0
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	6b 83       	std	Y+3, r22	; 0x03
    3310:	4c 83       	std	Y+4, r20	; 0x04
    3312:	2d 83       	std	Y+5, r18	; 0x05
	LCD_voidSetCursor(copy_pstConfig,copy_u8Row,copy_u8Colum);
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	6c 81       	ldd	r22, Y+4	; 0x04
    331a:	4d 81       	ldd	r20, Y+5	; 0x05
    331c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_voidSetCursor>
	LCD_voidSendChar(copy_pstConfig,copy_u8Char);
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	9a 81       	ldd	r25, Y+2	; 0x02
    3324:	6b 81       	ldd	r22, Y+3	; 0x03
    3326:	0e 94 41 19 	call	0x3282	; 0x3282 <LCD_voidSendChar>
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <LCD_voidSendString>:

void LCD_voidSendString(LCD_stConfig* copy_pstConfig , u8* copy_pu8str)
{
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	00 d0       	rcall	.+0      	; 0x3340 <LCD_voidSendString+0x6>
    3340:	00 d0       	rcall	.+0      	; 0x3342 <LCD_voidSendString+0x8>
    3342:	0f 92       	push	r0
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	9b 83       	std	Y+3, r25	; 0x03
    334a:	8a 83       	std	Y+2, r24	; 0x02
    334c:	7d 83       	std	Y+5, r23	; 0x05
    334e:	6c 83       	std	Y+4, r22	; 0x04
	if(copy_pstConfig && copy_pu8str)
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	9b 81       	ldd	r25, Y+3	; 0x03
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	11 f1       	breq	.+68     	; 0x339c <LCD_voidSendString+0x62>
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	9d 81       	ldd	r25, Y+5	; 0x05
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	f1 f0       	breq	.+60     	; 0x339c <LCD_voidSendString+0x62>
	{
		u8 i = 0;
    3360:	19 82       	std	Y+1, r1	; 0x01
    3362:	11 c0       	rjmp	.+34     	; 0x3386 <LCD_voidSendString+0x4c>
		while(copy_pu8str[i])
		{
			LCD_voidSendChar(copy_pstConfig,copy_pu8str[i++]);
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	8c 81       	ldd	r24, Y+4	; 0x04
    336c:	9d 81       	ldd	r25, Y+5	; 0x05
    336e:	fc 01       	movw	r30, r24
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	20 81       	ld	r18, Z
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	62 2f       	mov	r22, r18
    3382:	0e 94 41 19 	call	0x3282	; 0x3282 <LCD_voidSendChar>
void LCD_voidSendString(LCD_stConfig* copy_pstConfig , u8* copy_pu8str)
{
	if(copy_pstConfig && copy_pu8str)
	{
		u8 i = 0;
		while(copy_pu8str[i])
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	8c 81       	ldd	r24, Y+4	; 0x04
    338e:	9d 81       	ldd	r25, Y+5	; 0x05
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	80 81       	ld	r24, Z
    3398:	88 23       	and	r24, r24
    339a:	21 f7       	brne	.-56     	; 0x3364 <LCD_voidSendString+0x2a>
	else
	{
		/*nothing*/
	}
	return;
}
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <LCD_voidSendString_Postion>:
void LCD_voidSendString_Postion(LCD_stConfig* copy_pstConfig , u8* copy_pu8str, u8 copy_u8Row , u8 copy_u8Colum)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <LCD_voidSendString_Postion+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <LCD_voidSendString_Postion+0x8>
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <LCD_voidSendString_Postion+0xa>
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	7c 83       	std	Y+4, r23	; 0x04
    33c0:	6b 83       	std	Y+3, r22	; 0x03
    33c2:	4d 83       	std	Y+5, r20	; 0x05
    33c4:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidSetCursor(copy_pstConfig,copy_u8Row,copy_u8Colum);
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ca:	6d 81       	ldd	r22, Y+5	; 0x05
    33cc:	4e 81       	ldd	r20, Y+6	; 0x06
    33ce:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_voidSetCursor>
	LCD_voidSendString(copy_pstConfig,copy_pu8str);
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	9a 81       	ldd	r25, Y+2	; 0x02
    33d6:	2b 81       	ldd	r18, Y+3	; 0x03
    33d8:	3c 81       	ldd	r19, Y+4	; 0x04
    33da:	b9 01       	movw	r22, r18
    33dc:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidSendString>
}
    33e0:	26 96       	adiw	r28, 0x06	; 6
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <LCD_voidShiftScreenLeft>:

void LCD_voidShiftScreenLeft(LCD_stConfig* copy_pstConfig)
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <LCD_voidShiftScreenLeft+0x6>
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFTALL_LEFT);
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	6c e1       	ldi	r22, 0x1C	; 28
    3406:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
}
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <LCD_voidShiftScreenRight>:
void LCD_voidShiftScreenRight(LCD_stConfig* copy_pstConfig)
{
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	00 d0       	rcall	.+0      	; 0x341a <LCD_voidShiftScreenRight+0x6>
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	9a 83       	std	Y+2, r25	; 0x02
    3420:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFTALL_RIGHT);
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	9a 81       	ldd	r25, Y+2	; 0x02
    3426:	68 e1       	ldi	r22, 0x18	; 24
    3428:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <LCD_voidShiftCursorLeft>:

void LCD_voidShiftCursorLeft(LCD_stConfig* copy_pstConfig)
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	00 d0       	rcall	.+0      	; 0x343c <LCD_voidShiftCursorLeft+0x6>
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	9a 83       	std	Y+2, r25	; 0x02
    3442:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFT_CUR_LEFT);
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	64 e1       	ldi	r22, 0x14	; 20
    344a:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_voidShiftCursorRight>:
void LCD_voidShiftCursorRight(LCD_stConfig* copy_pstConfig)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <LCD_voidShiftCursorRight+0x6>
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	9a 83       	std	Y+2, r25	; 0x02
    3464:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8SHIFT_CUR_RIGHT);
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
    346a:	60 e1       	ldi	r22, 0x10	; 16
    346c:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
}
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(LCD_stConfig* copy_pstConfig)
{
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	00 d0       	rcall	.+0      	; 0x3480 <LCD_voidClearDisplay+0x6>
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(copy_pstConfig , LCD_u8ClEAR_DISPLAY);
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	61 e0       	ldi	r22, 0x01	; 1
    348e:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
}
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <LCD_void8Bit_Init>:

#if LCD_U8_DataLen_Select == LCD_U8_8BITMODE_CONFIG

static void LCD_void8Bit_Init(LCD_stConfig* copy_pstConfig)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	ea 97       	sbiw	r28, 0x3a	; 58
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	9a af       	std	Y+58, r25	; 0x3a
    34b2:	89 af       	std	Y+57, r24	; 0x39
	/* init data port direction*/
	DIO_VoidSetPortDirection(copy_pstConfig->LCD_u8DataPort, DIO_PORT_DIR_OUTPUT);
    34b4:	e9 ad       	ldd	r30, Y+57	; 0x39
    34b6:	fa ad       	ldd	r31, Y+58	; 0x3a
    34b8:	80 81       	ld	r24, Z
    34ba:	83 70       	andi	r24, 0x03	; 3
    34bc:	6f ef       	ldi	r22, 0xFF	; 255
    34be:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <DIO_VoidSetPortDirection>
	/*set direction for rs pin*/
	DIO_VoidSetPinDirection(copy_pstConfig->LCD_u8RsPort , copy_pstConfig->LCD_u8RsPin , DIO_PIN_DIR_OUTPUT);
    34c2:	e9 ad       	ldd	r30, Y+57	; 0x39
    34c4:	fa ad       	ldd	r31, Y+58	; 0x3a
    34c6:	80 81       	ld	r24, Z
    34c8:	86 95       	lsr	r24
    34ca:	86 95       	lsr	r24
    34cc:	83 70       	andi	r24, 0x03	; 3
    34ce:	28 2f       	mov	r18, r24
    34d0:	e9 ad       	ldd	r30, Y+57	; 0x39
    34d2:	fa ad       	ldd	r31, Y+58	; 0x3a
    34d4:	81 81       	ldd	r24, Z+1	; 0x01
    34d6:	87 70       	andi	r24, 0x07	; 7
    34d8:	98 2f       	mov	r25, r24
    34da:	82 2f       	mov	r24, r18
    34dc:	69 2f       	mov	r22, r25
    34de:	41 e0       	ldi	r20, 0x01	; 1
    34e0:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
	/*set direction for rw pin*/
	DIO_VoidSetPinDirection(copy_pstConfig->LCD_u8RwPort , copy_pstConfig->LCD_u8RwPin , DIO_PIN_DIR_OUTPUT);
    34e4:	e9 ad       	ldd	r30, Y+57	; 0x39
    34e6:	fa ad       	ldd	r31, Y+58	; 0x3a
    34e8:	80 81       	ld	r24, Z
    34ea:	82 95       	swap	r24
    34ec:	8f 70       	andi	r24, 0x0F	; 15
    34ee:	83 70       	andi	r24, 0x03	; 3
    34f0:	28 2f       	mov	r18, r24
    34f2:	e9 ad       	ldd	r30, Y+57	; 0x39
    34f4:	fa ad       	ldd	r31, Y+58	; 0x3a
    34f6:	81 81       	ldd	r24, Z+1	; 0x01
    34f8:	86 95       	lsr	r24
    34fa:	86 95       	lsr	r24
    34fc:	86 95       	lsr	r24
    34fe:	87 70       	andi	r24, 0x07	; 7
    3500:	98 2f       	mov	r25, r24
    3502:	82 2f       	mov	r24, r18
    3504:	69 2f       	mov	r22, r25
    3506:	41 e0       	ldi	r20, 0x01	; 1
    3508:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
	/*set direction for Enable pin*/
	DIO_VoidSetPinDirection(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_DIR_OUTPUT);
    350c:	e9 ad       	ldd	r30, Y+57	; 0x39
    350e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3510:	80 81       	ld	r24, Z
    3512:	82 95       	swap	r24
    3514:	86 95       	lsr	r24
    3516:	86 95       	lsr	r24
    3518:	83 70       	andi	r24, 0x03	; 3
    351a:	28 2f       	mov	r18, r24
    351c:	e9 ad       	ldd	r30, Y+57	; 0x39
    351e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3520:	81 81       	ldd	r24, Z+1	; 0x01
    3522:	98 2f       	mov	r25, r24
    3524:	92 95       	swap	r25
    3526:	96 95       	lsr	r25
    3528:	96 95       	lsr	r25
    352a:	93 70       	andi	r25, 0x03	; 3
    352c:	82 81       	ldd	r24, Z+2	; 0x02
    352e:	81 70       	andi	r24, 0x01	; 1
    3530:	88 0f       	add	r24, r24
    3532:	88 0f       	add	r24, r24
    3534:	89 2b       	or	r24, r25
    3536:	98 2f       	mov	r25, r24
    3538:	82 2f       	mov	r24, r18
    353a:	69 2f       	mov	r22, r25
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_VoidSetPinDirection>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a0 ef       	ldi	r26, 0xF0	; 240
    3548:	b1 e4       	ldi	r27, 0x41	; 65
    354a:	8d ab       	std	Y+53, r24	; 0x35
    354c:	9e ab       	std	Y+54, r25	; 0x36
    354e:	af ab       	std	Y+55, r26	; 0x37
    3550:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3552:	6d a9       	ldd	r22, Y+53	; 0x35
    3554:	7e a9       	ldd	r23, Y+54	; 0x36
    3556:	8f a9       	ldd	r24, Y+55	; 0x37
    3558:	98 ad       	ldd	r25, Y+56	; 0x38
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a ef       	ldi	r20, 0xFA	; 250
    3560:	54 e4       	ldi	r21, 0x44	; 68
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	89 ab       	std	Y+49, r24	; 0x31
    356c:	9a ab       	std	Y+50, r25	; 0x32
    356e:	ab ab       	std	Y+51, r26	; 0x33
    3570:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3572:	69 a9       	ldd	r22, Y+49	; 0x31
    3574:	7a a9       	ldd	r23, Y+50	; 0x32
    3576:	8b a9       	ldd	r24, Y+51	; 0x33
    3578:	9c a9       	ldd	r25, Y+52	; 0x34
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e8       	ldi	r20, 0x80	; 128
    3580:	5f e3       	ldi	r21, 0x3F	; 63
    3582:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3586:	88 23       	and	r24, r24
    3588:	2c f4       	brge	.+10     	; 0x3594 <LCD_void8Bit_Init+0xf8>
		__ticks = 1;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	98 ab       	std	Y+48, r25	; 0x30
    3590:	8f a7       	std	Y+47, r24	; 0x2f
    3592:	3f c0       	rjmp	.+126    	; 0x3612 <LCD_void8Bit_Init+0x176>
	else if (__tmp > 65535)
    3594:	69 a9       	ldd	r22, Y+49	; 0x31
    3596:	7a a9       	ldd	r23, Y+50	; 0x32
    3598:	8b a9       	ldd	r24, Y+51	; 0x33
    359a:	9c a9       	ldd	r25, Y+52	; 0x34
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	3f ef       	ldi	r19, 0xFF	; 255
    35a0:	4f e7       	ldi	r20, 0x7F	; 127
    35a2:	57 e4       	ldi	r21, 0x47	; 71
    35a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35a8:	18 16       	cp	r1, r24
    35aa:	4c f5       	brge	.+82     	; 0x35fe <LCD_void8Bit_Init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ac:	6d a9       	ldd	r22, Y+53	; 0x35
    35ae:	7e a9       	ldd	r23, Y+54	; 0x36
    35b0:	8f a9       	ldd	r24, Y+55	; 0x37
    35b2:	98 ad       	ldd	r25, Y+56	; 0x38
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	40 e2       	ldi	r20, 0x20	; 32
    35ba:	51 e4       	ldi	r21, 0x41	; 65
    35bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	bc 01       	movw	r22, r24
    35c6:	cd 01       	movw	r24, r26
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	98 ab       	std	Y+48, r25	; 0x30
    35d2:	8f a7       	std	Y+47, r24	; 0x2f
    35d4:	0f c0       	rjmp	.+30     	; 0x35f4 <LCD_void8Bit_Init+0x158>
    35d6:	88 ec       	ldi	r24, 0xC8	; 200
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	9e a7       	std	Y+46, r25	; 0x2e
    35dc:	8d a7       	std	Y+45, r24	; 0x2d
    35de:	8d a5       	ldd	r24, Y+45	; 0x2d
    35e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <LCD_void8Bit_Init+0x146>
    35e6:	9e a7       	std	Y+46, r25	; 0x2e
    35e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ec:	98 a9       	ldd	r25, Y+48	; 0x30
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	98 ab       	std	Y+48, r25	; 0x30
    35f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35f6:	98 a9       	ldd	r25, Y+48	; 0x30
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	69 f7       	brne	.-38     	; 0x35d6 <LCD_void8Bit_Init+0x13a>
    35fc:	14 c0       	rjmp	.+40     	; 0x3626 <LCD_void8Bit_Init+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3600:	7a a9       	ldd	r23, Y+50	; 0x32
    3602:	8b a9       	ldd	r24, Y+51	; 0x33
    3604:	9c a9       	ldd	r25, Y+52	; 0x34
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	98 ab       	std	Y+48, r25	; 0x30
    3610:	8f a7       	std	Y+47, r24	; 0x2f
    3612:	8f a5       	ldd	r24, Y+47	; 0x2f
    3614:	98 a9       	ldd	r25, Y+48	; 0x30
    3616:	9c a7       	std	Y+44, r25	; 0x2c
    3618:	8b a7       	std	Y+43, r24	; 0x2b
    361a:	8b a5       	ldd	r24, Y+43	; 0x2b
    361c:	9c a5       	ldd	r25, Y+44	; 0x2c
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <LCD_void8Bit_Init+0x182>
    3622:	9c a7       	std	Y+44, r25	; 0x2c
    3624:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	// send function set command
	LCD_voidSendCommand(copy_pstConfig , LCD_u8FUNCTION_SET);
    3626:	89 ad       	ldd	r24, Y+57	; 0x39
    3628:	9a ad       	ldd	r25, Y+58	; 0x3a
    362a:	68 e3       	ldi	r22, 0x38	; 56
    362c:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	a0 e8       	ldi	r26, 0x80	; 128
    3636:	bf e3       	ldi	r27, 0x3F	; 63
    3638:	8f a3       	std	Y+39, r24	; 0x27
    363a:	98 a7       	std	Y+40, r25	; 0x28
    363c:	a9 a7       	std	Y+41, r26	; 0x29
    363e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3640:	6f a1       	ldd	r22, Y+39	; 0x27
    3642:	78 a5       	ldd	r23, Y+40	; 0x28
    3644:	89 a5       	ldd	r24, Y+41	; 0x29
    3646:	9a a5       	ldd	r25, Y+42	; 0x2a
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	4a ef       	ldi	r20, 0xFA	; 250
    364e:	54 e4       	ldi	r21, 0x44	; 68
    3650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	8b a3       	std	Y+35, r24	; 0x23
    365a:	9c a3       	std	Y+36, r25	; 0x24
    365c:	ad a3       	std	Y+37, r26	; 0x25
    365e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3660:	6b a1       	ldd	r22, Y+35	; 0x23
    3662:	7c a1       	ldd	r23, Y+36	; 0x24
    3664:	8d a1       	ldd	r24, Y+37	; 0x25
    3666:	9e a1       	ldd	r25, Y+38	; 0x26
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e8       	ldi	r20, 0x80	; 128
    366e:	5f e3       	ldi	r21, 0x3F	; 63
    3670:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3674:	88 23       	and	r24, r24
    3676:	2c f4       	brge	.+10     	; 0x3682 <LCD_void8Bit_Init+0x1e6>
		__ticks = 1;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9a a3       	std	Y+34, r25	; 0x22
    367e:	89 a3       	std	Y+33, r24	; 0x21
    3680:	3f c0       	rjmp	.+126    	; 0x3700 <LCD_void8Bit_Init+0x264>
	else if (__tmp > 65535)
    3682:	6b a1       	ldd	r22, Y+35	; 0x23
    3684:	7c a1       	ldd	r23, Y+36	; 0x24
    3686:	8d a1       	ldd	r24, Y+37	; 0x25
    3688:	9e a1       	ldd	r25, Y+38	; 0x26
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	3f ef       	ldi	r19, 0xFF	; 255
    368e:	4f e7       	ldi	r20, 0x7F	; 127
    3690:	57 e4       	ldi	r21, 0x47	; 71
    3692:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3696:	18 16       	cp	r1, r24
    3698:	4c f5       	brge	.+82     	; 0x36ec <LCD_void8Bit_Init+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369a:	6f a1       	ldd	r22, Y+39	; 0x27
    369c:	78 a5       	ldd	r23, Y+40	; 0x28
    369e:	89 a5       	ldd	r24, Y+41	; 0x29
    36a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e2       	ldi	r20, 0x20	; 32
    36a8:	51 e4       	ldi	r21, 0x41	; 65
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	9a a3       	std	Y+34, r25	; 0x22
    36c0:	89 a3       	std	Y+33, r24	; 0x21
    36c2:	0f c0       	rjmp	.+30     	; 0x36e2 <LCD_void8Bit_Init+0x246>
    36c4:	88 ec       	ldi	r24, 0xC8	; 200
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	98 a3       	std	Y+32, r25	; 0x20
    36ca:	8f 8f       	std	Y+31, r24	; 0x1f
    36cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36ce:	98 a1       	ldd	r25, Y+32	; 0x20
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	f1 f7       	brne	.-4      	; 0x36d0 <LCD_void8Bit_Init+0x234>
    36d4:	98 a3       	std	Y+32, r25	; 0x20
    36d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d8:	89 a1       	ldd	r24, Y+33	; 0x21
    36da:	9a a1       	ldd	r25, Y+34	; 0x22
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	9a a3       	std	Y+34, r25	; 0x22
    36e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e2:	89 a1       	ldd	r24, Y+33	; 0x21
    36e4:	9a a1       	ldd	r25, Y+34	; 0x22
    36e6:	00 97       	sbiw	r24, 0x00	; 0
    36e8:	69 f7       	brne	.-38     	; 0x36c4 <LCD_void8Bit_Init+0x228>
    36ea:	14 c0       	rjmp	.+40     	; 0x3714 <LCD_void8Bit_Init+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ec:	6b a1       	ldd	r22, Y+35	; 0x23
    36ee:	7c a1       	ldd	r23, Y+36	; 0x24
    36f0:	8d a1       	ldd	r24, Y+37	; 0x25
    36f2:	9e a1       	ldd	r25, Y+38	; 0x26
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	9a a3       	std	Y+34, r25	; 0x22
    36fe:	89 a3       	std	Y+33, r24	; 0x21
    3700:	89 a1       	ldd	r24, Y+33	; 0x21
    3702:	9a a1       	ldd	r25, Y+34	; 0x22
    3704:	9e 8f       	std	Y+30, r25	; 0x1e
    3706:	8d 8f       	std	Y+29, r24	; 0x1d
    3708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    370a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    370c:	01 97       	sbiw	r24, 0x01	; 1
    370e:	f1 f7       	brne	.-4      	; 0x370c <LCD_void8Bit_Init+0x270>
    3710:	9e 8f       	std	Y+30, r25	; 0x1e
    3712:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	// send diplay on off command
	LCD_voidSendCommand(copy_pstConfig , LCD_u8DISPLAY_ON_OFF_SET);
    3714:	89 ad       	ldd	r24, Y+57	; 0x39
    3716:	9a ad       	ldd	r25, Y+58	; 0x3a
    3718:	6c e0       	ldi	r22, 0x0C	; 12
    371a:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	a0 e8       	ldi	r26, 0x80	; 128
    3724:	bf e3       	ldi	r27, 0x3F	; 63
    3726:	89 8f       	std	Y+25, r24	; 0x19
    3728:	9a 8f       	std	Y+26, r25	; 0x1a
    372a:	ab 8f       	std	Y+27, r26	; 0x1b
    372c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372e:	69 8d       	ldd	r22, Y+25	; 0x19
    3730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	4a ef       	ldi	r20, 0xFA	; 250
    373c:	54 e4       	ldi	r21, 0x44	; 68
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	8d 8b       	std	Y+21, r24	; 0x15
    3748:	9e 8b       	std	Y+22, r25	; 0x16
    374a:	af 8b       	std	Y+23, r26	; 0x17
    374c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    374e:	6d 89       	ldd	r22, Y+21	; 0x15
    3750:	7e 89       	ldd	r23, Y+22	; 0x16
    3752:	8f 89       	ldd	r24, Y+23	; 0x17
    3754:	98 8d       	ldd	r25, Y+24	; 0x18
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e8       	ldi	r20, 0x80	; 128
    375c:	5f e3       	ldi	r21, 0x3F	; 63
    375e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3762:	88 23       	and	r24, r24
    3764:	2c f4       	brge	.+10     	; 0x3770 <LCD_void8Bit_Init+0x2d4>
		__ticks = 1;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	9c 8b       	std	Y+20, r25	; 0x14
    376c:	8b 8b       	std	Y+19, r24	; 0x13
    376e:	3f c0       	rjmp	.+126    	; 0x37ee <LCD_void8Bit_Init+0x352>
	else if (__tmp > 65535)
    3770:	6d 89       	ldd	r22, Y+21	; 0x15
    3772:	7e 89       	ldd	r23, Y+22	; 0x16
    3774:	8f 89       	ldd	r24, Y+23	; 0x17
    3776:	98 8d       	ldd	r25, Y+24	; 0x18
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	3f ef       	ldi	r19, 0xFF	; 255
    377c:	4f e7       	ldi	r20, 0x7F	; 127
    377e:	57 e4       	ldi	r21, 0x47	; 71
    3780:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3784:	18 16       	cp	r1, r24
    3786:	4c f5       	brge	.+82     	; 0x37da <LCD_void8Bit_Init+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3788:	69 8d       	ldd	r22, Y+25	; 0x19
    378a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    378c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    378e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e2       	ldi	r20, 0x20	; 32
    3796:	51 e4       	ldi	r21, 0x41	; 65
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	bc 01       	movw	r22, r24
    37a2:	cd 01       	movw	r24, r26
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9c 8b       	std	Y+20, r25	; 0x14
    37ae:	8b 8b       	std	Y+19, r24	; 0x13
    37b0:	0f c0       	rjmp	.+30     	; 0x37d0 <LCD_void8Bit_Init+0x334>
    37b2:	88 ec       	ldi	r24, 0xC8	; 200
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9a 8b       	std	Y+18, r25	; 0x12
    37b8:	89 8b       	std	Y+17, r24	; 0x11
    37ba:	89 89       	ldd	r24, Y+17	; 0x11
    37bc:	9a 89       	ldd	r25, Y+18	; 0x12
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	f1 f7       	brne	.-4      	; 0x37be <LCD_void8Bit_Init+0x322>
    37c2:	9a 8b       	std	Y+18, r25	; 0x12
    37c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c6:	8b 89       	ldd	r24, Y+19	; 0x13
    37c8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	9c 8b       	std	Y+20, r25	; 0x14
    37ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d0:	8b 89       	ldd	r24, Y+19	; 0x13
    37d2:	9c 89       	ldd	r25, Y+20	; 0x14
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	69 f7       	brne	.-38     	; 0x37b2 <LCD_void8Bit_Init+0x316>
    37d8:	14 c0       	rjmp	.+40     	; 0x3802 <LCD_void8Bit_Init+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37da:	6d 89       	ldd	r22, Y+21	; 0x15
    37dc:	7e 89       	ldd	r23, Y+22	; 0x16
    37de:	8f 89       	ldd	r24, Y+23	; 0x17
    37e0:	98 8d       	ldd	r25, Y+24	; 0x18
    37e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	9c 8b       	std	Y+20, r25	; 0x14
    37ec:	8b 8b       	std	Y+19, r24	; 0x13
    37ee:	8b 89       	ldd	r24, Y+19	; 0x13
    37f0:	9c 89       	ldd	r25, Y+20	; 0x14
    37f2:	98 8b       	std	Y+16, r25	; 0x10
    37f4:	8f 87       	std	Y+15, r24	; 0x0f
    37f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f8:	98 89       	ldd	r25, Y+16	; 0x10
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <LCD_void8Bit_Init+0x35e>
    37fe:	98 8b       	std	Y+16, r25	; 0x10
    3800:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	// send clear dipslay command
	LCD_voidSendCommand(copy_pstConfig , LCD_u8ClEAR_DISPLAY);
    3802:	89 ad       	ldd	r24, Y+57	; 0x39
    3804:	9a ad       	ldd	r25, Y+58	; 0x3a
    3806:	61 e0       	ldi	r22, 0x01	; 1
    3808:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	a0 e8       	ldi	r26, 0x80	; 128
    3812:	bf e3       	ldi	r27, 0x3F	; 63
    3814:	8b 87       	std	Y+11, r24	; 0x0b
    3816:	9c 87       	std	Y+12, r25	; 0x0c
    3818:	ad 87       	std	Y+13, r26	; 0x0d
    381a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381c:	6b 85       	ldd	r22, Y+11	; 0x0b
    381e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3820:	8d 85       	ldd	r24, Y+13	; 0x0d
    3822:	9e 85       	ldd	r25, Y+14	; 0x0e
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	4a ef       	ldi	r20, 0xFA	; 250
    382a:	54 e4       	ldi	r21, 0x44	; 68
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	8f 83       	std	Y+7, r24	; 0x07
    3836:	98 87       	std	Y+8, r25	; 0x08
    3838:	a9 87       	std	Y+9, r26	; 0x09
    383a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    383c:	6f 81       	ldd	r22, Y+7	; 0x07
    383e:	78 85       	ldd	r23, Y+8	; 0x08
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	9a 85       	ldd	r25, Y+10	; 0x0a
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e8       	ldi	r20, 0x80	; 128
    384a:	5f e3       	ldi	r21, 0x3F	; 63
    384c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3850:	88 23       	and	r24, r24
    3852:	2c f4       	brge	.+10     	; 0x385e <LCD_void8Bit_Init+0x3c2>
		__ticks = 1;
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9e 83       	std	Y+6, r25	; 0x06
    385a:	8d 83       	std	Y+5, r24	; 0x05
    385c:	3f c0       	rjmp	.+126    	; 0x38dc <LCD_void8Bit_Init+0x440>
	else if (__tmp > 65535)
    385e:	6f 81       	ldd	r22, Y+7	; 0x07
    3860:	78 85       	ldd	r23, Y+8	; 0x08
    3862:	89 85       	ldd	r24, Y+9	; 0x09
    3864:	9a 85       	ldd	r25, Y+10	; 0x0a
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	3f ef       	ldi	r19, 0xFF	; 255
    386a:	4f e7       	ldi	r20, 0x7F	; 127
    386c:	57 e4       	ldi	r21, 0x47	; 71
    386e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3872:	18 16       	cp	r1, r24
    3874:	4c f5       	brge	.+82     	; 0x38c8 <LCD_void8Bit_Init+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3876:	6b 85       	ldd	r22, Y+11	; 0x0b
    3878:	7c 85       	ldd	r23, Y+12	; 0x0c
    387a:	8d 85       	ldd	r24, Y+13	; 0x0d
    387c:	9e 85       	ldd	r25, Y+14	; 0x0e
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e2       	ldi	r20, 0x20	; 32
    3884:	51 e4       	ldi	r21, 0x41	; 65
    3886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9e 83       	std	Y+6, r25	; 0x06
    389c:	8d 83       	std	Y+5, r24	; 0x05
    389e:	0f c0       	rjmp	.+30     	; 0x38be <LCD_void8Bit_Init+0x422>
    38a0:	88 ec       	ldi	r24, 0xC8	; 200
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9c 83       	std	Y+4, r25	; 0x04
    38a6:	8b 83       	std	Y+3, r24	; 0x03
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	9c 81       	ldd	r25, Y+4	; 0x04
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <LCD_void8Bit_Init+0x410>
    38b0:	9c 83       	std	Y+4, r25	; 0x04
    38b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	9e 83       	std	Y+6, r25	; 0x06
    38bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38be:	8d 81       	ldd	r24, Y+5	; 0x05
    38c0:	9e 81       	ldd	r25, Y+6	; 0x06
    38c2:	00 97       	sbiw	r24, 0x00	; 0
    38c4:	69 f7       	brne	.-38     	; 0x38a0 <LCD_void8Bit_Init+0x404>
    38c6:	14 c0       	rjmp	.+40     	; 0x38f0 <LCD_void8Bit_Init+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ca:	78 85       	ldd	r23, Y+8	; 0x08
    38cc:	89 85       	ldd	r24, Y+9	; 0x09
    38ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	8d 83       	std	Y+5, r24	; 0x05
    38dc:	8d 81       	ldd	r24, Y+5	; 0x05
    38de:	9e 81       	ldd	r25, Y+6	; 0x06
    38e0:	9a 83       	std	Y+2, r25	; 0x02
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <LCD_void8Bit_Init+0x44c>
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	/* send enter mode set command*/
	LCD_voidSendCommand(copy_pstConfig , LCD_u8ENTRYMODE_SET);
    38f0:	89 ad       	ldd	r24, Y+57	; 0x39
    38f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    38f4:	66 e0       	ldi	r22, 0x06	; 6
    38f6:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
}
    38fa:	ea 96       	adiw	r28, 0x3a	; 58
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <LCD_void8Bit_SendCommand>:

static  void LCD_void8Bit_SendCommand(LCD_stConfig* copy_pstConfig , u8 copy_u8Command)
{
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	6f 97       	sbiw	r28, 0x1f	; 31
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	9e 8f       	std	Y+30, r25	; 0x1e
    3922:	8d 8f       	std	Y+29, r24	; 0x1d
    3924:	6f 8f       	std	Y+31, r22	; 0x1f
	//clear RS pin &  Clear RW pin
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RsPort , copy_pstConfig->LCD_u8RsPin , DIO_PIN_LOGIC_LOW);
    3926:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3928:	fe 8d       	ldd	r31, Y+30	; 0x1e
    392a:	80 81       	ld	r24, Z
    392c:	86 95       	lsr	r24
    392e:	86 95       	lsr	r24
    3930:	83 70       	andi	r24, 0x03	; 3
    3932:	28 2f       	mov	r18, r24
    3934:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3936:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3938:	81 81       	ldd	r24, Z+1	; 0x01
    393a:	87 70       	andi	r24, 0x07	; 7
    393c:	98 2f       	mov	r25, r24
    393e:	82 2f       	mov	r24, r18
    3940:	69 2f       	mov	r22, r25
    3942:	40 e0       	ldi	r20, 0x00	; 0
    3944:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RwPort , copy_pstConfig->LCD_u8RwPin , DIO_PIN_LOGIC_LOW);
    3948:	ed 8d       	ldd	r30, Y+29	; 0x1d
    394a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    394c:	80 81       	ld	r24, Z
    394e:	82 95       	swap	r24
    3950:	8f 70       	andi	r24, 0x0F	; 15
    3952:	83 70       	andi	r24, 0x03	; 3
    3954:	28 2f       	mov	r18, r24
    3956:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3958:	fe 8d       	ldd	r31, Y+30	; 0x1e
    395a:	81 81       	ldd	r24, Z+1	; 0x01
    395c:	86 95       	lsr	r24
    395e:	86 95       	lsr	r24
    3960:	86 95       	lsr	r24
    3962:	87 70       	andi	r24, 0x07	; 7
    3964:	98 2f       	mov	r25, r24
    3966:	82 2f       	mov	r24, r18
    3968:	69 2f       	mov	r22, r25
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>

	// write command on data pins
	DIO_VoidSetPortValue(copy_pstConfig->LCD_u8DataPort , copy_u8Command);
    3970:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3972:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3974:	80 81       	ld	r24, Z
    3976:	83 70       	andi	r24, 0x03	; 3
    3978:	6f 8d       	ldd	r22, Y+31	; 0x1f
    397a:	0e 94 15 0b 	call	0x162a	; 0x162a <DIO_VoidSetPortValue>

	// send enable signal
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_HIGH);
    397e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3980:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3982:	80 81       	ld	r24, Z
    3984:	82 95       	swap	r24
    3986:	86 95       	lsr	r24
    3988:	86 95       	lsr	r24
    398a:	83 70       	andi	r24, 0x03	; 3
    398c:	28 2f       	mov	r18, r24
    398e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3990:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3992:	81 81       	ldd	r24, Z+1	; 0x01
    3994:	98 2f       	mov	r25, r24
    3996:	92 95       	swap	r25
    3998:	96 95       	lsr	r25
    399a:	96 95       	lsr	r25
    399c:	93 70       	andi	r25, 0x03	; 3
    399e:	82 81       	ldd	r24, Z+2	; 0x02
    39a0:	81 70       	andi	r24, 0x01	; 1
    39a2:	88 0f       	add	r24, r24
    39a4:	88 0f       	add	r24, r24
    39a6:	89 2b       	or	r24, r25
    39a8:	98 2f       	mov	r25, r24
    39aa:	82 2f       	mov	r24, r18
    39ac:	69 2f       	mov	r22, r25
    39ae:	41 e0       	ldi	r20, 0x01	; 1
    39b0:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e8       	ldi	r26, 0x80	; 128
    39ba:	bf e3       	ldi	r27, 0x3F	; 63
    39bc:	89 8f       	std	Y+25, r24	; 0x19
    39be:	9a 8f       	std	Y+26, r25	; 0x1a
    39c0:	ab 8f       	std	Y+27, r26	; 0x1b
    39c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	69 8d       	ldd	r22, Y+25	; 0x19
    39c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	4a ef       	ldi	r20, 0xFA	; 250
    39d2:	54 e4       	ldi	r21, 0x44	; 68
    39d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	8d 8b       	std	Y+21, r24	; 0x15
    39de:	9e 8b       	std	Y+22, r25	; 0x16
    39e0:	af 8b       	std	Y+23, r26	; 0x17
    39e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39e4:	6d 89       	ldd	r22, Y+21	; 0x15
    39e6:	7e 89       	ldd	r23, Y+22	; 0x16
    39e8:	8f 89       	ldd	r24, Y+23	; 0x17
    39ea:	98 8d       	ldd	r25, Y+24	; 0x18
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e8       	ldi	r20, 0x80	; 128
    39f2:	5f e3       	ldi	r21, 0x3F	; 63
    39f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39f8:	88 23       	and	r24, r24
    39fa:	2c f4       	brge	.+10     	; 0x3a06 <LCD_void8Bit_SendCommand+0xfa>
		__ticks = 1;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	9c 8b       	std	Y+20, r25	; 0x14
    3a02:	8b 8b       	std	Y+19, r24	; 0x13
    3a04:	3f c0       	rjmp	.+126    	; 0x3a84 <LCD_void8Bit_SendCommand+0x178>
	else if (__tmp > 65535)
    3a06:	6d 89       	ldd	r22, Y+21	; 0x15
    3a08:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	3f ef       	ldi	r19, 0xFF	; 255
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	57 e4       	ldi	r21, 0x47	; 71
    3a16:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a1a:	18 16       	cp	r1, r24
    3a1c:	4c f5       	brge	.+82     	; 0x3a70 <LCD_void8Bit_SendCommand+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e2       	ldi	r20, 0x20	; 32
    3a2c:	51 e4       	ldi	r21, 0x41	; 65
    3a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	9c 8b       	std	Y+20, r25	; 0x14
    3a44:	8b 8b       	std	Y+19, r24	; 0x13
    3a46:	0f c0       	rjmp	.+30     	; 0x3a66 <LCD_void8Bit_SendCommand+0x15a>
    3a48:	88 ec       	ldi	r24, 0xC8	; 200
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	9a 8b       	std	Y+18, r25	; 0x12
    3a4e:	89 8b       	std	Y+17, r24	; 0x11
    3a50:	89 89       	ldd	r24, Y+17	; 0x11
    3a52:	9a 89       	ldd	r25, Y+18	; 0x12
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <LCD_void8Bit_SendCommand+0x148>
    3a58:	9a 8b       	std	Y+18, r25	; 0x12
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	9c 8b       	std	Y+20, r25	; 0x14
    3a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	8b 89       	ldd	r24, Y+19	; 0x13
    3a68:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	69 f7       	brne	.-38     	; 0x3a48 <LCD_void8Bit_SendCommand+0x13c>
    3a6e:	14 c0       	rjmp	.+40     	; 0x3a98 <LCD_void8Bit_SendCommand+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a70:	6d 89       	ldd	r22, Y+21	; 0x15
    3a72:	7e 89       	ldd	r23, Y+22	; 0x16
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	9c 8b       	std	Y+20, r25	; 0x14
    3a82:	8b 8b       	std	Y+19, r24	; 0x13
    3a84:	8b 89       	ldd	r24, Y+19	; 0x13
    3a86:	9c 89       	ldd	r25, Y+20	; 0x14
    3a88:	98 8b       	std	Y+16, r25	; 0x10
    3a8a:	8f 87       	std	Y+15, r24	; 0x0f
    3a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8e:	98 89       	ldd	r25, Y+16	; 0x10
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <LCD_void8Bit_SendCommand+0x184>
    3a94:	98 8b       	std	Y+16, r25	; 0x10
    3a96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_LOW);
    3a98:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3a9a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3a9c:	80 81       	ld	r24, Z
    3a9e:	82 95       	swap	r24
    3aa0:	86 95       	lsr	r24
    3aa2:	86 95       	lsr	r24
    3aa4:	83 70       	andi	r24, 0x03	; 3
    3aa6:	28 2f       	mov	r18, r24
    3aa8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3aaa:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3aac:	81 81       	ldd	r24, Z+1	; 0x01
    3aae:	98 2f       	mov	r25, r24
    3ab0:	92 95       	swap	r25
    3ab2:	96 95       	lsr	r25
    3ab4:	96 95       	lsr	r25
    3ab6:	93 70       	andi	r25, 0x03	; 3
    3ab8:	82 81       	ldd	r24, Z+2	; 0x02
    3aba:	81 70       	andi	r24, 0x01	; 1
    3abc:	88 0f       	add	r24, r24
    3abe:	88 0f       	add	r24, r24
    3ac0:	89 2b       	or	r24, r25
    3ac2:	98 2f       	mov	r25, r24
    3ac4:	82 2f       	mov	r24, r18
    3ac6:	69 2f       	mov	r22, r25
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	a0 e2       	ldi	r26, 0x20	; 32
    3ad4:	b1 e4       	ldi	r27, 0x41	; 65
    3ad6:	8b 87       	std	Y+11, r24	; 0x0b
    3ad8:	9c 87       	std	Y+12, r25	; 0x0c
    3ada:	ad 87       	std	Y+13, r26	; 0x0d
    3adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4a ef       	ldi	r20, 0xFA	; 250
    3aec:	54 e4       	ldi	r21, 0x44	; 68
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	8f 83       	std	Y+7, r24	; 0x07
    3af8:	98 87       	std	Y+8, r25	; 0x08
    3afa:	a9 87       	std	Y+9, r26	; 0x09
    3afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3afe:	6f 81       	ldd	r22, Y+7	; 0x07
    3b00:	78 85       	ldd	r23, Y+8	; 0x08
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e8       	ldi	r20, 0x80	; 128
    3b0c:	5f e3       	ldi	r21, 0x3F	; 63
    3b0e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b12:	88 23       	and	r24, r24
    3b14:	2c f4       	brge	.+10     	; 0x3b20 <LCD_void8Bit_SendCommand+0x214>
		__ticks = 1;
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	9e 83       	std	Y+6, r25	; 0x06
    3b1c:	8d 83       	std	Y+5, r24	; 0x05
    3b1e:	3f c0       	rjmp	.+126    	; 0x3b9e <LCD_void8Bit_SendCommand+0x292>
	else if (__tmp > 65535)
    3b20:	6f 81       	ldd	r22, Y+7	; 0x07
    3b22:	78 85       	ldd	r23, Y+8	; 0x08
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	3f ef       	ldi	r19, 0xFF	; 255
    3b2c:	4f e7       	ldi	r20, 0x7F	; 127
    3b2e:	57 e4       	ldi	r21, 0x47	; 71
    3b30:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b34:	18 16       	cp	r1, r24
    3b36:	4c f5       	brge	.+82     	; 0x3b8a <LCD_void8Bit_SendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e2       	ldi	r20, 0x20	; 32
    3b46:	51 e4       	ldi	r21, 0x41	; 65
    3b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	bc 01       	movw	r22, r24
    3b52:	cd 01       	movw	r24, r26
    3b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	8d 83       	std	Y+5, r24	; 0x05
    3b60:	0f c0       	rjmp	.+30     	; 0x3b80 <LCD_void8Bit_SendCommand+0x274>
    3b62:	88 ec       	ldi	r24, 0xC8	; 200
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03
    3b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <LCD_void8Bit_SendCommand+0x262>
    3b72:	9c 83       	std	Y+4, r25	; 0x04
    3b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b76:	8d 81       	ldd	r24, Y+5	; 0x05
    3b78:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	9e 83       	std	Y+6, r25	; 0x06
    3b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b80:	8d 81       	ldd	r24, Y+5	; 0x05
    3b82:	9e 81       	ldd	r25, Y+6	; 0x06
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	69 f7       	brne	.-38     	; 0x3b62 <LCD_void8Bit_SendCommand+0x256>
    3b88:	14 c0       	rjmp	.+40     	; 0x3bb2 <LCD_void8Bit_SendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8c:	78 85       	ldd	r23, Y+8	; 0x08
    3b8e:	89 85       	ldd	r24, Y+9	; 0x09
    3b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <LCD_void8Bit_SendCommand+0x29e>
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3bb2:	6f 96       	adiw	r28, 0x1f	; 31
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <LCD_void8Bit_SendChar>:

static void LCD_void8Bit_SendChar(LCD_stConfig* copy_pstConfig , u8 copy_u8Char)
{
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    3bcc:	61 97       	sbiw	r28, 0x11	; 17
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	98 8b       	std	Y+16, r25	; 0x10
    3bda:	8f 87       	std	Y+15, r24	; 0x0f
    3bdc:	69 8b       	std	Y+17, r22	; 0x11
	// set RS pin &  Clear RW pin
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RsPort , copy_pstConfig->LCD_u8RsPin , DIO_PIN_LOGIC_HIGH);
    3bde:	ef 85       	ldd	r30, Y+15	; 0x0f
    3be0:	f8 89       	ldd	r31, Y+16	; 0x10
    3be2:	80 81       	ld	r24, Z
    3be4:	86 95       	lsr	r24
    3be6:	86 95       	lsr	r24
    3be8:	83 70       	andi	r24, 0x03	; 3
    3bea:	28 2f       	mov	r18, r24
    3bec:	ef 85       	ldd	r30, Y+15	; 0x0f
    3bee:	f8 89       	ldd	r31, Y+16	; 0x10
    3bf0:	81 81       	ldd	r24, Z+1	; 0x01
    3bf2:	87 70       	andi	r24, 0x07	; 7
    3bf4:	98 2f       	mov	r25, r24
    3bf6:	82 2f       	mov	r24, r18
    3bf8:	69 2f       	mov	r22, r25
    3bfa:	41 e0       	ldi	r20, 0x01	; 1
    3bfc:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8RwPort , copy_pstConfig->LCD_u8RwPin , DIO_PIN_LOGIC_LOW);
    3c00:	ef 85       	ldd	r30, Y+15	; 0x0f
    3c02:	f8 89       	ldd	r31, Y+16	; 0x10
    3c04:	80 81       	ld	r24, Z
    3c06:	82 95       	swap	r24
    3c08:	8f 70       	andi	r24, 0x0F	; 15
    3c0a:	83 70       	andi	r24, 0x03	; 3
    3c0c:	28 2f       	mov	r18, r24
    3c0e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3c10:	f8 89       	ldd	r31, Y+16	; 0x10
    3c12:	81 81       	ldd	r24, Z+1	; 0x01
    3c14:	86 95       	lsr	r24
    3c16:	86 95       	lsr	r24
    3c18:	86 95       	lsr	r24
    3c1a:	87 70       	andi	r24, 0x07	; 7
    3c1c:	98 2f       	mov	r25, r24
    3c1e:	82 2f       	mov	r24, r18
    3c20:	69 2f       	mov	r22, r25
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>

	DIO_VoidSetPortValue(copy_pstConfig->LCD_u8DataPort , copy_u8Char);
    3c28:	ef 85       	ldd	r30, Y+15	; 0x0f
    3c2a:	f8 89       	ldd	r31, Y+16	; 0x10
    3c2c:	80 81       	ld	r24, Z
    3c2e:	83 70       	andi	r24, 0x03	; 3
    3c30:	69 89       	ldd	r22, Y+17	; 0x11
    3c32:	0e 94 15 0b 	call	0x162a	; 0x162a <DIO_VoidSetPortValue>

	// send enable signal
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_HIGH);
    3c36:	ef 85       	ldd	r30, Y+15	; 0x0f
    3c38:	f8 89       	ldd	r31, Y+16	; 0x10
    3c3a:	80 81       	ld	r24, Z
    3c3c:	82 95       	swap	r24
    3c3e:	86 95       	lsr	r24
    3c40:	86 95       	lsr	r24
    3c42:	83 70       	andi	r24, 0x03	; 3
    3c44:	28 2f       	mov	r18, r24
    3c46:	ef 85       	ldd	r30, Y+15	; 0x0f
    3c48:	f8 89       	ldd	r31, Y+16	; 0x10
    3c4a:	81 81       	ldd	r24, Z+1	; 0x01
    3c4c:	98 2f       	mov	r25, r24
    3c4e:	92 95       	swap	r25
    3c50:	96 95       	lsr	r25
    3c52:	96 95       	lsr	r25
    3c54:	93 70       	andi	r25, 0x03	; 3
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	81 70       	andi	r24, 0x01	; 1
    3c5a:	88 0f       	add	r24, r24
    3c5c:	88 0f       	add	r24, r24
    3c5e:	89 2b       	or	r24, r25
    3c60:	98 2f       	mov	r25, r24
    3c62:	82 2f       	mov	r24, r18
    3c64:	69 2f       	mov	r22, r25
    3c66:	41 e0       	ldi	r20, 0x01	; 1
    3c68:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	a0 e8       	ldi	r26, 0x80	; 128
    3c72:	bf e3       	ldi	r27, 0x3F	; 63
    3c74:	8b 87       	std	Y+11, r24	; 0x0b
    3c76:	9c 87       	std	Y+12, r25	; 0x0c
    3c78:	ad 87       	std	Y+13, r26	; 0x0d
    3c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c84:	20 e0       	ldi	r18, 0x00	; 0
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	4a ef       	ldi	r20, 0xFA	; 250
    3c8a:	54 e4       	ldi	r21, 0x44	; 68
    3c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	8f 83       	std	Y+7, r24	; 0x07
    3c96:	98 87       	std	Y+8, r25	; 0x08
    3c98:	a9 87       	std	Y+9, r26	; 0x09
    3c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ca0:	89 85       	ldd	r24, Y+9	; 0x09
    3ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e8       	ldi	r20, 0x80	; 128
    3caa:	5f e3       	ldi	r21, 0x3F	; 63
    3cac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cb0:	88 23       	and	r24, r24
    3cb2:	2c f4       	brge	.+10     	; 0x3cbe <LCD_void8Bit_SendChar+0xfa>
		__ticks = 1;
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	9e 83       	std	Y+6, r25	; 0x06
    3cba:	8d 83       	std	Y+5, r24	; 0x05
    3cbc:	3f c0       	rjmp	.+126    	; 0x3d3c <LCD_void8Bit_SendChar+0x178>
	else if (__tmp > 65535)
    3cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc0:	78 85       	ldd	r23, Y+8	; 0x08
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	3f ef       	ldi	r19, 0xFF	; 255
    3cca:	4f e7       	ldi	r20, 0x7F	; 127
    3ccc:	57 e4       	ldi	r21, 0x47	; 71
    3cce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3cd2:	18 16       	cp	r1, r24
    3cd4:	4c f5       	brge	.+82     	; 0x3d28 <LCD_void8Bit_SendChar+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e2       	ldi	r20, 0x20	; 32
    3ce4:	51 e4       	ldi	r21, 0x41	; 65
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	9e 83       	std	Y+6, r25	; 0x06
    3cfc:	8d 83       	std	Y+5, r24	; 0x05
    3cfe:	0f c0       	rjmp	.+30     	; 0x3d1e <LCD_void8Bit_SendChar+0x15a>
    3d00:	88 ec       	ldi	r24, 0xC8	; 200
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	9c 83       	std	Y+4, r25	; 0x04
    3d06:	8b 83       	std	Y+3, r24	; 0x03
    3d08:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	f1 f7       	brne	.-4      	; 0x3d0c <LCD_void8Bit_SendChar+0x148>
    3d10:	9c 83       	std	Y+4, r25	; 0x04
    3d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	9e 83       	std	Y+6, r25	; 0x06
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	9e 81       	ldd	r25, Y+6	; 0x06
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	69 f7       	brne	.-38     	; 0x3d00 <LCD_void8Bit_SendChar+0x13c>
    3d26:	14 c0       	rjmp	.+40     	; 0x3d50 <LCD_void8Bit_SendChar+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d28:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2a:	78 85       	ldd	r23, Y+8	; 0x08
    3d2c:	89 85       	ldd	r24, Y+9	; 0x09
    3d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	9e 83       	std	Y+6, r25	; 0x06
    3d3a:	8d 83       	std	Y+5, r24	; 0x05
    3d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d40:	9a 83       	std	Y+2, r25	; 0x02
    3d42:	89 83       	std	Y+1, r24	; 0x01
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	9a 81       	ldd	r25, Y+2	; 0x02
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	f1 f7       	brne	.-4      	; 0x3d48 <LCD_void8Bit_SendChar+0x184>
    3d4c:	9a 83       	std	Y+2, r25	; 0x02
    3d4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinValue(copy_pstConfig->LCD_u8EnablePort , copy_pstConfig->LCD_u8EnablePin , DIO_PIN_LOGIC_LOW);
    3d50:	ef 85       	ldd	r30, Y+15	; 0x0f
    3d52:	f8 89       	ldd	r31, Y+16	; 0x10
    3d54:	80 81       	ld	r24, Z
    3d56:	82 95       	swap	r24
    3d58:	86 95       	lsr	r24
    3d5a:	86 95       	lsr	r24
    3d5c:	83 70       	andi	r24, 0x03	; 3
    3d5e:	28 2f       	mov	r18, r24
    3d60:	ef 85       	ldd	r30, Y+15	; 0x0f
    3d62:	f8 89       	ldd	r31, Y+16	; 0x10
    3d64:	81 81       	ldd	r24, Z+1	; 0x01
    3d66:	98 2f       	mov	r25, r24
    3d68:	92 95       	swap	r25
    3d6a:	96 95       	lsr	r25
    3d6c:	96 95       	lsr	r25
    3d6e:	93 70       	andi	r25, 0x03	; 3
    3d70:	82 81       	ldd	r24, Z+2	; 0x02
    3d72:	81 70       	andi	r24, 0x01	; 1
    3d74:	88 0f       	add	r24, r24
    3d76:	88 0f       	add	r24, r24
    3d78:	89 2b       	or	r24, r25
    3d7a:	98 2f       	mov	r25, r24
    3d7c:	82 2f       	mov	r24, r18
    3d7e:	69 2f       	mov	r22, r25
    3d80:	40 e0       	ldi	r20, 0x00	; 0
    3d82:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
	return;
}
    3d86:	61 96       	adiw	r28, 0x11	; 17
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <LCD_voidSendU32Digit>:




void LCD_voidSendU32Digit(LCD_stConfig* copy_pstConfig , u32 num)
{
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	61 97       	sbiw	r28, 0x11	; 17
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	9d 87       	std	Y+13, r25	; 0x0d
    3dae:	8c 87       	std	Y+12, r24	; 0x0c
    3db0:	4e 87       	std	Y+14, r20	; 0x0e
    3db2:	5f 87       	std	Y+15, r21	; 0x0f
    3db4:	68 8b       	std	Y+16, r22	; 0x10
    3db6:	79 8b       	std	Y+17, r23	; 0x11
	// 32767
	u8 numStr[11];
	snprintf(numStr , 11 , "%lu" , num);
    3db8:	8d b7       	in	r24, 0x3d	; 61
    3dba:	9e b7       	in	r25, 0x3e	; 62
    3dbc:	0a 97       	sbiw	r24, 0x0a	; 10
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	9e bf       	out	0x3e, r25	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	8d bf       	out	0x3d, r24	; 61
    3dc8:	ed b7       	in	r30, 0x3d	; 61
    3dca:	fe b7       	in	r31, 0x3e	; 62
    3dcc:	31 96       	adiw	r30, 0x01	; 1
    3dce:	ce 01       	movw	r24, r28
    3dd0:	01 96       	adiw	r24, 0x01	; 1
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	80 83       	st	Z, r24
    3dd6:	8b e0       	ldi	r24, 0x0B	; 11
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	93 83       	std	Z+3, r25	; 0x03
    3ddc:	82 83       	std	Z+2, r24	; 0x02
    3dde:	80 e6       	ldi	r24, 0x60	; 96
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	95 83       	std	Z+5, r25	; 0x05
    3de4:	84 83       	std	Z+4, r24	; 0x04
    3de6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3de8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dea:	a8 89       	ldd	r26, Y+16	; 0x10
    3dec:	b9 89       	ldd	r27, Y+17	; 0x11
    3dee:	86 83       	std	Z+6, r24	; 0x06
    3df0:	97 83       	std	Z+7, r25	; 0x07
    3df2:	a0 87       	std	Z+8, r26	; 0x08
    3df4:	b1 87       	std	Z+9, r27	; 0x09
    3df6:	0e 94 a6 2a 	call	0x554c	; 0x554c <snprintf>
    3dfa:	8d b7       	in	r24, 0x3d	; 61
    3dfc:	9e b7       	in	r25, 0x3e	; 62
    3dfe:	0a 96       	adiw	r24, 0x0a	; 10
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	9e bf       	out	0x3e, r25	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(copy_pstConfig , numStr );
    3e0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e0e:	9e 01       	movw	r18, r28
    3e10:	2f 5f       	subi	r18, 0xFF	; 255
    3e12:	3f 4f       	sbci	r19, 0xFF	; 255
    3e14:	b9 01       	movw	r22, r18
    3e16:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidSendString>
	return;
}
    3e1a:	61 96       	adiw	r28, 0x11	; 17
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	de bf       	out	0x3e, r29	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	cf 91       	pop	r28
    3e28:	df 91       	pop	r29
    3e2a:	08 95       	ret

00003e2c <LCD_voidSendU32Digit_Postion>:

void LCD_voidSendU32Digit_Postion(LCD_stConfig* copy_pstConfig , u32 num, u8 copy_u8Row , u8 copy_u8Colum)
{
    3e2c:	0f 93       	push	r16
    3e2e:	df 93       	push	r29
    3e30:	cf 93       	push	r28
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    3e36:	66 97       	sbiw	r28, 0x16	; 22
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	98 8b       	std	Y+16, r25	; 0x10
    3e44:	8f 87       	std	Y+15, r24	; 0x0f
    3e46:	49 8b       	std	Y+17, r20	; 0x11
    3e48:	5a 8b       	std	Y+18, r21	; 0x12
    3e4a:	6b 8b       	std	Y+19, r22	; 0x13
    3e4c:	7c 8b       	std	Y+20, r23	; 0x14
    3e4e:	2d 8b       	std	Y+21, r18	; 0x15
    3e50:	0e 8b       	std	Y+22, r16	; 0x16
	LCD_voidSendCommand(copy_pstConfig ,  (LCD_U8DDRAM_OFFSET | (copy_u8Row + copy_u8Colum)) );
    3e52:	9d 89       	ldd	r25, Y+21	; 0x15
    3e54:	8e 89       	ldd	r24, Y+22	; 0x16
    3e56:	89 0f       	add	r24, r25
    3e58:	80 68       	ori	r24, 0x80	; 128
    3e5a:	28 2f       	mov	r18, r24
    3e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e5e:	98 89       	ldd	r25, Y+16	; 0x10
    3e60:	62 2f       	mov	r22, r18
    3e62:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	ac e0       	ldi	r26, 0x0C	; 12
    3e6c:	b2 e4       	ldi	r27, 0x42	; 66
    3e6e:	8b 87       	std	Y+11, r24	; 0x0b
    3e70:	9c 87       	std	Y+12, r25	; 0x0c
    3e72:	ad 87       	std	Y+13, r26	; 0x0d
    3e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	4a ef       	ldi	r20, 0xFA	; 250
    3e84:	54 e4       	ldi	r21, 0x44	; 68
    3e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	8f 83       	std	Y+7, r24	; 0x07
    3e90:	98 87       	std	Y+8, r25	; 0x08
    3e92:	a9 87       	std	Y+9, r26	; 0x09
    3e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e96:	6f 81       	ldd	r22, Y+7	; 0x07
    3e98:	78 85       	ldd	r23, Y+8	; 0x08
    3e9a:	89 85       	ldd	r24, Y+9	; 0x09
    3e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e8       	ldi	r20, 0x80	; 128
    3ea4:	5f e3       	ldi	r21, 0x3F	; 63
    3ea6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3eaa:	88 23       	and	r24, r24
    3eac:	2c f4       	brge	.+10     	; 0x3eb8 <LCD_voidSendU32Digit_Postion+0x8c>
		__ticks = 1;
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
    3eb6:	3f c0       	rjmp	.+126    	; 0x3f36 <LCD_voidSendU32Digit_Postion+0x10a>
	else if (__tmp > 65535)
    3eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eba:	78 85       	ldd	r23, Y+8	; 0x08
    3ebc:	89 85       	ldd	r24, Y+9	; 0x09
    3ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	3f ef       	ldi	r19, 0xFF	; 255
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	57 e4       	ldi	r21, 0x47	; 71
    3ec8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ecc:	18 16       	cp	r1, r24
    3ece:	4c f5       	brge	.+82     	; 0x3f22 <LCD_voidSendU32Digit_Postion+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	bc 01       	movw	r22, r24
    3eea:	cd 01       	movw	r24, r26
    3eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	0f c0       	rjmp	.+30     	; 0x3f18 <LCD_voidSendU32Digit_Postion+0xec>
    3efa:	88 ec       	ldi	r24, 0xC8	; 200
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	9c 83       	std	Y+4, r25	; 0x04
    3f00:	8b 83       	std	Y+3, r24	; 0x03
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	9c 81       	ldd	r25, Y+4	; 0x04
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <LCD_voidSendU32Digit_Postion+0xda>
    3f0a:	9c 83       	std	Y+4, r25	; 0x04
    3f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	9e 81       	ldd	r25, Y+6	; 0x06
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f18:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	69 f7       	brne	.-38     	; 0x3efa <LCD_voidSendU32Digit_Postion+0xce>
    3f20:	14 c0       	rjmp	.+40     	; 0x3f4a <LCD_voidSendU32Digit_Postion+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f22:	6f 81       	ldd	r22, Y+7	; 0x07
    3f24:	78 85       	ldd	r23, Y+8	; 0x08
    3f26:	89 85       	ldd	r24, Y+9	; 0x09
    3f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3a:	9a 83       	std	Y+2, r25	; 0x02
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	9a 81       	ldd	r25, Y+2	; 0x02
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <LCD_voidSendU32Digit_Postion+0x116>
    3f46:	9a 83       	std	Y+2, r25	; 0x02
    3f48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_voidSendU32Digit(copy_pstConfig,num);
    3f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f4c:	98 89       	ldd	r25, Y+16	; 0x10
    3f4e:	29 89       	ldd	r18, Y+17	; 0x11
    3f50:	3a 89       	ldd	r19, Y+18	; 0x12
    3f52:	4b 89       	ldd	r20, Y+19	; 0x13
    3f54:	5c 89       	ldd	r21, Y+20	; 0x14
    3f56:	ba 01       	movw	r22, r20
    3f58:	a9 01       	movw	r20, r18
    3f5a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_voidSendU32Digit>
	return;
}
    3f5e:	66 96       	adiw	r28, 0x16	; 22
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	0f 91       	pop	r16
    3f70:	08 95       	ret

00003f72 <LCD_voidSendf32Digit>:

void LCD_voidSendf32Digit(LCD_stConfig* copy_pstConfig , f32 num)
{
    3f72:	0f 93       	push	r16
    3f74:	1f 93       	push	r17
    3f76:	df 93       	push	r29
    3f78:	cf 93       	push	r28
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	68 97       	sbiw	r28, 0x18	; 24
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	f8 94       	cli
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	cd bf       	out	0x3d, r28	; 61
    3f8a:	9c 8b       	std	Y+20, r25	; 0x14
    3f8c:	8b 8b       	std	Y+19, r24	; 0x13
    3f8e:	4d 8b       	std	Y+21, r20	; 0x15
    3f90:	5e 8b       	std	Y+22, r21	; 0x16
    3f92:	6f 8b       	std	Y+23, r22	; 0x17
    3f94:	78 8f       	std	Y+24, r23	; 0x18
	u8 dot_point_location = 0;
    3f96:	1f 82       	std	Y+7, r1	; 0x07
	u8 numStr[11] = {0};
    3f98:	8b e0       	ldi	r24, 0x0B	; 11
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	38 96       	adiw	r30, 0x08	; 8
    3f9e:	df 01       	movw	r26, r30
    3fa0:	98 2f       	mov	r25, r24
    3fa2:	1d 92       	st	X+, r1
    3fa4:	9a 95       	dec	r25
    3fa6:	e9 f7       	brne	.-6      	; 0x3fa2 <LCD_voidSendf32Digit+0x30>

	s32 l_intPart = (s32)num;
    3fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    3faa:	7e 89       	ldd	r23, Y+22	; 0x16
    3fac:	8f 89       	ldd	r24, Y+23	; 0x17
    3fae:	98 8d       	ldd	r25, Y+24	; 0x18
    3fb0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	8d 83       	std	Y+5, r24	; 0x05
	f32 l_floatPart =  num - l_intPart;
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc0:	aa 27       	eor	r26, r26
    3fc2:	97 fd       	sbrc	r25, 7
    3fc4:	a0 95       	com	r26
    3fc6:	ba 2f       	mov	r27, r26
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3fd0:	9b 01       	movw	r18, r22
    3fd2:	ac 01       	movw	r20, r24
    3fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fda:	98 8d       	ldd	r25, Y+24	; 0x18
    3fdc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	89 83       	std	Y+1, r24	; 0x01
    3fe6:	9a 83       	std	Y+2, r25	; 0x02
    3fe8:	ab 83       	std	Y+3, r26	; 0x03
    3fea:	bc 83       	std	Y+4, r27	; 0x04

	snprintf(numStr , 6 , "%d" , l_intPart);
    3fec:	ad b7       	in	r26, 0x3d	; 61
    3fee:	be b7       	in	r27, 0x3e	; 62
    3ff0:	18 97       	sbiw	r26, 0x08	; 8
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	f8 94       	cli
    3ff6:	be bf       	out	0x3e, r27	; 62
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	ad bf       	out	0x3d, r26	; 61
    3ffc:	ed b7       	in	r30, 0x3d	; 61
    3ffe:	fe b7       	in	r31, 0x3e	; 62
    4000:	31 96       	adiw	r30, 0x01	; 1
    4002:	ce 01       	movw	r24, r28
    4004:	08 96       	adiw	r24, 0x08	; 8
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	80 83       	st	Z, r24
    400a:	86 e0       	ldi	r24, 0x06	; 6
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	93 83       	std	Z+3, r25	; 0x03
    4010:	82 83       	std	Z+2, r24	; 0x02
    4012:	84 e6       	ldi	r24, 0x64	; 100
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	95 83       	std	Z+5, r25	; 0x05
    4018:	84 83       	std	Z+4, r24	; 0x04
    401a:	8d 81       	ldd	r24, Y+5	; 0x05
    401c:	9e 81       	ldd	r25, Y+6	; 0x06
    401e:	97 83       	std	Z+7, r25	; 0x07
    4020:	86 83       	std	Z+6, r24	; 0x06
    4022:	0e 94 a6 2a 	call	0x554c	; 0x554c <snprintf>
    4026:	8d b7       	in	r24, 0x3d	; 61
    4028:	9e b7       	in	r25, 0x3e	; 62
    402a:	08 96       	adiw	r24, 0x08	; 8
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	9e bf       	out	0x3e, r25	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	8d bf       	out	0x3d, r24	; 61
    4036:	03 c0       	rjmp	.+6      	; 0x403e <LCD_voidSendf32Digit+0xcc>

	while(numStr[dot_point_location] != '\0')
		++dot_point_location;
    4038:	8f 81       	ldd	r24, Y+7	; 0x07
    403a:	8f 5f       	subi	r24, 0xFF	; 255
    403c:	8f 83       	std	Y+7, r24	; 0x07
	s32 l_intPart = (s32)num;
	f32 l_floatPart =  num - l_intPart;

	snprintf(numStr , 6 , "%d" , l_intPart);

	while(numStr[dot_point_location] != '\0')
    403e:	8f 81       	ldd	r24, Y+7	; 0x07
    4040:	28 2f       	mov	r18, r24
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	ce 01       	movw	r24, r28
    4046:	08 96       	adiw	r24, 0x08	; 8
    4048:	fc 01       	movw	r30, r24
    404a:	e2 0f       	add	r30, r18
    404c:	f3 1f       	adc	r31, r19
    404e:	80 81       	ld	r24, Z
    4050:	88 23       	and	r24, r24
    4052:	91 f7       	brne	.-28     	; 0x4038 <LCD_voidSendf32Digit+0xc6>
		++dot_point_location;

	numStr[dot_point_location++] = '.';
    4054:	8f 81       	ldd	r24, Y+7	; 0x07
    4056:	28 2f       	mov	r18, r24
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	ce 01       	movw	r24, r28
    405c:	08 96       	adiw	r24, 0x08	; 8
    405e:	fc 01       	movw	r30, r24
    4060:	e2 0f       	add	r30, r18
    4062:	f3 1f       	adc	r31, r19
    4064:	8e e2       	ldi	r24, 0x2E	; 46
    4066:	80 83       	st	Z, r24
    4068:	8f 81       	ldd	r24, Y+7	; 0x07
    406a:	8f 5f       	subi	r24, 0xFF	; 255
    406c:	8f 83       	std	Y+7, r24	; 0x07



	numStr[dot_point_location++] = ((u32)(l_floatPart * 10) %10) + '0';
    406e:	8f 81       	ldd	r24, Y+7	; 0x07
    4070:	08 2f       	mov	r16, r24
    4072:	10 e0       	ldi	r17, 0x00	; 0
    4074:	69 81       	ldd	r22, Y+1	; 0x01
    4076:	7a 81       	ldd	r23, Y+2	; 0x02
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	40 e2       	ldi	r20, 0x20	; 32
    4082:	51 e4       	ldi	r21, 0x41	; 65
    4084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	2a e0       	ldi	r18, 0x0A	; 10
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e0       	ldi	r20, 0x00	; 0
    409e:	50 e0       	ldi	r21, 0x00	; 0
    40a0:	bc 01       	movw	r22, r24
    40a2:	cd 01       	movw	r24, r26
    40a4:	0e 94 4e 28 	call	0x509c	; 0x509c <__udivmodsi4>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	28 2f       	mov	r18, r24
    40ae:	20 5d       	subi	r18, 0xD0	; 208
    40b0:	ce 01       	movw	r24, r28
    40b2:	08 96       	adiw	r24, 0x08	; 8
    40b4:	fc 01       	movw	r30, r24
    40b6:	e0 0f       	add	r30, r16
    40b8:	f1 1f       	adc	r31, r17
    40ba:	20 83       	st	Z, r18
    40bc:	8f 81       	ldd	r24, Y+7	; 0x07
    40be:	8f 5f       	subi	r24, 0xFF	; 255
    40c0:	8f 83       	std	Y+7, r24	; 0x07
	numStr[dot_point_location] = ((u32)(l_floatPart * 100) %10) + '0';
    40c2:	8f 81       	ldd	r24, Y+7	; 0x07
    40c4:	08 2f       	mov	r16, r24
    40c6:	10 e0       	ldi	r17, 0x00	; 0
    40c8:	69 81       	ldd	r22, Y+1	; 0x01
    40ca:	7a 81       	ldd	r23, Y+2	; 0x02
    40cc:	8b 81       	ldd	r24, Y+3	; 0x03
    40ce:	9c 81       	ldd	r25, Y+4	; 0x04
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	48 ec       	ldi	r20, 0xC8	; 200
    40d6:	52 e4       	ldi	r21, 0x42	; 66
    40d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	bc 01       	movw	r22, r24
    40e2:	cd 01       	movw	r24, r26
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	2a e0       	ldi	r18, 0x0A	; 10
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	40 e0       	ldi	r20, 0x00	; 0
    40f2:	50 e0       	ldi	r21, 0x00	; 0
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	0e 94 4e 28 	call	0x509c	; 0x509c <__udivmodsi4>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	28 2f       	mov	r18, r24
    4102:	20 5d       	subi	r18, 0xD0	; 208
    4104:	ce 01       	movw	r24, r28
    4106:	08 96       	adiw	r24, 0x08	; 8
    4108:	fc 01       	movw	r30, r24
    410a:	e0 0f       	add	r30, r16
    410c:	f1 1f       	adc	r31, r17
    410e:	20 83       	st	Z, r18

	LCD_voidSendString(copy_pstConfig ,numStr);
    4110:	8b 89       	ldd	r24, Y+19	; 0x13
    4112:	9c 89       	ldd	r25, Y+20	; 0x14
    4114:	9e 01       	movw	r18, r28
    4116:	28 5f       	subi	r18, 0xF8	; 248
    4118:	3f 4f       	sbci	r19, 0xFF	; 255
    411a:	b9 01       	movw	r22, r18
    411c:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidSendString>
	return;
}
    4120:	68 96       	adiw	r28, 0x18	; 24
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	cf 91       	pop	r28
    412e:	df 91       	pop	r29
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

00004136 <LCD_voidSendf32Digit_Postion>:
void LCD_voidSendf32Digit_Postion(LCD_stConfig* copy_pstConfig , f32 num, u8 copy_u8Row , u8 copy_u8Colum)
{
    4136:	0f 93       	push	r16
    4138:	df 93       	push	r29
    413a:	cf 93       	push	r28
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
    4140:	66 97       	sbiw	r28, 0x16	; 22
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	98 8b       	std	Y+16, r25	; 0x10
    414e:	8f 87       	std	Y+15, r24	; 0x0f
    4150:	49 8b       	std	Y+17, r20	; 0x11
    4152:	5a 8b       	std	Y+18, r21	; 0x12
    4154:	6b 8b       	std	Y+19, r22	; 0x13
    4156:	7c 8b       	std	Y+20, r23	; 0x14
    4158:	2d 8b       	std	Y+21, r18	; 0x15
    415a:	0e 8b       	std	Y+22, r16	; 0x16
	LCD_voidSendCommand(copy_pstConfig ,  (LCD_U8DDRAM_OFFSET | (copy_u8Row + copy_u8Colum)) );
    415c:	9d 89       	ldd	r25, Y+21	; 0x15
    415e:	8e 89       	ldd	r24, Y+22	; 0x16
    4160:	89 0f       	add	r24, r25
    4162:	80 68       	ori	r24, 0x80	; 128
    4164:	28 2f       	mov	r18, r24
    4166:	8f 85       	ldd	r24, Y+15	; 0x0f
    4168:	98 89       	ldd	r25, Y+16	; 0x10
    416a:	62 2f       	mov	r22, r18
    416c:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_voidSendCommand>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	ac e0       	ldi	r26, 0x0C	; 12
    4176:	b2 e4       	ldi	r27, 0x42	; 66
    4178:	8b 87       	std	Y+11, r24	; 0x0b
    417a:	9c 87       	std	Y+12, r25	; 0x0c
    417c:	ad 87       	std	Y+13, r26	; 0x0d
    417e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4180:	6b 85       	ldd	r22, Y+11	; 0x0b
    4182:	7c 85       	ldd	r23, Y+12	; 0x0c
    4184:	8d 85       	ldd	r24, Y+13	; 0x0d
    4186:	9e 85       	ldd	r25, Y+14	; 0x0e
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	4a ef       	ldi	r20, 0xFA	; 250
    418e:	54 e4       	ldi	r21, 0x44	; 68
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	8f 83       	std	Y+7, r24	; 0x07
    419a:	98 87       	std	Y+8, r25	; 0x08
    419c:	a9 87       	std	Y+9, r26	; 0x09
    419e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e8       	ldi	r20, 0x80	; 128
    41ae:	5f e3       	ldi	r21, 0x3F	; 63
    41b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    41b4:	88 23       	and	r24, r24
    41b6:	2c f4       	brge	.+10     	; 0x41c2 <LCD_voidSendf32Digit_Postion+0x8c>
		__ticks = 1;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	8d 83       	std	Y+5, r24	; 0x05
    41c0:	3f c0       	rjmp	.+126    	; 0x4240 <LCD_voidSendf32Digit_Postion+0x10a>
	else if (__tmp > 65535)
    41c2:	6f 81       	ldd	r22, Y+7	; 0x07
    41c4:	78 85       	ldd	r23, Y+8	; 0x08
    41c6:	89 85       	ldd	r24, Y+9	; 0x09
    41c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	3f ef       	ldi	r19, 0xFF	; 255
    41ce:	4f e7       	ldi	r20, 0x7F	; 127
    41d0:	57 e4       	ldi	r21, 0x47	; 71
    41d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    41d6:	18 16       	cp	r1, r24
    41d8:	4c f5       	brge	.+82     	; 0x422c <LCD_voidSendf32Digit_Postion+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41da:	6b 85       	ldd	r22, Y+11	; 0x0b
    41dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41de:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e2       	ldi	r20, 0x20	; 32
    41e8:	51 e4       	ldi	r21, 0x41	; 65
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	bc 01       	movw	r22, r24
    41f4:	cd 01       	movw	r24, r26
    41f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	9e 83       	std	Y+6, r25	; 0x06
    4200:	8d 83       	std	Y+5, r24	; 0x05
    4202:	0f c0       	rjmp	.+30     	; 0x4222 <LCD_voidSendf32Digit_Postion+0xec>
    4204:	88 ec       	ldi	r24, 0xC8	; 200
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	8b 83       	std	Y+3, r24	; 0x03
    420c:	8b 81       	ldd	r24, Y+3	; 0x03
    420e:	9c 81       	ldd	r25, Y+4	; 0x04
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	f1 f7       	brne	.-4      	; 0x4210 <LCD_voidSendf32Digit_Postion+0xda>
    4214:	9c 83       	std	Y+4, r25	; 0x04
    4216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4218:	8d 81       	ldd	r24, Y+5	; 0x05
    421a:	9e 81       	ldd	r25, Y+6	; 0x06
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4222:	8d 81       	ldd	r24, Y+5	; 0x05
    4224:	9e 81       	ldd	r25, Y+6	; 0x06
    4226:	00 97       	sbiw	r24, 0x00	; 0
    4228:	69 f7       	brne	.-38     	; 0x4204 <LCD_voidSendf32Digit_Postion+0xce>
    422a:	14 c0       	rjmp	.+40     	; 0x4254 <LCD_voidSendf32Digit_Postion+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422c:	6f 81       	ldd	r22, Y+7	; 0x07
    422e:	78 85       	ldd	r23, Y+8	; 0x08
    4230:	89 85       	ldd	r24, Y+9	; 0x09
    4232:	9a 85       	ldd	r25, Y+10	; 0x0a
    4234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	9e 83       	std	Y+6, r25	; 0x06
    423e:	8d 83       	std	Y+5, r24	; 0x05
    4240:	8d 81       	ldd	r24, Y+5	; 0x05
    4242:	9e 81       	ldd	r25, Y+6	; 0x06
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	9a 81       	ldd	r25, Y+2	; 0x02
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	f1 f7       	brne	.-4      	; 0x424c <LCD_voidSendf32Digit_Postion+0x116>
    4250:	9a 83       	std	Y+2, r25	; 0x02
    4252:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_voidSendf32Digit(copy_pstConfig,num);
    4254:	8f 85       	ldd	r24, Y+15	; 0x0f
    4256:	98 89       	ldd	r25, Y+16	; 0x10
    4258:	29 89       	ldd	r18, Y+17	; 0x11
    425a:	3a 89       	ldd	r19, Y+18	; 0x12
    425c:	4b 89       	ldd	r20, Y+19	; 0x13
    425e:	5c 89       	ldd	r21, Y+20	; 0x14
    4260:	ba 01       	movw	r22, r20
    4262:	a9 01       	movw	r20, r18
    4264:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <LCD_voidSendf32Digit>
	return;
}
    4268:	66 96       	adiw	r28, 0x16	; 22
    426a:	0f b6       	in	r0, 0x3f	; 63
    426c:	f8 94       	cli
    426e:	de bf       	out	0x3e, r29	; 62
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	0f 91       	pop	r16
    427a:	08 95       	ret

0000427c <KPD_VoidInit>:

static u8 KPD_ArrROWS_PINS[ROWS_U8NUM] = KPD_ROW_PINS_ARR;
static u8 KPD_ArrCOLS_PINS[COLUMS_U8NUM] = KPD_COL_PINS_ARR;

void KPD_VoidInit(void)
{
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	0f 92       	push	r0
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
	u8 i = 0;
    4286:	19 82       	std	Y+1, r1	; 0x01
    4288:	10 c0       	rjmp	.+32     	; 0x42aa <KPD_VoidInit+0x2e>
	for(; i <ROWS_U8NUM ; ++i)
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrROWS_PINS[i], DIO_PIN_DIR_INPUT , DIO_PIN_LOGIC_HIGH);
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	88 2f       	mov	r24, r24
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	fc 01       	movw	r30, r24
    4292:	ef 53       	subi	r30, 0x3F	; 63
    4294:	fe 4f       	sbci	r31, 0xFE	; 254
    4296:	90 81       	ld	r25, Z
    4298:	83 e0       	ldi	r24, 0x03	; 3
    429a:	69 2f       	mov	r22, r25
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	21 e0       	ldi	r18, 0x01	; 1
    42a0:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
static u8 KPD_ArrCOLS_PINS[COLUMS_U8NUM] = KPD_COL_PINS_ARR;

void KPD_VoidInit(void)
{
	u8 i = 0;
	for(; i <ROWS_U8NUM ; ++i)
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	8f 5f       	subi	r24, 0xFF	; 255
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	84 30       	cpi	r24, 0x04	; 4
    42ae:	68 f3       	brcs	.-38     	; 0x428a <KPD_VoidInit+0xe>
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrROWS_PINS[i], DIO_PIN_DIR_INPUT , DIO_PIN_LOGIC_HIGH);

	for(i = 0 ; i < COLUMS_U8NUM ; ++i)
    42b0:	19 82       	std	Y+1, r1	; 0x01
    42b2:	10 c0       	rjmp	.+32     	; 0x42d4 <KPD_VoidInit+0x58>
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrCOLS_PINS[i], DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	88 2f       	mov	r24, r24
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	fc 01       	movw	r30, r24
    42bc:	eb 53       	subi	r30, 0x3B	; 59
    42be:	fe 4f       	sbci	r31, 0xFE	; 254
    42c0:	90 81       	ld	r25, Z
    42c2:	83 e0       	ldi	r24, 0x03	; 3
    42c4:	69 2f       	mov	r22, r25
    42c6:	41 e0       	ldi	r20, 0x01	; 1
    42c8:	21 e0       	ldi	r18, 0x01	; 1
    42ca:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidPinInit>
{
	u8 i = 0;
	for(; i <ROWS_U8NUM ; ++i)
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrROWS_PINS[i], DIO_PIN_DIR_INPUT , DIO_PIN_LOGIC_HIGH);

	for(i = 0 ; i < COLUMS_U8NUM ; ++i)
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	8f 5f       	subi	r24, 0xFF	; 255
    42d2:	89 83       	std	Y+1, r24	; 0x01
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	84 30       	cpi	r24, 0x04	; 4
    42d8:	68 f3       	brcs	.-38     	; 0x42b4 <KPD_VoidInit+0x38>
		DIO_voidPinInit(KEYPARD_PORT, KPD_ArrCOLS_PINS[i], DIO_PIN_DIR_OUTPUT , DIO_PIN_LOGIC_HIGH);
	return;
}
    42da:	0f 90       	pop	r0
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <KPD_U8GetKey>:

u8 KPD_U8GetKey(void)
{
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	69 97       	sbiw	r28, 0x19	; 25
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	f8 94       	cli
    42f0:	de bf       	out	0x3e, r29	; 62
    42f2:	0f be       	out	0x3f, r0	; 63
    42f4:	cd bf       	out	0x3d, r28	; 61
	u8 KPD_ARR_VAL[ROWS_U8NUM][COLUMS_U8NUM] =  KEYPAD_ARR_VALUES;
    42f6:	ce 01       	movw	r24, r28
    42f8:	03 96       	adiw	r24, 0x03	; 3
    42fa:	9e 8b       	std	Y+22, r25	; 0x16
    42fc:	8d 8b       	std	Y+21, r24	; 0x15
    42fe:	ec ec       	ldi	r30, 0xCC	; 204
    4300:	f1 e0       	ldi	r31, 0x01	; 1
    4302:	f8 8f       	std	Y+24, r31	; 0x18
    4304:	ef 8b       	std	Y+23, r30	; 0x17
    4306:	f0 e1       	ldi	r31, 0x10	; 16
    4308:	f9 8f       	std	Y+25, r31	; 0x19
    430a:	ef 89       	ldd	r30, Y+23	; 0x17
    430c:	f8 8d       	ldd	r31, Y+24	; 0x18
    430e:	00 80       	ld	r0, Z
    4310:	8f 89       	ldd	r24, Y+23	; 0x17
    4312:	98 8d       	ldd	r25, Y+24	; 0x18
    4314:	01 96       	adiw	r24, 0x01	; 1
    4316:	98 8f       	std	Y+24, r25	; 0x18
    4318:	8f 8b       	std	Y+23, r24	; 0x17
    431a:	ed 89       	ldd	r30, Y+21	; 0x15
    431c:	fe 89       	ldd	r31, Y+22	; 0x16
    431e:	00 82       	st	Z, r0
    4320:	8d 89       	ldd	r24, Y+21	; 0x15
    4322:	9e 89       	ldd	r25, Y+22	; 0x16
    4324:	01 96       	adiw	r24, 0x01	; 1
    4326:	9e 8b       	std	Y+22, r25	; 0x16
    4328:	8d 8b       	std	Y+21, r24	; 0x15
    432a:	99 8d       	ldd	r25, Y+25	; 0x19
    432c:	91 50       	subi	r25, 0x01	; 1
    432e:	99 8f       	std	Y+25, r25	; 0x19
    4330:	e9 8d       	ldd	r30, Y+25	; 0x19
    4332:	ee 23       	and	r30, r30
    4334:	51 f7       	brne	.-44     	; 0x430a <KPD_U8GetKey+0x28>
	u8 local_KPD_Stat = DIO_PIN_LOGIC_HIGH;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_rows = 0 , l_colums = 0;
    433a:	1a 82       	std	Y+2, r1	; 0x02
    433c:	19 82       	std	Y+1, r1	; 0x01
    433e:	5e c0       	rjmp	.+188    	; 0x43fc <KPD_U8GetKey+0x11a>

	for(;l_colums < COLUMS_U8NUM ; ++l_colums )
	{
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_LOW);
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	88 2f       	mov	r24, r24
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	fc 01       	movw	r30, r24
    4348:	eb 53       	subi	r30, 0x3B	; 59
    434a:	fe 4f       	sbci	r31, 0xFE	; 254
    434c:	90 81       	ld	r25, Z
    434e:	83 e0       	ldi	r24, 0x03	; 3
    4350:	69 2f       	mov	r22, r25
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
		for(l_rows = 0 ; l_rows <ROWS_U8NUM ; ++l_rows )
    4358:	1a 82       	std	Y+2, r1	; 0x02
    435a:	3d c0       	rjmp	.+122    	; 0x43d6 <KPD_U8GetKey+0xf4>
		{
			DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
    435c:	8a 81       	ldd	r24, Y+2	; 0x02
    435e:	88 2f       	mov	r24, r24
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	fc 01       	movw	r30, r24
    4364:	ef 53       	subi	r30, 0x3F	; 63
    4366:	fe 4f       	sbci	r31, 0xFE	; 254
    4368:	90 81       	ld	r25, Z
    436a:	9e 01       	movw	r18, r28
    436c:	2d 5e       	subi	r18, 0xED	; 237
    436e:	3f 4f       	sbci	r19, 0xFF	; 255
    4370:	83 e0       	ldi	r24, 0x03	; 3
    4372:	69 2f       	mov	r22, r25
    4374:	a9 01       	movw	r20, r18
    4376:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_VoidGetPinValue>
			if(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
    437a:	8b 89       	ldd	r24, Y+19	; 0x13
    437c:	88 23       	and	r24, r24
    437e:	41 f5       	brne	.+80     	; 0x43d0 <KPD_U8GetKey+0xee>
    4380:	0f c0       	rjmp	.+30     	; 0x43a0 <KPD_U8GetKey+0xbe>
			{
				while(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
				{
					DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	88 2f       	mov	r24, r24
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	fc 01       	movw	r30, r24
    438a:	ef 53       	subi	r30, 0x3F	; 63
    438c:	fe 4f       	sbci	r31, 0xFE	; 254
    438e:	90 81       	ld	r25, Z
    4390:	9e 01       	movw	r18, r28
    4392:	2d 5e       	subi	r18, 0xED	; 237
    4394:	3f 4f       	sbci	r19, 0xFF	; 255
    4396:	83 e0       	ldi	r24, 0x03	; 3
    4398:	69 2f       	mov	r22, r25
    439a:	a9 01       	movw	r20, r18
    439c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <DIO_VoidGetPinValue>
		for(l_rows = 0 ; l_rows <ROWS_U8NUM ; ++l_rows )
		{
			DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
			if(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
			{
				while(DIO_PIN_LOGIC_LOW == local_KPD_Stat)
    43a0:	8b 89       	ldd	r24, Y+19	; 0x13
    43a2:	88 23       	and	r24, r24
    43a4:	71 f3       	breq	.-36     	; 0x4382 <KPD_U8GetKey+0xa0>
				{
					DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
				}
				return KPD_ARR_VAL[l_rows][l_colums];
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	28 2f       	mov	r18, r24
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	48 2f       	mov	r20, r24
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	22 0f       	add	r18, r18
    43b4:	33 1f       	adc	r19, r19
    43b6:	22 0f       	add	r18, r18
    43b8:	33 1f       	adc	r19, r19
    43ba:	ce 01       	movw	r24, r28
    43bc:	01 96       	adiw	r24, 0x01	; 1
    43be:	82 0f       	add	r24, r18
    43c0:	93 1f       	adc	r25, r19
    43c2:	84 0f       	add	r24, r20
    43c4:	95 1f       	adc	r25, r21
    43c6:	fc 01       	movw	r30, r24
    43c8:	32 96       	adiw	r30, 0x02	; 2
    43ca:	80 81       	ld	r24, Z
    43cc:	8c 8b       	std	Y+20, r24	; 0x14
    43ce:	1c c0       	rjmp	.+56     	; 0x4408 <KPD_U8GetKey+0x126>
	u8 l_rows = 0 , l_colums = 0;

	for(;l_colums < COLUMS_U8NUM ; ++l_colums )
	{
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_LOW);
		for(l_rows = 0 ; l_rows <ROWS_U8NUM ; ++l_rows )
    43d0:	8a 81       	ldd	r24, Y+2	; 0x02
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	8a 83       	std	Y+2, r24	; 0x02
    43d6:	8a 81       	ldd	r24, Y+2	; 0x02
    43d8:	84 30       	cpi	r24, 0x04	; 4
    43da:	08 f4       	brcc	.+2      	; 0x43de <KPD_U8GetKey+0xfc>
    43dc:	bf cf       	rjmp	.-130    	; 0x435c <KPD_U8GetKey+0x7a>
					DIO_VoidGetPinValue(KEYPARD_PORT,KPD_ArrROWS_PINS[l_rows] , &local_KPD_Stat);
				}
				return KPD_ARR_VAL[l_rows][l_colums];
			}
		}
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_HIGH);
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	88 2f       	mov	r24, r24
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	fc 01       	movw	r30, r24
    43e6:	eb 53       	subi	r30, 0x3B	; 59
    43e8:	fe 4f       	sbci	r31, 0xFE	; 254
    43ea:	90 81       	ld	r25, Z
    43ec:	83 e0       	ldi	r24, 0x03	; 3
    43ee:	69 2f       	mov	r22, r25
    43f0:	41 e0       	ldi	r20, 0x01	; 1
    43f2:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VoidSetPinValue>
{
	u8 KPD_ARR_VAL[ROWS_U8NUM][COLUMS_U8NUM] =  KEYPAD_ARR_VALUES;
	u8 local_KPD_Stat = DIO_PIN_LOGIC_HIGH;
	u8 l_rows = 0 , l_colums = 0;

	for(;l_colums < COLUMS_U8NUM ; ++l_colums )
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	8f 5f       	subi	r24, 0xFF	; 255
    43fa:	89 83       	std	Y+1, r24	; 0x01
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	84 30       	cpi	r24, 0x04	; 4
    4400:	08 f4       	brcc	.+2      	; 0x4404 <KPD_U8GetKey+0x122>
    4402:	9e cf       	rjmp	.-196    	; 0x4340 <KPD_U8GetKey+0x5e>
				return KPD_ARR_VAL[l_rows][l_colums];
			}
		}
		DIO_VoidSetPinValue(KEYPARD_PORT,KPD_ArrCOLS_PINS[l_colums],DIO_PIN_LOGIC_HIGH);
	}
	return KEYPAD_U8NOTPRESSED;
    4404:	9f ef       	ldi	r25, 0xFF	; 255
    4406:	9c 8b       	std	Y+20, r25	; 0x14
    4408:	8c 89       	ldd	r24, Y+20	; 0x14
}
    440a:	69 96       	adiw	r28, 0x19	; 25
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	f8 94       	cli
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	cd bf       	out	0x3d, r28	; 61
    4416:	cf 91       	pop	r28
    4418:	df 91       	pop	r29
    441a:	08 95       	ret

0000441c <main>:
u8 operation_idx = 0;
u8 op_idx = 0;
u8 colCounter = 0; // counter to count curr col in lcd

void main()
{
    441c:	cf 92       	push	r12
    441e:	df 92       	push	r13
    4420:	ef 92       	push	r14
    4422:	ff 92       	push	r15
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	df 93       	push	r29
    442a:	cf 93       	push	r28
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    4430:	6c 97       	sbiw	r28, 0x1c	; 28
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
	u8 operation_ArrSize = OPERANTION_SIZE;
    443c:	85 e0       	ldi	r24, 0x05	; 5
    443e:	8e 8b       	std	Y+22, r24	; 0x16
	u8 operant_ArrSize = OPERANT_SIZE;
    4440:	85 e0       	ldi	r24, 0x05	; 5
    4442:	8d 8b       	std	Y+21, r24	; 0x15
	u8* operation = (u8*)calloc(operation_ArrSize,sizeof(u8));
    4444:	8e 89       	ldd	r24, Y+22	; 0x16
    4446:	88 2f       	mov	r24, r24
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	61 e0       	ldi	r22, 0x01	; 1
    444c:	70 e0       	ldi	r23, 0x00	; 0
    444e:	0e 94 a7 28 	call	0x514e	; 0x514e <calloc>
    4452:	9c 8b       	std	Y+20, r25	; 0x14
    4454:	8b 8b       	std	Y+19, r24	; 0x13
	f32* op = (f32*)calloc(operant_ArrSize,sizeof(f32));
    4456:	8d 89       	ldd	r24, Y+21	; 0x15
    4458:	88 2f       	mov	r24, r24
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	64 e0       	ldi	r22, 0x04	; 4
    445e:	70 e0       	ldi	r23, 0x00	; 0
    4460:	0e 94 a7 28 	call	0x514e	; 0x514e <calloc>
    4464:	9a 8b       	std	Y+18, r25	; 0x12
    4466:	89 8b       	std	Y+17, r24	; 0x11

	u8 ret = 0;
    4468:	18 8a       	std	Y+16, r1	; 0x10
	f32 ans = 0; // to save the answer
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	a0 e0       	ldi	r26, 0x00	; 0
    4470:	b0 e0       	ldi	r27, 0x00	; 0
    4472:	8f 8b       	std	Y+23, r24	; 0x17
    4474:	98 8f       	std	Y+24, r25	; 0x18
    4476:	a9 8f       	std	Y+25, r26	; 0x19
    4478:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 KPD_value = KEYPAD_U8NOTPRESSED;
    447a:	8f ef       	ldi	r24, 0xFF	; 255
    447c:	8f 87       	std	Y+15, r24	; 0x0f
	app_init();
    447e:	0e 94 4f 24 	call	0x489e	; 0x489e <app_init>
	welcomeScreen();
    4482:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <welcomeScreen>
	while(1)
	{
		KPD_value = KPD_U8GetKey();
    4486:	0e 94 71 21 	call	0x42e2	; 0x42e2 <KPD_U8GetKey>
    448a:	8f 87       	std	Y+15, r24	; 0x0f
		if(IS_Input_Num(KPD_value))
    448c:	8f 85       	ldd	r24, Y+15	; 0x0f
    448e:	0e 94 f7 24 	call	0x49ee	; 0x49ee <IS_Input_Num>
    4492:	88 23       	and	r24, r24
    4494:	09 f4       	brne	.+2      	; 0x4498 <main+0x7c>
    4496:	74 c0       	rjmp	.+232    	; 0x4580 <main+0x164>
		{
			++colCounter;
    4498:	80 91 fc 01 	lds	r24, 0x01FC
    449c:	8f 5f       	subi	r24, 0xFF	; 255
    449e:	80 93 fc 01 	sts	0x01FC, r24
			if(colCounter>16)
    44a2:	80 91 fc 01 	lds	r24, 0x01FC
    44a6:	81 31       	cpi	r24, 0x11	; 17
    44a8:	20 f0       	brcs	.+8      	; 0x44b2 <main+0x96>
			{
				LCD_voidShiftScreenRight(&_lcd);
    44aa:	89 ec       	ldi	r24, 0xC9	; 201
    44ac:	91 e0       	ldi	r25, 0x01	; 1
    44ae:	0e 94 0a 1a 	call	0x3414	; 0x3414 <LCD_voidShiftScreenRight>
			}
			else {/*nothing*/}
			if(op_idx == operant_ArrSize)
    44b2:	90 91 fb 01 	lds	r25, 0x01FB
    44b6:	8d 89       	ldd	r24, Y+21	; 0x15
    44b8:	98 17       	cp	r25, r24
    44ba:	91 f4       	brne	.+36     	; 0x44e0 <main+0xc4>
			{
				op = (f32*)realloc(op , (++operant_ArrSize) * sizeof(f32));
    44bc:	8d 89       	ldd	r24, Y+21	; 0x15
    44be:	8f 5f       	subi	r24, 0xFF	; 255
    44c0:	8d 8b       	std	Y+21, r24	; 0x15
    44c2:	8d 89       	ldd	r24, Y+21	; 0x15
    44c4:	88 2f       	mov	r24, r24
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	9c 01       	movw	r18, r24
    44ca:	22 0f       	add	r18, r18
    44cc:	33 1f       	adc	r19, r19
    44ce:	22 0f       	add	r18, r18
    44d0:	33 1f       	adc	r19, r19
    44d2:	89 89       	ldd	r24, Y+17	; 0x11
    44d4:	9a 89       	ldd	r25, Y+18	; 0x12
    44d6:	b9 01       	movw	r22, r18
    44d8:	0e 94 c8 29 	call	0x5390	; 0x5390 <realloc>
    44dc:	9a 8b       	std	Y+18, r25	; 0x12
    44de:	89 8b       	std	Y+17, r24	; 0x11
			}
			else {/*nothing*/}
			op[op_idx] = (op[op_idx] * 10.0) + KPD_value;
    44e0:	80 91 fb 01 	lds	r24, 0x01FB
    44e4:	88 2f       	mov	r24, r24
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	9c 01       	movw	r18, r24
    44ea:	22 0f       	add	r18, r18
    44ec:	33 1f       	adc	r19, r19
    44ee:	22 0f       	add	r18, r18
    44f0:	33 1f       	adc	r19, r19
    44f2:	89 89       	ldd	r24, Y+17	; 0x11
    44f4:	9a 89       	ldd	r25, Y+18	; 0x12
    44f6:	6c 01       	movw	r12, r24
    44f8:	c2 0e       	add	r12, r18
    44fa:	d3 1e       	adc	r13, r19
    44fc:	80 91 fb 01 	lds	r24, 0x01FB
    4500:	88 2f       	mov	r24, r24
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	9c 01       	movw	r18, r24
    4506:	22 0f       	add	r18, r18
    4508:	33 1f       	adc	r19, r19
    450a:	22 0f       	add	r18, r18
    450c:	33 1f       	adc	r19, r19
    450e:	89 89       	ldd	r24, Y+17	; 0x11
    4510:	9a 89       	ldd	r25, Y+18	; 0x12
    4512:	fc 01       	movw	r30, r24
    4514:	e2 0f       	add	r30, r18
    4516:	f3 1f       	adc	r31, r19
    4518:	80 81       	ld	r24, Z
    451a:	91 81       	ldd	r25, Z+1	; 0x01
    451c:	a2 81       	ldd	r26, Z+2	; 0x02
    451e:	b3 81       	ldd	r27, Z+3	; 0x03
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	40 e2       	ldi	r20, 0x20	; 32
    452a:	51 e4       	ldi	r21, 0x41	; 65
    452c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	7c 01       	movw	r14, r24
    4536:	8d 01       	movw	r16, r26
    4538:	8f 85       	ldd	r24, Y+15	; 0x0f
    453a:	88 2f       	mov	r24, r24
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	aa 27       	eor	r26, r26
    4540:	97 fd       	sbrc	r25, 7
    4542:	a0 95       	com	r26
    4544:	ba 2f       	mov	r27, r26
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    454e:	9b 01       	movw	r18, r22
    4550:	ac 01       	movw	r20, r24
    4552:	c8 01       	movw	r24, r16
    4554:	b7 01       	movw	r22, r14
    4556:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	f6 01       	movw	r30, r12
    4560:	80 83       	st	Z, r24
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	a2 83       	std	Z+2, r26	; 0x02
    4566:	b3 83       	std	Z+3, r27	; 0x03

			LCD_voidSendU32Digit(&_lcd , KPD_value);
    4568:	8f 85       	ldd	r24, Y+15	; 0x0f
    456a:	28 2f       	mov	r18, r24
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	89 ec       	ldi	r24, 0xC9	; 201
    4574:	91 e0       	ldi	r25, 0x01	; 1
    4576:	ba 01       	movw	r22, r20
    4578:	a9 01       	movw	r20, r18
    457a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_voidSendU32Digit>
    457e:	83 cf       	rjmp	.-250    	; 0x4486 <main+0x6a>
		}
		else if( IS_Input_Operation(KPD_value) )
    4580:	8f 85       	ldd	r24, Y+15	; 0x0f
    4582:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <IS_Input_Operation>
    4586:	88 23       	and	r24, r24
    4588:	09 f4       	brne	.+2      	; 0x458c <main+0x170>
    458a:	57 c0       	rjmp	.+174    	; 0x463a <main+0x21e>
		{
			++colCounter;
    458c:	80 91 fc 01 	lds	r24, 0x01FC
    4590:	8f 5f       	subi	r24, 0xFF	; 255
    4592:	80 93 fc 01 	sts	0x01FC, r24
			if(colCounter>=16)
    4596:	80 91 fc 01 	lds	r24, 0x01FC
    459a:	80 31       	cpi	r24, 0x10	; 16
    459c:	20 f0       	brcs	.+8      	; 0x45a6 <main+0x18a>
			{
				LCD_voidShiftScreenRight(&_lcd);
    459e:	89 ec       	ldi	r24, 0xC9	; 201
    45a0:	91 e0       	ldi	r25, 0x01	; 1
    45a2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <LCD_voidShiftScreenRight>
			}
			else {/*nothing*/}
			if(operation_idx == operation_ArrSize)
    45a6:	90 91 fa 01 	lds	r25, 0x01FA
    45aa:	8e 89       	ldd	r24, Y+22	; 0x16
    45ac:	98 17       	cp	r25, r24
    45ae:	69 f4       	brne	.+26     	; 0x45ca <main+0x1ae>
			{
				operation = (u8*)realloc(operation , (++operation_ArrSize) * sizeof(u8));
    45b0:	8e 89       	ldd	r24, Y+22	; 0x16
    45b2:	8f 5f       	subi	r24, 0xFF	; 255
    45b4:	8e 8b       	std	Y+22, r24	; 0x16
    45b6:	8e 89       	ldd	r24, Y+22	; 0x16
    45b8:	28 2f       	mov	r18, r24
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	8b 89       	ldd	r24, Y+19	; 0x13
    45be:	9c 89       	ldd	r25, Y+20	; 0x14
    45c0:	b9 01       	movw	r22, r18
    45c2:	0e 94 c8 29 	call	0x5390	; 0x5390 <realloc>
    45c6:	9c 8b       	std	Y+20, r25	; 0x14
    45c8:	8b 8b       	std	Y+19, r24	; 0x13
			}
			else {/*nothing*/}

			MultiDiv_Flag = (KPD_value == '*' || KPD_value == '/' ) ? 1 :MultiDiv_Flag;
    45ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    45cc:	8a 32       	cpi	r24, 0x2A	; 42
    45ce:	39 f0       	breq	.+14     	; 0x45de <main+0x1c2>
    45d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45d2:	8f 32       	cpi	r24, 0x2F	; 47
    45d4:	21 f0       	breq	.+8      	; 0x45de <main+0x1c2>
    45d6:	f0 91 f8 01 	lds	r31, 0x01F8
    45da:	fc 8f       	std	Y+28, r31	; 0x1c
    45dc:	02 c0       	rjmp	.+4      	; 0x45e2 <main+0x1c6>
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	8c 8f       	std	Y+28, r24	; 0x1c
    45e2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    45e4:	e0 93 f8 01 	sts	0x01F8, r30
			PlusMinus_Flag = (KPD_value == '+' || KPD_value == '-' ) ? 1 :PlusMinus_Flag;
    45e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ea:	8b 32       	cpi	r24, 0x2B	; 43
    45ec:	39 f0       	breq	.+14     	; 0x45fc <main+0x1e0>
    45ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    45f0:	8d 32       	cpi	r24, 0x2D	; 45
    45f2:	21 f0       	breq	.+8      	; 0x45fc <main+0x1e0>
    45f4:	f0 91 f9 01 	lds	r31, 0x01F9
    45f8:	fb 8f       	std	Y+27, r31	; 0x1b
    45fa:	02 c0       	rjmp	.+4      	; 0x4600 <main+0x1e4>
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	8b 8f       	std	Y+27, r24	; 0x1b
    4600:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4602:	e0 93 f9 01 	sts	0x01F9, r30
			LCD_voidSendChar(&_lcd ,KPD_value );
    4606:	89 ec       	ldi	r24, 0xC9	; 201
    4608:	91 e0       	ldi	r25, 0x01	; 1
    460a:	6f 85       	ldd	r22, Y+15	; 0x0f
    460c:	0e 94 41 19 	call	0x3282	; 0x3282 <LCD_voidSendChar>
			operation[operation_idx++] = KPD_value;
    4610:	40 91 fa 01 	lds	r20, 0x01FA
    4614:	24 2f       	mov	r18, r20
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	8b 89       	ldd	r24, Y+19	; 0x13
    461a:	9c 89       	ldd	r25, Y+20	; 0x14
    461c:	fc 01       	movw	r30, r24
    461e:	e2 0f       	add	r30, r18
    4620:	f3 1f       	adc	r31, r19
    4622:	8f 85       	ldd	r24, Y+15	; 0x0f
    4624:	80 83       	st	Z, r24
    4626:	84 2f       	mov	r24, r20
    4628:	8f 5f       	subi	r24, 0xFF	; 255
    462a:	80 93 fa 01 	sts	0x01FA, r24
			++op_idx;
    462e:	80 91 fb 01 	lds	r24, 0x01FB
    4632:	8f 5f       	subi	r24, 0xFF	; 255
    4634:	80 93 fb 01 	sts	0x01FB, r24
    4638:	26 cf       	rjmp	.-436    	; 0x4486 <main+0x6a>

		}
		else if( IS_Input_Equal(KPD_value) )
    463a:	8f 85       	ldd	r24, Y+15	; 0x0f
    463c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <IS_Input_Equal>
    4640:	88 23       	and	r24, r24
    4642:	09 f4       	brne	.+2      	; 0x4646 <main+0x22a>
    4644:	bf c0       	rjmp	.+382    	; 0x47c4 <main+0x3a8>
		{

			ret = Calcualtor(op , operation , op_idx ,operation_idx, &ans);
    4646:	40 91 fb 01 	lds	r20, 0x01FB
    464a:	50 91 fa 01 	lds	r21, 0x01FA
    464e:	89 89       	ldd	r24, Y+17	; 0x11
    4650:	9a 89       	ldd	r25, Y+18	; 0x12
    4652:	2b 89       	ldd	r18, Y+19	; 0x13
    4654:	3c 89       	ldd	r19, Y+20	; 0x14
    4656:	fe 01       	movw	r30, r28
    4658:	77 96       	adiw	r30, 0x17	; 23
    465a:	b9 01       	movw	r22, r18
    465c:	25 2f       	mov	r18, r21
    465e:	8f 01       	movw	r16, r30
    4660:	0e 94 40 26 	call	0x4c80	; 0x4c80 <Calcualtor>
    4664:	88 8b       	std	Y+16, r24	; 0x10
			if (ret)
    4666:	88 89       	ldd	r24, Y+16	; 0x10
    4668:	88 23       	and	r24, r24
    466a:	29 f1       	breq	.+74     	; 0x46b6 <main+0x29a>
			{
				if(colCounter > 16)
    466c:	80 91 fc 01 	lds	r24, 0x01FC
    4670:	81 31       	cpi	r24, 0x11	; 17
    4672:	58 f0       	brcs	.+22     	; 0x468a <main+0x26e>
					LCD_voidSetCursor(&_lcd,LCD_U8ROW2 , LCD_U8COL1+(colCounter-15));
    4674:	80 91 fc 01 	lds	r24, 0x01FC
    4678:	28 2f       	mov	r18, r24
    467a:	2f 50       	subi	r18, 0x0F	; 15
    467c:	89 ec       	ldi	r24, 0xC9	; 201
    467e:	91 e0       	ldi	r25, 0x01	; 1
    4680:	60 e4       	ldi	r22, 0x40	; 64
    4682:	42 2f       	mov	r20, r18
    4684:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_voidSetCursor>
    4688:	06 c0       	rjmp	.+12     	; 0x4696 <main+0x27a>
				else
					LCD_voidSetCursor(&_lcd,LCD_U8ROW2 , LCD_U8COL1);
    468a:	89 ec       	ldi	r24, 0xC9	; 201
    468c:	91 e0       	ldi	r25, 0x01	; 1
    468e:	60 e4       	ldi	r22, 0x40	; 64
    4690:	40 e0       	ldi	r20, 0x00	; 0
    4692:	0e 94 59 19 	call	0x32b2	; 0x32b2 <LCD_voidSetCursor>

				LCD_voidSendChar(&_lcd ,KPD_value );
    4696:	89 ec       	ldi	r24, 0xC9	; 201
    4698:	91 e0       	ldi	r25, 0x01	; 1
    469a:	6f 85       	ldd	r22, Y+15	; 0x0f
    469c:	0e 94 41 19 	call	0x3282	; 0x3282 <LCD_voidSendChar>
				LCD_voidSendf32Digit(&_lcd , ans);
    46a0:	2f 89       	ldd	r18, Y+23	; 0x17
    46a2:	38 8d       	ldd	r19, Y+24	; 0x18
    46a4:	49 8d       	ldd	r20, Y+25	; 0x19
    46a6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    46a8:	89 ec       	ldi	r24, 0xC9	; 201
    46aa:	91 e0       	ldi	r25, 0x01	; 1
    46ac:	ba 01       	movw	r22, r20
    46ae:	a9 01       	movw	r20, r18
    46b0:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <LCD_voidSendf32Digit>
    46b4:	e8 ce       	rjmp	.-560    	; 0x4486 <main+0x6a>
			}
			else
			{
				LCD_voidClearDisplay(&_lcd);
    46b6:	89 ec       	ldi	r24, 0xC9	; 201
    46b8:	91 e0       	ldi	r25, 0x01	; 1
    46ba:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_voidClearDisplay>
				LCD_voidSendString(&_lcd , "Invaild Equation");
    46be:	89 ec       	ldi	r24, 0xC9	; 201
    46c0:	91 e0       	ldi	r25, 0x01	; 1
    46c2:	27 e6       	ldi	r18, 0x67	; 103
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	b9 01       	movw	r22, r18
    46c8:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidSendString>
    46cc:	80 e0       	ldi	r24, 0x00	; 0
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	aa ef       	ldi	r26, 0xFA	; 250
    46d2:	b3 e4       	ldi	r27, 0x43	; 67
    46d4:	8b 87       	std	Y+11, r24	; 0x0b
    46d6:	9c 87       	std	Y+12, r25	; 0x0c
    46d8:	ad 87       	std	Y+13, r26	; 0x0d
    46da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    46de:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	4a ef       	ldi	r20, 0xFA	; 250
    46ea:	54 e4       	ldi	r21, 0x44	; 68
    46ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	8f 83       	std	Y+7, r24	; 0x07
    46f6:	98 87       	std	Y+8, r25	; 0x08
    46f8:	a9 87       	std	Y+9, r26	; 0x09
    46fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46fc:	6f 81       	ldd	r22, Y+7	; 0x07
    46fe:	78 85       	ldd	r23, Y+8	; 0x08
    4700:	89 85       	ldd	r24, Y+9	; 0x09
    4702:	9a 85       	ldd	r25, Y+10	; 0x0a
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	40 e8       	ldi	r20, 0x80	; 128
    470a:	5f e3       	ldi	r21, 0x3F	; 63
    470c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4710:	88 23       	and	r24, r24
    4712:	2c f4       	brge	.+10     	; 0x471e <main+0x302>
		__ticks = 1;
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	9e 83       	std	Y+6, r25	; 0x06
    471a:	8d 83       	std	Y+5, r24	; 0x05
    471c:	3f c0       	rjmp	.+126    	; 0x479c <main+0x380>
	else if (__tmp > 65535)
    471e:	6f 81       	ldd	r22, Y+7	; 0x07
    4720:	78 85       	ldd	r23, Y+8	; 0x08
    4722:	89 85       	ldd	r24, Y+9	; 0x09
    4724:	9a 85       	ldd	r25, Y+10	; 0x0a
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	3f ef       	ldi	r19, 0xFF	; 255
    472a:	4f e7       	ldi	r20, 0x7F	; 127
    472c:	57 e4       	ldi	r21, 0x47	; 71
    472e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4732:	18 16       	cp	r1, r24
    4734:	4c f5       	brge	.+82     	; 0x4788 <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4736:	6b 85       	ldd	r22, Y+11	; 0x0b
    4738:	7c 85       	ldd	r23, Y+12	; 0x0c
    473a:	8d 85       	ldd	r24, Y+13	; 0x0d
    473c:	9e 85       	ldd	r25, Y+14	; 0x0e
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	40 e2       	ldi	r20, 0x20	; 32
    4744:	51 e4       	ldi	r21, 0x41	; 65
    4746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474a:	dc 01       	movw	r26, r24
    474c:	cb 01       	movw	r24, r22
    474e:	bc 01       	movw	r22, r24
    4750:	cd 01       	movw	r24, r26
    4752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4756:	dc 01       	movw	r26, r24
    4758:	cb 01       	movw	r24, r22
    475a:	9e 83       	std	Y+6, r25	; 0x06
    475c:	8d 83       	std	Y+5, r24	; 0x05
    475e:	0f c0       	rjmp	.+30     	; 0x477e <main+0x362>
    4760:	88 ec       	ldi	r24, 0xC8	; 200
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	9c 83       	std	Y+4, r25	; 0x04
    4766:	8b 83       	std	Y+3, r24	; 0x03
    4768:	8b 81       	ldd	r24, Y+3	; 0x03
    476a:	9c 81       	ldd	r25, Y+4	; 0x04
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	f1 f7       	brne	.-4      	; 0x476c <main+0x350>
    4770:	9c 83       	std	Y+4, r25	; 0x04
    4772:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4774:	8d 81       	ldd	r24, Y+5	; 0x05
    4776:	9e 81       	ldd	r25, Y+6	; 0x06
    4778:	01 97       	sbiw	r24, 0x01	; 1
    477a:	9e 83       	std	Y+6, r25	; 0x06
    477c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    477e:	8d 81       	ldd	r24, Y+5	; 0x05
    4780:	9e 81       	ldd	r25, Y+6	; 0x06
    4782:	00 97       	sbiw	r24, 0x00	; 0
    4784:	69 f7       	brne	.-38     	; 0x4760 <main+0x344>
    4786:	14 c0       	rjmp	.+40     	; 0x47b0 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4788:	6f 81       	ldd	r22, Y+7	; 0x07
    478a:	78 85       	ldd	r23, Y+8	; 0x08
    478c:	89 85       	ldd	r24, Y+9	; 0x09
    478e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	9e 83       	std	Y+6, r25	; 0x06
    479a:	8d 83       	std	Y+5, r24	; 0x05
    479c:	8d 81       	ldd	r24, Y+5	; 0x05
    479e:	9e 81       	ldd	r25, Y+6	; 0x06
    47a0:	9a 83       	std	Y+2, r25	; 0x02
    47a2:	89 83       	std	Y+1, r24	; 0x01
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	9a 81       	ldd	r25, Y+2	; 0x02
    47a8:	01 97       	sbiw	r24, 0x01	; 1
    47aa:	f1 f7       	brne	.-4      	; 0x47a8 <main+0x38c>
    47ac:	9a 83       	std	Y+2, r25	; 0x02
    47ae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				Clear_ALL(op, operation,operant_ArrSize,operation_ArrSize);
    47b0:	89 89       	ldd	r24, Y+17	; 0x11
    47b2:	9a 89       	ldd	r25, Y+18	; 0x12
    47b4:	2b 89       	ldd	r18, Y+19	; 0x13
    47b6:	3c 89       	ldd	r19, Y+20	; 0x14
    47b8:	b9 01       	movw	r22, r18
    47ba:	4d 89       	ldd	r20, Y+21	; 0x15
    47bc:	2e 89       	ldd	r18, Y+22	; 0x16
    47be:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <Clear_ALL>
    47c2:	61 ce       	rjmp	.-830    	; 0x4486 <main+0x6a>
			}

		}
		else if ( IS_Input_Clear(KPD_value) )
    47c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47c6:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <IS_Input_Clear>
    47ca:	88 23       	and	r24, r24
    47cc:	09 f4       	brne	.+2      	; 0x47d0 <main+0x3b4>
    47ce:	5b ce       	rjmp	.-842    	; 0x4486 <main+0x6a>
		{

			Clear_ALL(op, operation,operant_ArrSize,operation_ArrSize);
    47d0:	89 89       	ldd	r24, Y+17	; 0x11
    47d2:	9a 89       	ldd	r25, Y+18	; 0x12
    47d4:	2b 89       	ldd	r18, Y+19	; 0x13
    47d6:	3c 89       	ldd	r19, Y+20	; 0x14
    47d8:	b9 01       	movw	r22, r18
    47da:	4d 89       	ldd	r20, Y+21	; 0x15
    47dc:	2e 89       	ldd	r18, Y+22	; 0x16
    47de:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <Clear_ALL>
    47e2:	51 ce       	rjmp	.-862    	; 0x4486 <main+0x6a>

000047e4 <Clear_ALL>:
	return;
}


void Clear_ALL(f32* op  , u8* operation , u8 op_ArrSize , u8 operation_ArrSize)
{
    47e4:	df 93       	push	r29
    47e6:	cf 93       	push	r28
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	27 97       	sbiw	r28, 0x07	; 7
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	f8 94       	cli
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	9b 83       	std	Y+3, r25	; 0x03
    47fa:	8a 83       	std	Y+2, r24	; 0x02
    47fc:	7d 83       	std	Y+5, r23	; 0x05
    47fe:	6c 83       	std	Y+4, r22	; 0x04
    4800:	4e 83       	std	Y+6, r20	; 0x06
    4802:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0;
    4804:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearDisplay(&_lcd);
    4806:	89 ec       	ldi	r24, 0xC9	; 201
    4808:	91 e0       	ldi	r25, 0x01	; 1
    480a:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_voidClearDisplay>
	PlusMinus_Flag = MultiDiv_Flag = 0;
    480e:	10 92 f8 01 	sts	0x01F8, r1
    4812:	80 91 f8 01 	lds	r24, 0x01F8
    4816:	80 93 f9 01 	sts	0x01F9, r24
	op_idx = operation_idx = colCounter=  0;
    481a:	10 92 fc 01 	sts	0x01FC, r1
    481e:	80 91 fc 01 	lds	r24, 0x01FC
    4822:	80 93 fa 01 	sts	0x01FA, r24
    4826:	80 91 fa 01 	lds	r24, 0x01FA
    482a:	80 93 fb 01 	sts	0x01FB, r24
    482e:	18 c0       	rjmp	.+48     	; 0x4860 <Clear_ALL+0x7c>
	for(; i < op_ArrSize ; ++i)
		op[i] = 0;
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	88 2f       	mov	r24, r24
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	9c 01       	movw	r18, r24
    4838:	22 0f       	add	r18, r18
    483a:	33 1f       	adc	r19, r19
    483c:	22 0f       	add	r18, r18
    483e:	33 1f       	adc	r19, r19
    4840:	8a 81       	ldd	r24, Y+2	; 0x02
    4842:	9b 81       	ldd	r25, Y+3	; 0x03
    4844:	fc 01       	movw	r30, r24
    4846:	e2 0f       	add	r30, r18
    4848:	f3 1f       	adc	r31, r19
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	a0 e0       	ldi	r26, 0x00	; 0
    4850:	b0 e0       	ldi	r27, 0x00	; 0
    4852:	80 83       	st	Z, r24
    4854:	91 83       	std	Z+1, r25	; 0x01
    4856:	a2 83       	std	Z+2, r26	; 0x02
    4858:	b3 83       	std	Z+3, r27	; 0x03
{
	u8 i = 0;
	LCD_voidClearDisplay(&_lcd);
	PlusMinus_Flag = MultiDiv_Flag = 0;
	op_idx = operation_idx = colCounter=  0;
	for(; i < op_ArrSize ; ++i)
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	8f 5f       	subi	r24, 0xFF	; 255
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	99 81       	ldd	r25, Y+1	; 0x01
    4862:	8e 81       	ldd	r24, Y+6	; 0x06
    4864:	98 17       	cp	r25, r24
    4866:	20 f3       	brcs	.-56     	; 0x4830 <Clear_ALL+0x4c>
		op[i] = 0;
	for(i = 0; i < operation_ArrSize ; ++i)
    4868:	19 82       	std	Y+1, r1	; 0x01
    486a:	0c c0       	rjmp	.+24     	; 0x4884 <Clear_ALL+0xa0>
		operation[i] = 0;
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	28 2f       	mov	r18, r24
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	8c 81       	ldd	r24, Y+4	; 0x04
    4874:	9d 81       	ldd	r25, Y+5	; 0x05
    4876:	fc 01       	movw	r30, r24
    4878:	e2 0f       	add	r30, r18
    487a:	f3 1f       	adc	r31, r19
    487c:	10 82       	st	Z, r1
	LCD_voidClearDisplay(&_lcd);
	PlusMinus_Flag = MultiDiv_Flag = 0;
	op_idx = operation_idx = colCounter=  0;
	for(; i < op_ArrSize ; ++i)
		op[i] = 0;
	for(i = 0; i < operation_ArrSize ; ++i)
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	8f 5f       	subi	r24, 0xFF	; 255
    4882:	89 83       	std	Y+1, r24	; 0x01
    4884:	99 81       	ldd	r25, Y+1	; 0x01
    4886:	8f 81       	ldd	r24, Y+7	; 0x07
    4888:	98 17       	cp	r25, r24
    488a:	80 f3       	brcs	.-32     	; 0x486c <Clear_ALL+0x88>
		operation[i] = 0;

}
    488c:	27 96       	adiw	r28, 0x07	; 7
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	f8 94       	cli
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	cd bf       	out	0x3d, r28	; 61
    4898:	cf 91       	pop	r28
    489a:	df 91       	pop	r29
    489c:	08 95       	ret

0000489e <app_init>:

void app_init(void)
{
    489e:	df 93       	push	r29
    48a0:	cf 93       	push	r28
    48a2:	cd b7       	in	r28, 0x3d	; 61
    48a4:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit(&_lcd);
    48a6:	89 ec       	ldi	r24, 0xC9	; 201
    48a8:	91 e0       	ldi	r25, 0x01	; 1
    48aa:	0e 94 15 19 	call	0x322a	; 0x322a <LCD_voidInit>
	KPD_VoidInit();
    48ae:	0e 94 3e 21 	call	0x427c	; 0x427c <KPD_VoidInit>
}
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	08 95       	ret

000048b8 <welcomeScreen>:
void welcomeScreen(void)
{
    48b8:	df 93       	push	r29
    48ba:	cf 93       	push	r28
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	2e 97       	sbiw	r28, 0x0e	; 14
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendString_Postion(&_lcd , "Welcome" , LCD_U8ROW1 , LCD_U8COL5);
    48cc:	89 ec       	ldi	r24, 0xC9	; 201
    48ce:	91 e0       	ldi	r25, 0x01	; 1
    48d0:	28 e7       	ldi	r18, 0x78	; 120
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	b9 01       	movw	r22, r18
    48d6:	40 e0       	ldi	r20, 0x00	; 0
    48d8:	24 e0       	ldi	r18, 0x04	; 4
    48da:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_voidSendString_Postion>
	LCD_voidSendString_Postion(&_lcd , "to Calculator" , LCD_U8ROW2 , LCD_U8COL3);
    48de:	89 ec       	ldi	r24, 0xC9	; 201
    48e0:	91 e0       	ldi	r25, 0x01	; 1
    48e2:	20 e8       	ldi	r18, 0x80	; 128
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	b9 01       	movw	r22, r18
    48e8:	40 e4       	ldi	r20, 0x40	; 64
    48ea:	22 e0       	ldi	r18, 0x02	; 2
    48ec:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_voidSendString_Postion>
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	aa e7       	ldi	r26, 0x7A	; 122
    48f6:	b4 e4       	ldi	r27, 0x44	; 68
    48f8:	8b 87       	std	Y+11, r24	; 0x0b
    48fa:	9c 87       	std	Y+12, r25	; 0x0c
    48fc:	ad 87       	std	Y+13, r26	; 0x0d
    48fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4900:	6b 85       	ldd	r22, Y+11	; 0x0b
    4902:	7c 85       	ldd	r23, Y+12	; 0x0c
    4904:	8d 85       	ldd	r24, Y+13	; 0x0d
    4906:	9e 85       	ldd	r25, Y+14	; 0x0e
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	4a ef       	ldi	r20, 0xFA	; 250
    490e:	54 e4       	ldi	r21, 0x44	; 68
    4910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	8f 83       	std	Y+7, r24	; 0x07
    491a:	98 87       	std	Y+8, r25	; 0x08
    491c:	a9 87       	std	Y+9, r26	; 0x09
    491e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4920:	6f 81       	ldd	r22, Y+7	; 0x07
    4922:	78 85       	ldd	r23, Y+8	; 0x08
    4924:	89 85       	ldd	r24, Y+9	; 0x09
    4926:	9a 85       	ldd	r25, Y+10	; 0x0a
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	40 e8       	ldi	r20, 0x80	; 128
    492e:	5f e3       	ldi	r21, 0x3F	; 63
    4930:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4934:	88 23       	and	r24, r24
    4936:	2c f4       	brge	.+10     	; 0x4942 <welcomeScreen+0x8a>
		__ticks = 1;
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	9e 83       	std	Y+6, r25	; 0x06
    493e:	8d 83       	std	Y+5, r24	; 0x05
    4940:	3f c0       	rjmp	.+126    	; 0x49c0 <welcomeScreen+0x108>
	else if (__tmp > 65535)
    4942:	6f 81       	ldd	r22, Y+7	; 0x07
    4944:	78 85       	ldd	r23, Y+8	; 0x08
    4946:	89 85       	ldd	r24, Y+9	; 0x09
    4948:	9a 85       	ldd	r25, Y+10	; 0x0a
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	3f ef       	ldi	r19, 0xFF	; 255
    494e:	4f e7       	ldi	r20, 0x7F	; 127
    4950:	57 e4       	ldi	r21, 0x47	; 71
    4952:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4956:	18 16       	cp	r1, r24
    4958:	4c f5       	brge	.+82     	; 0x49ac <welcomeScreen+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    495a:	6b 85       	ldd	r22, Y+11	; 0x0b
    495c:	7c 85       	ldd	r23, Y+12	; 0x0c
    495e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4960:	9e 85       	ldd	r25, Y+14	; 0x0e
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e2       	ldi	r20, 0x20	; 32
    4968:	51 e4       	ldi	r21, 0x41	; 65
    496a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	bc 01       	movw	r22, r24
    4974:	cd 01       	movw	r24, r26
    4976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    497a:	dc 01       	movw	r26, r24
    497c:	cb 01       	movw	r24, r22
    497e:	9e 83       	std	Y+6, r25	; 0x06
    4980:	8d 83       	std	Y+5, r24	; 0x05
    4982:	0f c0       	rjmp	.+30     	; 0x49a2 <welcomeScreen+0xea>
    4984:	88 ec       	ldi	r24, 0xC8	; 200
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	9c 83       	std	Y+4, r25	; 0x04
    498a:	8b 83       	std	Y+3, r24	; 0x03
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	9c 81       	ldd	r25, Y+4	; 0x04
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	f1 f7       	brne	.-4      	; 0x4990 <welcomeScreen+0xd8>
    4994:	9c 83       	std	Y+4, r25	; 0x04
    4996:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4998:	8d 81       	ldd	r24, Y+5	; 0x05
    499a:	9e 81       	ldd	r25, Y+6	; 0x06
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	9e 83       	std	Y+6, r25	; 0x06
    49a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a2:	8d 81       	ldd	r24, Y+5	; 0x05
    49a4:	9e 81       	ldd	r25, Y+6	; 0x06
    49a6:	00 97       	sbiw	r24, 0x00	; 0
    49a8:	69 f7       	brne	.-38     	; 0x4984 <welcomeScreen+0xcc>
    49aa:	14 c0       	rjmp	.+40     	; 0x49d4 <welcomeScreen+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ac:	6f 81       	ldd	r22, Y+7	; 0x07
    49ae:	78 85       	ldd	r23, Y+8	; 0x08
    49b0:	89 85       	ldd	r24, Y+9	; 0x09
    49b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b8:	dc 01       	movw	r26, r24
    49ba:	cb 01       	movw	r24, r22
    49bc:	9e 83       	std	Y+6, r25	; 0x06
    49be:	8d 83       	std	Y+5, r24	; 0x05
    49c0:	8d 81       	ldd	r24, Y+5	; 0x05
    49c2:	9e 81       	ldd	r25, Y+6	; 0x06
    49c4:	9a 83       	std	Y+2, r25	; 0x02
    49c6:	89 83       	std	Y+1, r24	; 0x01
    49c8:	89 81       	ldd	r24, Y+1	; 0x01
    49ca:	9a 81       	ldd	r25, Y+2	; 0x02
    49cc:	01 97       	sbiw	r24, 0x01	; 1
    49ce:	f1 f7       	brne	.-4      	; 0x49cc <welcomeScreen+0x114>
    49d0:	9a 83       	std	Y+2, r25	; 0x02
    49d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidClearDisplay(&_lcd);
    49d4:	89 ec       	ldi	r24, 0xC9	; 201
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	0e 94 3d 1a 	call	0x347a	; 0x347a <LCD_voidClearDisplay>
}
    49dc:	2e 96       	adiw	r28, 0x0e	; 14
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	cf 91       	pop	r28
    49ea:	df 91       	pop	r29
    49ec:	08 95       	ret

000049ee <IS_Input_Num>:
u8 IS_Input_Num(u8 a)
{
    49ee:	df 93       	push	r29
    49f0:	cf 93       	push	r28
    49f2:	00 d0       	rcall	.+0      	; 0x49f4 <IS_Input_Num+0x6>
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
    49f8:	89 83       	std	Y+1, r24	; 0x01
	if(a != KEYPAD_U8NOTPRESSED && a != 'c' && a != '=' && a != '*' && a != '/' && a != '+' && a != '-')
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
    49fc:	8f 3f       	cpi	r24, 0xFF	; 255
    49fe:	a9 f0       	breq	.+42     	; 0x4a2a <IS_Input_Num+0x3c>
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	83 36       	cpi	r24, 0x63	; 99
    4a04:	91 f0       	breq	.+36     	; 0x4a2a <IS_Input_Num+0x3c>
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	8d 33       	cpi	r24, 0x3D	; 61
    4a0a:	79 f0       	breq	.+30     	; 0x4a2a <IS_Input_Num+0x3c>
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	8a 32       	cpi	r24, 0x2A	; 42
    4a10:	61 f0       	breq	.+24     	; 0x4a2a <IS_Input_Num+0x3c>
    4a12:	89 81       	ldd	r24, Y+1	; 0x01
    4a14:	8f 32       	cpi	r24, 0x2F	; 47
    4a16:	49 f0       	breq	.+18     	; 0x4a2a <IS_Input_Num+0x3c>
    4a18:	89 81       	ldd	r24, Y+1	; 0x01
    4a1a:	8b 32       	cpi	r24, 0x2B	; 43
    4a1c:	31 f0       	breq	.+12     	; 0x4a2a <IS_Input_Num+0x3c>
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	8d 32       	cpi	r24, 0x2D	; 45
    4a22:	19 f0       	breq	.+6      	; 0x4a2a <IS_Input_Num+0x3c>
	{
		return 1;
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	8a 83       	std	Y+2, r24	; 0x02
    4a28:	01 c0       	rjmp	.+2      	; 0x4a2c <IS_Input_Num+0x3e>
	}
	else
		return 0;
    4a2a:	1a 82       	std	Y+2, r1	; 0x02
    4a2c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a2e:	0f 90       	pop	r0
    4a30:	0f 90       	pop	r0
    4a32:	cf 91       	pop	r28
    4a34:	df 91       	pop	r29
    4a36:	08 95       	ret

00004a38 <IS_Input_Operation>:

u8 IS_Input_Operation(u8 a)
{
    4a38:	df 93       	push	r29
    4a3a:	cf 93       	push	r28
    4a3c:	00 d0       	rcall	.+0      	; 0x4a3e <IS_Input_Operation+0x6>
    4a3e:	cd b7       	in	r28, 0x3d	; 61
    4a40:	de b7       	in	r29, 0x3e	; 62
    4a42:	89 83       	std	Y+1, r24	; 0x01
	if(a != KEYPAD_U8NOTPRESSED && a != '=' && a != 'c' )
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	8f 3f       	cpi	r24, 0xFF	; 255
    4a48:	49 f0       	breq	.+18     	; 0x4a5c <IS_Input_Operation+0x24>
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	8d 33       	cpi	r24, 0x3D	; 61
    4a4e:	31 f0       	breq	.+12     	; 0x4a5c <IS_Input_Operation+0x24>
    4a50:	89 81       	ldd	r24, Y+1	; 0x01
    4a52:	83 36       	cpi	r24, 0x63	; 99
    4a54:	19 f0       	breq	.+6      	; 0x4a5c <IS_Input_Operation+0x24>
	{
		return 1;
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	8a 83       	std	Y+2, r24	; 0x02
    4a5a:	01 c0       	rjmp	.+2      	; 0x4a5e <IS_Input_Operation+0x26>
	}
	else
		return 0;
    4a5c:	1a 82       	std	Y+2, r1	; 0x02
    4a5e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a60:	0f 90       	pop	r0
    4a62:	0f 90       	pop	r0
    4a64:	cf 91       	pop	r28
    4a66:	df 91       	pop	r29
    4a68:	08 95       	ret

00004a6a <IS_Input_Equal>:
u8 IS_Input_Equal(u8 a)
{
    4a6a:	df 93       	push	r29
    4a6c:	cf 93       	push	r28
    4a6e:	00 d0       	rcall	.+0      	; 0x4a70 <IS_Input_Equal+0x6>
    4a70:	cd b7       	in	r28, 0x3d	; 61
    4a72:	de b7       	in	r29, 0x3e	; 62
    4a74:	89 83       	std	Y+1, r24	; 0x01
	if(a != KEYPAD_U8NOTPRESSED && a == '=' && a != 'c')
    4a76:	89 81       	ldd	r24, Y+1	; 0x01
    4a78:	8f 3f       	cpi	r24, 0xFF	; 255
    4a7a:	49 f0       	breq	.+18     	; 0x4a8e <IS_Input_Equal+0x24>
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	8d 33       	cpi	r24, 0x3D	; 61
    4a80:	31 f4       	brne	.+12     	; 0x4a8e <IS_Input_Equal+0x24>
    4a82:	89 81       	ldd	r24, Y+1	; 0x01
    4a84:	83 36       	cpi	r24, 0x63	; 99
    4a86:	19 f0       	breq	.+6      	; 0x4a8e <IS_Input_Equal+0x24>
	{
		return 1;
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	8a 83       	std	Y+2, r24	; 0x02
    4a8c:	01 c0       	rjmp	.+2      	; 0x4a90 <IS_Input_Equal+0x26>
	}
	else
		return 0;
    4a8e:	1a 82       	std	Y+2, r1	; 0x02
    4a90:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a92:	0f 90       	pop	r0
    4a94:	0f 90       	pop	r0
    4a96:	cf 91       	pop	r28
    4a98:	df 91       	pop	r29
    4a9a:	08 95       	ret

00004a9c <IS_Input_Clear>:

u8 IS_Input_Clear(u8 a)
{
    4a9c:	df 93       	push	r29
    4a9e:	cf 93       	push	r28
    4aa0:	00 d0       	rcall	.+0      	; 0x4aa2 <IS_Input_Clear+0x6>
    4aa2:	cd b7       	in	r28, 0x3d	; 61
    4aa4:	de b7       	in	r29, 0x3e	; 62
    4aa6:	89 83       	std	Y+1, r24	; 0x01
	if(a != KEYPAD_U8NOTPRESSED  && a == 'c')
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    4aac:	31 f0       	breq	.+12     	; 0x4aba <IS_Input_Clear+0x1e>
    4aae:	89 81       	ldd	r24, Y+1	; 0x01
    4ab0:	83 36       	cpi	r24, 0x63	; 99
    4ab2:	19 f4       	brne	.+6      	; 0x4aba <IS_Input_Clear+0x1e>
	{
		return 1;
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	8a 83       	std	Y+2, r24	; 0x02
    4ab8:	01 c0       	rjmp	.+2      	; 0x4abc <IS_Input_Clear+0x20>
	}
	else
		return 0;
    4aba:	1a 82       	std	Y+2, r1	; 0x02
    4abc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	cf 91       	pop	r28
    4ac4:	df 91       	pop	r29
    4ac6:	08 95       	ret

00004ac8 <swap_f32>:
void swap_f32(f32* x , f32* y)
{
    4ac8:	df 93       	push	r29
    4aca:	cf 93       	push	r28
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
    4ad0:	28 97       	sbiw	r28, 0x08	; 8
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	9e 83       	std	Y+6, r25	; 0x06
    4ade:	8d 83       	std	Y+5, r24	; 0x05
    4ae0:	78 87       	std	Y+8, r23	; 0x08
    4ae2:	6f 83       	std	Y+7, r22	; 0x07
	f32 temp = *x;
    4ae4:	ed 81       	ldd	r30, Y+5	; 0x05
    4ae6:	fe 81       	ldd	r31, Y+6	; 0x06
    4ae8:	80 81       	ld	r24, Z
    4aea:	91 81       	ldd	r25, Z+1	; 0x01
    4aec:	a2 81       	ldd	r26, Z+2	; 0x02
    4aee:	b3 81       	ldd	r27, Z+3	; 0x03
    4af0:	89 83       	std	Y+1, r24	; 0x01
    4af2:	9a 83       	std	Y+2, r25	; 0x02
    4af4:	ab 83       	std	Y+3, r26	; 0x03
    4af6:	bc 83       	std	Y+4, r27	; 0x04
	*x = *y;
    4af8:	ef 81       	ldd	r30, Y+7	; 0x07
    4afa:	f8 85       	ldd	r31, Y+8	; 0x08
    4afc:	80 81       	ld	r24, Z
    4afe:	91 81       	ldd	r25, Z+1	; 0x01
    4b00:	a2 81       	ldd	r26, Z+2	; 0x02
    4b02:	b3 81       	ldd	r27, Z+3	; 0x03
    4b04:	ed 81       	ldd	r30, Y+5	; 0x05
    4b06:	fe 81       	ldd	r31, Y+6	; 0x06
    4b08:	80 83       	st	Z, r24
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	a2 83       	std	Z+2, r26	; 0x02
    4b0e:	b3 83       	std	Z+3, r27	; 0x03
	*y = temp;
    4b10:	ef 81       	ldd	r30, Y+7	; 0x07
    4b12:	f8 85       	ldd	r31, Y+8	; 0x08
    4b14:	89 81       	ldd	r24, Y+1	; 0x01
    4b16:	9a 81       	ldd	r25, Y+2	; 0x02
    4b18:	ab 81       	ldd	r26, Y+3	; 0x03
    4b1a:	bc 81       	ldd	r27, Y+4	; 0x04
    4b1c:	80 83       	st	Z, r24
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	a2 83       	std	Z+2, r26	; 0x02
    4b22:	b3 83       	std	Z+3, r27	; 0x03
}
    4b24:	28 96       	adiw	r28, 0x08	; 8
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
    4b30:	cf 91       	pop	r28
    4b32:	df 91       	pop	r29
    4b34:	08 95       	ret

00004b36 <swap_U8>:
void swap_U8(u8* x , u8* y)
{
    4b36:	df 93       	push	r29
    4b38:	cf 93       	push	r28
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <swap_U8+0x6>
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <swap_U8+0x8>
    4b3e:	0f 92       	push	r0
    4b40:	cd b7       	in	r28, 0x3d	; 61
    4b42:	de b7       	in	r29, 0x3e	; 62
    4b44:	9b 83       	std	Y+3, r25	; 0x03
    4b46:	8a 83       	std	Y+2, r24	; 0x02
    4b48:	7d 83       	std	Y+5, r23	; 0x05
    4b4a:	6c 83       	std	Y+4, r22	; 0x04
	u8 temp = *x;
    4b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    4b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    4b50:	80 81       	ld	r24, Z
    4b52:	89 83       	std	Y+1, r24	; 0x01
	*x = *y;
    4b54:	ec 81       	ldd	r30, Y+4	; 0x04
    4b56:	fd 81       	ldd	r31, Y+5	; 0x05
    4b58:	80 81       	ld	r24, Z
    4b5a:	ea 81       	ldd	r30, Y+2	; 0x02
    4b5c:	fb 81       	ldd	r31, Y+3	; 0x03
    4b5e:	80 83       	st	Z, r24
	*y = temp;
    4b60:	ec 81       	ldd	r30, Y+4	; 0x04
    4b62:	fd 81       	ldd	r31, Y+5	; 0x05
    4b64:	89 81       	ldd	r24, Y+1	; 0x01
    4b66:	80 83       	st	Z, r24
}
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	0f 90       	pop	r0
    4b70:	0f 90       	pop	r0
    4b72:	cf 91       	pop	r28
    4b74:	df 91       	pop	r29
    4b76:	08 95       	ret

00004b78 <delete_elementArr>:
void delete_elementArr(f32* operant ,u8 elementIdx ,u8*last_operIdx)
{
    4b78:	df 93       	push	r29
    4b7a:	cf 93       	push	r28
    4b7c:	00 d0       	rcall	.+0      	; 0x4b7e <delete_elementArr+0x6>
    4b7e:	00 d0       	rcall	.+0      	; 0x4b80 <delete_elementArr+0x8>
    4b80:	00 d0       	rcall	.+0      	; 0x4b82 <delete_elementArr+0xa>
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	9b 83       	std	Y+3, r25	; 0x03
    4b88:	8a 83       	std	Y+2, r24	; 0x02
    4b8a:	6c 83       	std	Y+4, r22	; 0x04
    4b8c:	5e 83       	std	Y+6, r21	; 0x06
    4b8e:	4d 83       	std	Y+5, r20	; 0x05
	u8 i = elementIdx;
    4b90:	8c 81       	ldd	r24, Y+4	; 0x04
    4b92:	89 83       	std	Y+1, r24	; 0x01
    4b94:	21 c0       	rjmp	.+66     	; 0x4bd8 <delete_elementArr+0x60>
	/*O(N)*/
	for(; i < *last_operIdx ; ++i)
		swap_f32(&operant[i] , &operant[i+1]);
    4b96:	89 81       	ldd	r24, Y+1	; 0x01
    4b98:	88 2f       	mov	r24, r24
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	9c 01       	movw	r18, r24
    4b9e:	22 0f       	add	r18, r18
    4ba0:	33 1f       	adc	r19, r19
    4ba2:	22 0f       	add	r18, r18
    4ba4:	33 1f       	adc	r19, r19
    4ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    4baa:	ac 01       	movw	r20, r24
    4bac:	42 0f       	add	r20, r18
    4bae:	53 1f       	adc	r21, r19
    4bb0:	89 81       	ldd	r24, Y+1	; 0x01
    4bb2:	88 2f       	mov	r24, r24
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	01 96       	adiw	r24, 0x01	; 1
    4bb8:	9c 01       	movw	r18, r24
    4bba:	22 0f       	add	r18, r18
    4bbc:	33 1f       	adc	r19, r19
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bc6:	28 0f       	add	r18, r24
    4bc8:	39 1f       	adc	r19, r25
    4bca:	ca 01       	movw	r24, r20
    4bcc:	b9 01       	movw	r22, r18
    4bce:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <swap_f32>
}
void delete_elementArr(f32* operant ,u8 elementIdx ,u8*last_operIdx)
{
	u8 i = elementIdx;
	/*O(N)*/
	for(; i < *last_operIdx ; ++i)
    4bd2:	89 81       	ldd	r24, Y+1	; 0x01
    4bd4:	8f 5f       	subi	r24, 0xFF	; 255
    4bd6:	89 83       	std	Y+1, r24	; 0x01
    4bd8:	ed 81       	ldd	r30, Y+5	; 0x05
    4bda:	fe 81       	ldd	r31, Y+6	; 0x06
    4bdc:	90 81       	ld	r25, Z
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	89 17       	cp	r24, r25
    4be2:	c8 f2       	brcs	.-78     	; 0x4b96 <delete_elementArr+0x1e>
		swap_f32(&operant[i] , &operant[i+1]);
	(*last_operIdx) -= 1;
    4be4:	ed 81       	ldd	r30, Y+5	; 0x05
    4be6:	fe 81       	ldd	r31, Y+6	; 0x06
    4be8:	80 81       	ld	r24, Z
    4bea:	81 50       	subi	r24, 0x01	; 1
    4bec:	ed 81       	ldd	r30, Y+5	; 0x05
    4bee:	fe 81       	ldd	r31, Y+6	; 0x06
    4bf0:	80 83       	st	Z, r24
}
    4bf2:	26 96       	adiw	r28, 0x06	; 6
    4bf4:	0f b6       	in	r0, 0x3f	; 63
    4bf6:	f8 94       	cli
    4bf8:	de bf       	out	0x3e, r29	; 62
    4bfa:	0f be       	out	0x3f, r0	; 63
    4bfc:	cd bf       	out	0x3d, r28	; 61
    4bfe:	cf 91       	pop	r28
    4c00:	df 91       	pop	r29
    4c02:	08 95       	ret

00004c04 <delete_elementu8Arr>:

void delete_elementu8Arr(u8* operation ,u8 elementIdx ,u8*last_operationIdx)
{
    4c04:	df 93       	push	r29
    4c06:	cf 93       	push	r28
    4c08:	00 d0       	rcall	.+0      	; 0x4c0a <delete_elementu8Arr+0x6>
    4c0a:	00 d0       	rcall	.+0      	; 0x4c0c <delete_elementu8Arr+0x8>
    4c0c:	00 d0       	rcall	.+0      	; 0x4c0e <delete_elementu8Arr+0xa>
    4c0e:	cd b7       	in	r28, 0x3d	; 61
    4c10:	de b7       	in	r29, 0x3e	; 62
    4c12:	9b 83       	std	Y+3, r25	; 0x03
    4c14:	8a 83       	std	Y+2, r24	; 0x02
    4c16:	6c 83       	std	Y+4, r22	; 0x04
    4c18:	5e 83       	std	Y+6, r21	; 0x06
    4c1a:	4d 83       	std	Y+5, r20	; 0x05
	u8 i = elementIdx;
    4c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c1e:	89 83       	std	Y+1, r24	; 0x01
    4c20:	19 c0       	rjmp	.+50     	; 0x4c54 <delete_elementu8Arr+0x50>
	/*O(N)*/
	for(; i < *last_operationIdx ; ++i)
		swap_U8(&operation[i] , &operation[i+1]);
    4c22:	89 81       	ldd	r24, Y+1	; 0x01
    4c24:	28 2f       	mov	r18, r24
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2c:	ac 01       	movw	r20, r24
    4c2e:	42 0f       	add	r20, r18
    4c30:	53 1f       	adc	r21, r19
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	9c 01       	movw	r18, r24
    4c3a:	2f 5f       	subi	r18, 0xFF	; 255
    4c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c40:	9b 81       	ldd	r25, Y+3	; 0x03
    4c42:	28 0f       	add	r18, r24
    4c44:	39 1f       	adc	r19, r25
    4c46:	ca 01       	movw	r24, r20
    4c48:	b9 01       	movw	r22, r18
    4c4a:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <swap_U8>

void delete_elementu8Arr(u8* operation ,u8 elementIdx ,u8*last_operationIdx)
{
	u8 i = elementIdx;
	/*O(N)*/
	for(; i < *last_operationIdx ; ++i)
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
    4c50:	8f 5f       	subi	r24, 0xFF	; 255
    4c52:	89 83       	std	Y+1, r24	; 0x01
    4c54:	ed 81       	ldd	r30, Y+5	; 0x05
    4c56:	fe 81       	ldd	r31, Y+6	; 0x06
    4c58:	90 81       	ld	r25, Z
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
    4c5c:	89 17       	cp	r24, r25
    4c5e:	08 f3       	brcs	.-62     	; 0x4c22 <delete_elementu8Arr+0x1e>
		swap_U8(&operation[i] , &operation[i+1]);
	(*last_operationIdx) -= 1;
    4c60:	ed 81       	ldd	r30, Y+5	; 0x05
    4c62:	fe 81       	ldd	r31, Y+6	; 0x06
    4c64:	80 81       	ld	r24, Z
    4c66:	81 50       	subi	r24, 0x01	; 1
    4c68:	ed 81       	ldd	r30, Y+5	; 0x05
    4c6a:	fe 81       	ldd	r31, Y+6	; 0x06
    4c6c:	80 83       	st	Z, r24
}
    4c6e:	26 96       	adiw	r28, 0x06	; 6
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	cd bf       	out	0x3d, r28	; 61
    4c7a:	cf 91       	pop	r28
    4c7c:	df 91       	pop	r29
    4c7e:	08 95       	ret

00004c80 <Calcualtor>:

u8 Calcualtor(f32* operant , u8* operation ,u8 last_operIdx , u8 last_operationIdx ,f32* Ptr_ans)
{
    4c80:	cf 92       	push	r12
    4c82:	df 92       	push	r13
    4c84:	ef 92       	push	r14
    4c86:	ff 92       	push	r15
    4c88:	0f 93       	push	r16
    4c8a:	1f 93       	push	r17
    4c8c:	df 93       	push	r29
    4c8e:	cf 93       	push	r28
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	2c 97       	sbiw	r28, 0x0c	; 12
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	9d 83       	std	Y+5, r25	; 0x05
    4ca2:	8c 83       	std	Y+4, r24	; 0x04
    4ca4:	7f 83       	std	Y+7, r23	; 0x07
    4ca6:	6e 83       	std	Y+6, r22	; 0x06
    4ca8:	48 87       	std	Y+8, r20	; 0x08
    4caa:	29 87       	std	Y+9, r18	; 0x09
    4cac:	1b 87       	std	Y+11, r17	; 0x0b
    4cae:	0a 87       	std	Y+10, r16	; 0x0a
	u8 ret = 0;
    4cb0:	1b 82       	std	Y+3, r1	; 0x03
	u8 operantCounter = 0;
    4cb2:	1a 82       	std	Y+2, r1	; 0x02
	u8 operationCounter = 0;
    4cb4:	19 82       	std	Y+1, r1	; 0x01
	*Ptr_ans = 0;
    4cb6:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cb8:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	a0 e0       	ldi	r26, 0x00	; 0
    4cc0:	b0 e0       	ldi	r27, 0x00	; 0
    4cc2:	80 83       	st	Z, r24
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	a2 83       	std	Z+2, r26	; 0x02
    4cc8:	b3 83       	std	Z+3, r27	; 0x03
    4cca:	ea c0       	rjmp	.+468    	; 0x4ea0 <Calcualtor+0x220>
	/*O(N^2) */
	for(; operantCounter < last_operIdx && MultiDiv_Flag ;)
	{
		if(operation[operationCounter] == '*')
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	28 2f       	mov	r18, r24
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    4cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	e2 0f       	add	r30, r18
    4cda:	f3 1f       	adc	r31, r19
    4cdc:	80 81       	ld	r24, Z
    4cde:	8a 32       	cpi	r24, 0x2A	; 42
    4ce0:	09 f0       	breq	.+2      	; 0x4ce4 <Calcualtor+0x64>
    4ce2:	51 c0       	rjmp	.+162    	; 0x4d86 <Calcualtor+0x106>
		{
			operant[operantCounter] *= operant[operantCounter+1];
    4ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce6:	88 2f       	mov	r24, r24
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	9c 01       	movw	r18, r24
    4cec:	22 0f       	add	r18, r18
    4cee:	33 1f       	adc	r19, r19
    4cf0:	22 0f       	add	r18, r18
    4cf2:	33 1f       	adc	r19, r19
    4cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cf8:	6c 01       	movw	r12, r24
    4cfa:	c2 0e       	add	r12, r18
    4cfc:	d3 1e       	adc	r13, r19
    4cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4d00:	88 2f       	mov	r24, r24
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	9c 01       	movw	r18, r24
    4d06:	22 0f       	add	r18, r18
    4d08:	33 1f       	adc	r19, r19
    4d0a:	22 0f       	add	r18, r18
    4d0c:	33 1f       	adc	r19, r19
    4d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d10:	9d 81       	ldd	r25, Y+5	; 0x05
    4d12:	fc 01       	movw	r30, r24
    4d14:	e2 0f       	add	r30, r18
    4d16:	f3 1f       	adc	r31, r19
    4d18:	e0 80       	ld	r14, Z
    4d1a:	f1 80       	ldd	r15, Z+1	; 0x01
    4d1c:	02 81       	ldd	r16, Z+2	; 0x02
    4d1e:	13 81       	ldd	r17, Z+3	; 0x03
    4d20:	8a 81       	ldd	r24, Y+2	; 0x02
    4d22:	88 2f       	mov	r24, r24
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	01 96       	adiw	r24, 0x01	; 1
    4d28:	9c 01       	movw	r18, r24
    4d2a:	22 0f       	add	r18, r18
    4d2c:	33 1f       	adc	r19, r19
    4d2e:	22 0f       	add	r18, r18
    4d30:	33 1f       	adc	r19, r19
    4d32:	8c 81       	ldd	r24, Y+4	; 0x04
    4d34:	9d 81       	ldd	r25, Y+5	; 0x05
    4d36:	fc 01       	movw	r30, r24
    4d38:	e2 0f       	add	r30, r18
    4d3a:	f3 1f       	adc	r31, r19
    4d3c:	20 81       	ld	r18, Z
    4d3e:	31 81       	ldd	r19, Z+1	; 0x01
    4d40:	42 81       	ldd	r20, Z+2	; 0x02
    4d42:	53 81       	ldd	r21, Z+3	; 0x03
    4d44:	c8 01       	movw	r24, r16
    4d46:	b7 01       	movw	r22, r14
    4d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	f6 01       	movw	r30, r12
    4d52:	80 83       	st	Z, r24
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	a2 83       	std	Z+2, r26	; 0x02
    4d58:	b3 83       	std	Z+3, r27	; 0x03
			delete_elementArr(operant ,operantCounter+1,&last_operIdx);
    4d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d5c:	48 2f       	mov	r20, r24
    4d5e:	4f 5f       	subi	r20, 0xFF	; 255
    4d60:	8c 81       	ldd	r24, Y+4	; 0x04
    4d62:	9d 81       	ldd	r25, Y+5	; 0x05
    4d64:	9e 01       	movw	r18, r28
    4d66:	28 5f       	subi	r18, 0xF8	; 248
    4d68:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6a:	64 2f       	mov	r22, r20
    4d6c:	a9 01       	movw	r20, r18
    4d6e:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <delete_elementArr>
			delete_elementu8Arr(operation,operationCounter,&last_operationIdx);
    4d72:	8e 81       	ldd	r24, Y+6	; 0x06
    4d74:	9f 81       	ldd	r25, Y+7	; 0x07
    4d76:	9e 01       	movw	r18, r28
    4d78:	27 5f       	subi	r18, 0xF7	; 247
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	69 81       	ldd	r22, Y+1	; 0x01
    4d7e:	a9 01       	movw	r20, r18
    4d80:	0e 94 02 26 	call	0x4c04	; 0x4c04 <delete_elementu8Arr>
    4d84:	8d c0       	rjmp	.+282    	; 0x4ea0 <Calcualtor+0x220>
		}
		else if (operation[operationCounter] == '/')
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	28 2f       	mov	r18, r24
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4d90:	fc 01       	movw	r30, r24
    4d92:	e2 0f       	add	r30, r18
    4d94:	f3 1f       	adc	r31, r19
    4d96:	80 81       	ld	r24, Z
    4d98:	8f 32       	cpi	r24, 0x2F	; 47
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <Calcualtor+0x11e>
    4d9c:	7b c0       	rjmp	.+246    	; 0x4e94 <Calcualtor+0x214>
		{
			if(operant[operantCounter+1] == 0)
    4d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4da0:	88 2f       	mov	r24, r24
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	01 96       	adiw	r24, 0x01	; 1
    4da6:	9c 01       	movw	r18, r24
    4da8:	22 0f       	add	r18, r18
    4daa:	33 1f       	adc	r19, r19
    4dac:	22 0f       	add	r18, r18
    4dae:	33 1f       	adc	r19, r19
    4db0:	8c 81       	ldd	r24, Y+4	; 0x04
    4db2:	9d 81       	ldd	r25, Y+5	; 0x05
    4db4:	fc 01       	movw	r30, r24
    4db6:	e2 0f       	add	r30, r18
    4db8:	f3 1f       	adc	r31, r19
    4dba:	80 81       	ld	r24, Z
    4dbc:	91 81       	ldd	r25, Z+1	; 0x01
    4dbe:	a2 81       	ldd	r26, Z+2	; 0x02
    4dc0:	b3 81       	ldd	r27, Z+3	; 0x03
    4dc2:	bc 01       	movw	r22, r24
    4dc4:	cd 01       	movw	r24, r26
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 e0       	ldi	r20, 0x00	; 0
    4dcc:	50 e0       	ldi	r21, 0x00	; 0
    4dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    4dd2:	88 23       	and	r24, r24
    4dd4:	71 f4       	brne	.+28     	; 0x4df2 <Calcualtor+0x172>
			{
				*Ptr_ans = 0;
    4dd6:	ea 85       	ldd	r30, Y+10	; 0x0a
    4dd8:	fb 85       	ldd	r31, Y+11	; 0x0b
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	a0 e0       	ldi	r26, 0x00	; 0
    4de0:	b0 e0       	ldi	r27, 0x00	; 0
    4de2:	80 83       	st	Z, r24
    4de4:	91 83       	std	Z+1, r25	; 0x01
    4de6:	a2 83       	std	Z+2, r26	; 0x02
    4de8:	b3 83       	std	Z+3, r27	; 0x03
				ret = 0;
    4dea:	1b 82       	std	Y+3, r1	; 0x03
				return ret;
    4dec:	fb 81       	ldd	r31, Y+3	; 0x03
    4dee:	fc 87       	std	Y+12, r31	; 0x0c
    4df0:	45 c1       	rjmp	.+650    	; 0x507c <Calcualtor+0x3fc>
			}
			operant[operantCounter] /= operant[operantCounter+1];
    4df2:	8a 81       	ldd	r24, Y+2	; 0x02
    4df4:	88 2f       	mov	r24, r24
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	9c 01       	movw	r18, r24
    4dfa:	22 0f       	add	r18, r18
    4dfc:	33 1f       	adc	r19, r19
    4dfe:	22 0f       	add	r18, r18
    4e00:	33 1f       	adc	r19, r19
    4e02:	8c 81       	ldd	r24, Y+4	; 0x04
    4e04:	9d 81       	ldd	r25, Y+5	; 0x05
    4e06:	6c 01       	movw	r12, r24
    4e08:	c2 0e       	add	r12, r18
    4e0a:	d3 1e       	adc	r13, r19
    4e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0e:	88 2f       	mov	r24, r24
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	9c 01       	movw	r18, r24
    4e14:	22 0f       	add	r18, r18
    4e16:	33 1f       	adc	r19, r19
    4e18:	22 0f       	add	r18, r18
    4e1a:	33 1f       	adc	r19, r19
    4e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    4e20:	fc 01       	movw	r30, r24
    4e22:	e2 0f       	add	r30, r18
    4e24:	f3 1f       	adc	r31, r19
    4e26:	e0 80       	ld	r14, Z
    4e28:	f1 80       	ldd	r15, Z+1	; 0x01
    4e2a:	02 81       	ldd	r16, Z+2	; 0x02
    4e2c:	13 81       	ldd	r17, Z+3	; 0x03
    4e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e30:	88 2f       	mov	r24, r24
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	01 96       	adiw	r24, 0x01	; 1
    4e36:	9c 01       	movw	r18, r24
    4e38:	22 0f       	add	r18, r18
    4e3a:	33 1f       	adc	r19, r19
    4e3c:	22 0f       	add	r18, r18
    4e3e:	33 1f       	adc	r19, r19
    4e40:	8c 81       	ldd	r24, Y+4	; 0x04
    4e42:	9d 81       	ldd	r25, Y+5	; 0x05
    4e44:	fc 01       	movw	r30, r24
    4e46:	e2 0f       	add	r30, r18
    4e48:	f3 1f       	adc	r31, r19
    4e4a:	20 81       	ld	r18, Z
    4e4c:	31 81       	ldd	r19, Z+1	; 0x01
    4e4e:	42 81       	ldd	r20, Z+2	; 0x02
    4e50:	53 81       	ldd	r21, Z+3	; 0x03
    4e52:	c8 01       	movw	r24, r16
    4e54:	b7 01       	movw	r22, r14
    4e56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	f6 01       	movw	r30, r12
    4e60:	80 83       	st	Z, r24
    4e62:	91 83       	std	Z+1, r25	; 0x01
    4e64:	a2 83       	std	Z+2, r26	; 0x02
    4e66:	b3 83       	std	Z+3, r27	; 0x03
			delete_elementArr(operant ,operantCounter+1,&last_operIdx);
    4e68:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6a:	48 2f       	mov	r20, r24
    4e6c:	4f 5f       	subi	r20, 0xFF	; 255
    4e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e70:	9d 81       	ldd	r25, Y+5	; 0x05
    4e72:	9e 01       	movw	r18, r28
    4e74:	28 5f       	subi	r18, 0xF8	; 248
    4e76:	3f 4f       	sbci	r19, 0xFF	; 255
    4e78:	64 2f       	mov	r22, r20
    4e7a:	a9 01       	movw	r20, r18
    4e7c:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <delete_elementArr>
			delete_elementu8Arr(operation,operationCounter,&last_operationIdx);
    4e80:	8e 81       	ldd	r24, Y+6	; 0x06
    4e82:	9f 81       	ldd	r25, Y+7	; 0x07
    4e84:	9e 01       	movw	r18, r28
    4e86:	27 5f       	subi	r18, 0xF7	; 247
    4e88:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8a:	69 81       	ldd	r22, Y+1	; 0x01
    4e8c:	a9 01       	movw	r20, r18
    4e8e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <delete_elementu8Arr>
    4e92:	06 c0       	rjmp	.+12     	; 0x4ea0 <Calcualtor+0x220>
		}
		else
		{
				++operantCounter;
    4e94:	8a 81       	ldd	r24, Y+2	; 0x02
    4e96:	8f 5f       	subi	r24, 0xFF	; 255
    4e98:	8a 83       	std	Y+2, r24	; 0x02
				++operationCounter;
    4e9a:	89 81       	ldd	r24, Y+1	; 0x01
    4e9c:	8f 5f       	subi	r24, 0xFF	; 255
    4e9e:	89 83       	std	Y+1, r24	; 0x01
	u8 ret = 0;
	u8 operantCounter = 0;
	u8 operationCounter = 0;
	*Ptr_ans = 0;
	/*O(N^2) */
	for(; operantCounter < last_operIdx && MultiDiv_Flag ;)
    4ea0:	98 85       	ldd	r25, Y+8	; 0x08
    4ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea4:	89 17       	cp	r24, r25
    4ea6:	28 f4       	brcc	.+10     	; 0x4eb2 <Calcualtor+0x232>
    4ea8:	80 91 f8 01 	lds	r24, 0x01F8
    4eac:	88 23       	and	r24, r24
    4eae:	09 f0       	breq	.+2      	; 0x4eb2 <Calcualtor+0x232>
    4eb0:	0d cf       	rjmp	.-486    	; 0x4ccc <Calcualtor+0x4c>
		{
				++operantCounter;
				++operationCounter;
		}
	}
	if(PlusMinus_Flag == 0)
    4eb2:	80 91 f9 01 	lds	r24, 0x01F9
    4eb6:	88 23       	and	r24, r24
    4eb8:	e1 f4       	brne	.+56     	; 0x4ef2 <Calcualtor+0x272>
	{
		ret = 1;
    4eba:	81 e0       	ldi	r24, 0x01	; 1
    4ebc:	8b 83       	std	Y+3, r24	; 0x03
		*Ptr_ans = operant[operantCounter];
    4ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec0:	88 2f       	mov	r24, r24
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	9c 01       	movw	r18, r24
    4ec6:	22 0f       	add	r18, r18
    4ec8:	33 1f       	adc	r19, r19
    4eca:	22 0f       	add	r18, r18
    4ecc:	33 1f       	adc	r19, r19
    4ece:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	e2 0f       	add	r30, r18
    4ed6:	f3 1f       	adc	r31, r19
    4ed8:	80 81       	ld	r24, Z
    4eda:	91 81       	ldd	r25, Z+1	; 0x01
    4edc:	a2 81       	ldd	r26, Z+2	; 0x02
    4ede:	b3 81       	ldd	r27, Z+3	; 0x03
    4ee0:	ea 85       	ldd	r30, Y+10	; 0x0a
    4ee2:	fb 85       	ldd	r31, Y+11	; 0x0b
    4ee4:	80 83       	st	Z, r24
    4ee6:	91 83       	std	Z+1, r25	; 0x01
    4ee8:	a2 83       	std	Z+2, r26	; 0x02
    4eea:	b3 83       	std	Z+3, r27	; 0x03
		return ret;
    4eec:	fb 81       	ldd	r31, Y+3	; 0x03
    4eee:	fc 87       	std	Y+12, r31	; 0x0c
    4ef0:	c5 c0       	rjmp	.+394    	; 0x507c <Calcualtor+0x3fc>
	}
	else{
		/*nothing*/
	}
	/*O(N)*/
	for(operantCounter = 0 , operationCounter = 0; operantCounter < last_operIdx ;)
    4ef2:	1a 82       	std	Y+2, r1	; 0x02
    4ef4:	19 82       	std	Y+1, r1	; 0x01
    4ef6:	a4 c0       	rjmp	.+328    	; 0x5040 <Calcualtor+0x3c0>
	{
		if(operation[operationCounter] == '+')
    4ef8:	89 81       	ldd	r24, Y+1	; 0x01
    4efa:	28 2f       	mov	r18, r24
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	8e 81       	ldd	r24, Y+6	; 0x06
    4f00:	9f 81       	ldd	r25, Y+7	; 0x07
    4f02:	fc 01       	movw	r30, r24
    4f04:	e2 0f       	add	r30, r18
    4f06:	f3 1f       	adc	r31, r19
    4f08:	80 81       	ld	r24, Z
    4f0a:	8b 32       	cpi	r24, 0x2B	; 43
    4f0c:	09 f0       	breq	.+2      	; 0x4f10 <Calcualtor+0x290>
    4f0e:	45 c0       	rjmp	.+138    	; 0x4f9a <Calcualtor+0x31a>
		{
			operant[operantCounter+1] +=  operant[operantCounter];
    4f10:	8a 81       	ldd	r24, Y+2	; 0x02
    4f12:	88 2f       	mov	r24, r24
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	01 96       	adiw	r24, 0x01	; 1
    4f18:	9c 01       	movw	r18, r24
    4f1a:	22 0f       	add	r18, r18
    4f1c:	33 1f       	adc	r19, r19
    4f1e:	22 0f       	add	r18, r18
    4f20:	33 1f       	adc	r19, r19
    4f22:	8c 81       	ldd	r24, Y+4	; 0x04
    4f24:	9d 81       	ldd	r25, Y+5	; 0x05
    4f26:	6c 01       	movw	r12, r24
    4f28:	c2 0e       	add	r12, r18
    4f2a:	d3 1e       	adc	r13, r19
    4f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2e:	88 2f       	mov	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	01 96       	adiw	r24, 0x01	; 1
    4f34:	9c 01       	movw	r18, r24
    4f36:	22 0f       	add	r18, r18
    4f38:	33 1f       	adc	r19, r19
    4f3a:	22 0f       	add	r18, r18
    4f3c:	33 1f       	adc	r19, r19
    4f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f40:	9d 81       	ldd	r25, Y+5	; 0x05
    4f42:	fc 01       	movw	r30, r24
    4f44:	e2 0f       	add	r30, r18
    4f46:	f3 1f       	adc	r31, r19
    4f48:	e0 80       	ld	r14, Z
    4f4a:	f1 80       	ldd	r15, Z+1	; 0x01
    4f4c:	02 81       	ldd	r16, Z+2	; 0x02
    4f4e:	13 81       	ldd	r17, Z+3	; 0x03
    4f50:	8a 81       	ldd	r24, Y+2	; 0x02
    4f52:	88 2f       	mov	r24, r24
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	9c 01       	movw	r18, r24
    4f58:	22 0f       	add	r18, r18
    4f5a:	33 1f       	adc	r19, r19
    4f5c:	22 0f       	add	r18, r18
    4f5e:	33 1f       	adc	r19, r19
    4f60:	8c 81       	ldd	r24, Y+4	; 0x04
    4f62:	9d 81       	ldd	r25, Y+5	; 0x05
    4f64:	fc 01       	movw	r30, r24
    4f66:	e2 0f       	add	r30, r18
    4f68:	f3 1f       	adc	r31, r19
    4f6a:	20 81       	ld	r18, Z
    4f6c:	31 81       	ldd	r19, Z+1	; 0x01
    4f6e:	42 81       	ldd	r20, Z+2	; 0x02
    4f70:	53 81       	ldd	r21, Z+3	; 0x03
    4f72:	c8 01       	movw	r24, r16
    4f74:	b7 01       	movw	r22, r14
    4f76:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	f6 01       	movw	r30, r12
    4f80:	80 83       	st	Z, r24
    4f82:	91 83       	std	Z+1, r25	; 0x01
    4f84:	a2 83       	std	Z+2, r26	; 0x02
    4f86:	b3 83       	std	Z+3, r27	; 0x03

			++operantCounter;
    4f88:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8a:	8f 5f       	subi	r24, 0xFF	; 255
    4f8c:	8a 83       	std	Y+2, r24	; 0x02
			++operationCounter;
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	8f 5f       	subi	r24, 0xFF	; 255
    4f92:	89 83       	std	Y+1, r24	; 0x01
			ret = 1;
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	8b 83       	std	Y+3, r24	; 0x03
    4f98:	53 c0       	rjmp	.+166    	; 0x5040 <Calcualtor+0x3c0>
		}
		else if (operation[operationCounter] == '-')
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	28 2f       	mov	r18, r24
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	8e 81       	ldd	r24, Y+6	; 0x06
    4fa2:	9f 81       	ldd	r25, Y+7	; 0x07
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	e2 0f       	add	r30, r18
    4fa8:	f3 1f       	adc	r31, r19
    4faa:	80 81       	ld	r24, Z
    4fac:	8d 32       	cpi	r24, 0x2D	; 45
    4fae:	09 f0       	breq	.+2      	; 0x4fb2 <Calcualtor+0x332>
    4fb0:	45 c0       	rjmp	.+138    	; 0x503c <Calcualtor+0x3bc>
		{
			operant[operantCounter+1] =  (operant[operantCounter] - operant[operantCounter+1]);
    4fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb4:	88 2f       	mov	r24, r24
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	01 96       	adiw	r24, 0x01	; 1
    4fba:	9c 01       	movw	r18, r24
    4fbc:	22 0f       	add	r18, r18
    4fbe:	33 1f       	adc	r19, r19
    4fc0:	22 0f       	add	r18, r18
    4fc2:	33 1f       	adc	r19, r19
    4fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    4fc8:	6c 01       	movw	r12, r24
    4fca:	c2 0e       	add	r12, r18
    4fcc:	d3 1e       	adc	r13, r19
    4fce:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd0:	88 2f       	mov	r24, r24
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	9c 01       	movw	r18, r24
    4fd6:	22 0f       	add	r18, r18
    4fd8:	33 1f       	adc	r19, r19
    4fda:	22 0f       	add	r18, r18
    4fdc:	33 1f       	adc	r19, r19
    4fde:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	e2 0f       	add	r30, r18
    4fe6:	f3 1f       	adc	r31, r19
    4fe8:	e0 80       	ld	r14, Z
    4fea:	f1 80       	ldd	r15, Z+1	; 0x01
    4fec:	02 81       	ldd	r16, Z+2	; 0x02
    4fee:	13 81       	ldd	r17, Z+3	; 0x03
    4ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff2:	88 2f       	mov	r24, r24
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	01 96       	adiw	r24, 0x01	; 1
    4ff8:	9c 01       	movw	r18, r24
    4ffa:	22 0f       	add	r18, r18
    4ffc:	33 1f       	adc	r19, r19
    4ffe:	22 0f       	add	r18, r18
    5000:	33 1f       	adc	r19, r19
    5002:	8c 81       	ldd	r24, Y+4	; 0x04
    5004:	9d 81       	ldd	r25, Y+5	; 0x05
    5006:	fc 01       	movw	r30, r24
    5008:	e2 0f       	add	r30, r18
    500a:	f3 1f       	adc	r31, r19
    500c:	20 81       	ld	r18, Z
    500e:	31 81       	ldd	r19, Z+1	; 0x01
    5010:	42 81       	ldd	r20, Z+2	; 0x02
    5012:	53 81       	ldd	r21, Z+3	; 0x03
    5014:	c8 01       	movw	r24, r16
    5016:	b7 01       	movw	r22, r14
    5018:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	f6 01       	movw	r30, r12
    5022:	80 83       	st	Z, r24
    5024:	91 83       	std	Z+1, r25	; 0x01
    5026:	a2 83       	std	Z+2, r26	; 0x02
    5028:	b3 83       	std	Z+3, r27	; 0x03
			++operantCounter;
    502a:	8a 81       	ldd	r24, Y+2	; 0x02
    502c:	8f 5f       	subi	r24, 0xFF	; 255
    502e:	8a 83       	std	Y+2, r24	; 0x02
			++operationCounter;
    5030:	89 81       	ldd	r24, Y+1	; 0x01
    5032:	8f 5f       	subi	r24, 0xFF	; 255
    5034:	89 83       	std	Y+1, r24	; 0x01
			ret = 1;
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	8b 83       	std	Y+3, r24	; 0x03
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <Calcualtor+0x3c0>
		}
		else
		{
			ret = 0;
    503c:	1b 82       	std	Y+3, r1	; 0x03
    503e:	05 c0       	rjmp	.+10     	; 0x504a <Calcualtor+0x3ca>
	}
	else{
		/*nothing*/
	}
	/*O(N)*/
	for(operantCounter = 0 , operationCounter = 0; operantCounter < last_operIdx ;)
    5040:	98 85       	ldd	r25, Y+8	; 0x08
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	89 17       	cp	r24, r25
    5046:	08 f4       	brcc	.+2      	; 0x504a <Calcualtor+0x3ca>
    5048:	57 cf       	rjmp	.-338    	; 0x4ef8 <Calcualtor+0x278>
		{
			ret = 0;
			break;
		}
	}
	*Ptr_ans = operant[operantCounter];
    504a:	8a 81       	ldd	r24, Y+2	; 0x02
    504c:	88 2f       	mov	r24, r24
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	9c 01       	movw	r18, r24
    5052:	22 0f       	add	r18, r18
    5054:	33 1f       	adc	r19, r19
    5056:	22 0f       	add	r18, r18
    5058:	33 1f       	adc	r19, r19
    505a:	8c 81       	ldd	r24, Y+4	; 0x04
    505c:	9d 81       	ldd	r25, Y+5	; 0x05
    505e:	fc 01       	movw	r30, r24
    5060:	e2 0f       	add	r30, r18
    5062:	f3 1f       	adc	r31, r19
    5064:	80 81       	ld	r24, Z
    5066:	91 81       	ldd	r25, Z+1	; 0x01
    5068:	a2 81       	ldd	r26, Z+2	; 0x02
    506a:	b3 81       	ldd	r27, Z+3	; 0x03
    506c:	ea 85       	ldd	r30, Y+10	; 0x0a
    506e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5070:	80 83       	st	Z, r24
    5072:	91 83       	std	Z+1, r25	; 0x01
    5074:	a2 83       	std	Z+2, r26	; 0x02
    5076:	b3 83       	std	Z+3, r27	; 0x03

	return ret;
    5078:	fb 81       	ldd	r31, Y+3	; 0x03
    507a:	fc 87       	std	Y+12, r31	; 0x0c
    507c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    507e:	2c 96       	adiw	r28, 0x0c	; 12
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	de bf       	out	0x3e, r29	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	cd bf       	out	0x3d, r28	; 61
    508a:	cf 91       	pop	r28
    508c:	df 91       	pop	r29
    508e:	1f 91       	pop	r17
    5090:	0f 91       	pop	r16
    5092:	ff 90       	pop	r15
    5094:	ef 90       	pop	r14
    5096:	df 90       	pop	r13
    5098:	cf 90       	pop	r12
    509a:	08 95       	ret

0000509c <__udivmodsi4>:
    509c:	a1 e2       	ldi	r26, 0x21	; 33
    509e:	1a 2e       	mov	r1, r26
    50a0:	aa 1b       	sub	r26, r26
    50a2:	bb 1b       	sub	r27, r27
    50a4:	fd 01       	movw	r30, r26
    50a6:	0d c0       	rjmp	.+26     	; 0x50c2 <__udivmodsi4_ep>

000050a8 <__udivmodsi4_loop>:
    50a8:	aa 1f       	adc	r26, r26
    50aa:	bb 1f       	adc	r27, r27
    50ac:	ee 1f       	adc	r30, r30
    50ae:	ff 1f       	adc	r31, r31
    50b0:	a2 17       	cp	r26, r18
    50b2:	b3 07       	cpc	r27, r19
    50b4:	e4 07       	cpc	r30, r20
    50b6:	f5 07       	cpc	r31, r21
    50b8:	20 f0       	brcs	.+8      	; 0x50c2 <__udivmodsi4_ep>
    50ba:	a2 1b       	sub	r26, r18
    50bc:	b3 0b       	sbc	r27, r19
    50be:	e4 0b       	sbc	r30, r20
    50c0:	f5 0b       	sbc	r31, r21

000050c2 <__udivmodsi4_ep>:
    50c2:	66 1f       	adc	r22, r22
    50c4:	77 1f       	adc	r23, r23
    50c6:	88 1f       	adc	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	1a 94       	dec	r1
    50cc:	69 f7       	brne	.-38     	; 0x50a8 <__udivmodsi4_loop>
    50ce:	60 95       	com	r22
    50d0:	70 95       	com	r23
    50d2:	80 95       	com	r24
    50d4:	90 95       	com	r25
    50d6:	9b 01       	movw	r18, r22
    50d8:	ac 01       	movw	r20, r24
    50da:	bd 01       	movw	r22, r26
    50dc:	cf 01       	movw	r24, r30
    50de:	08 95       	ret

000050e0 <__prologue_saves__>:
    50e0:	2f 92       	push	r2
    50e2:	3f 92       	push	r3
    50e4:	4f 92       	push	r4
    50e6:	5f 92       	push	r5
    50e8:	6f 92       	push	r6
    50ea:	7f 92       	push	r7
    50ec:	8f 92       	push	r8
    50ee:	9f 92       	push	r9
    50f0:	af 92       	push	r10
    50f2:	bf 92       	push	r11
    50f4:	cf 92       	push	r12
    50f6:	df 92       	push	r13
    50f8:	ef 92       	push	r14
    50fa:	ff 92       	push	r15
    50fc:	0f 93       	push	r16
    50fe:	1f 93       	push	r17
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	cd b7       	in	r28, 0x3d	; 61
    5106:	de b7       	in	r29, 0x3e	; 62
    5108:	ca 1b       	sub	r28, r26
    510a:	db 0b       	sbc	r29, r27
    510c:	0f b6       	in	r0, 0x3f	; 63
    510e:	f8 94       	cli
    5110:	de bf       	out	0x3e, r29	; 62
    5112:	0f be       	out	0x3f, r0	; 63
    5114:	cd bf       	out	0x3d, r28	; 61
    5116:	09 94       	ijmp

00005118 <__epilogue_restores__>:
    5118:	2a 88       	ldd	r2, Y+18	; 0x12
    511a:	39 88       	ldd	r3, Y+17	; 0x11
    511c:	48 88       	ldd	r4, Y+16	; 0x10
    511e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5120:	6e 84       	ldd	r6, Y+14	; 0x0e
    5122:	7d 84       	ldd	r7, Y+13	; 0x0d
    5124:	8c 84       	ldd	r8, Y+12	; 0x0c
    5126:	9b 84       	ldd	r9, Y+11	; 0x0b
    5128:	aa 84       	ldd	r10, Y+10	; 0x0a
    512a:	b9 84       	ldd	r11, Y+9	; 0x09
    512c:	c8 84       	ldd	r12, Y+8	; 0x08
    512e:	df 80       	ldd	r13, Y+7	; 0x07
    5130:	ee 80       	ldd	r14, Y+6	; 0x06
    5132:	fd 80       	ldd	r15, Y+5	; 0x05
    5134:	0c 81       	ldd	r16, Y+4	; 0x04
    5136:	1b 81       	ldd	r17, Y+3	; 0x03
    5138:	aa 81       	ldd	r26, Y+2	; 0x02
    513a:	b9 81       	ldd	r27, Y+1	; 0x01
    513c:	ce 0f       	add	r28, r30
    513e:	d1 1d       	adc	r29, r1
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	f8 94       	cli
    5144:	de bf       	out	0x3e, r29	; 62
    5146:	0f be       	out	0x3f, r0	; 63
    5148:	cd bf       	out	0x3d, r28	; 61
    514a:	ed 01       	movw	r28, r26
    514c:	08 95       	ret

0000514e <calloc>:
    514e:	0f 93       	push	r16
    5150:	1f 93       	push	r17
    5152:	cf 93       	push	r28
    5154:	df 93       	push	r29
    5156:	68 9f       	mul	r22, r24
    5158:	80 01       	movw	r16, r0
    515a:	69 9f       	mul	r22, r25
    515c:	10 0d       	add	r17, r0
    515e:	78 9f       	mul	r23, r24
    5160:	10 0d       	add	r17, r0
    5162:	11 24       	eor	r1, r1
    5164:	c8 01       	movw	r24, r16
    5166:	0e 94 c3 28 	call	0x5186	; 0x5186 <malloc>
    516a:	ec 01       	movw	r28, r24
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	29 f0       	breq	.+10     	; 0x517a <calloc+0x2c>
    5170:	60 e0       	ldi	r22, 0x00	; 0
    5172:	70 e0       	ldi	r23, 0x00	; 0
    5174:	a8 01       	movw	r20, r16
    5176:	0e 94 9f 2a 	call	0x553e	; 0x553e <memset>
    517a:	ce 01       	movw	r24, r28
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	08 95       	ret

00005186 <malloc>:
    5186:	cf 93       	push	r28
    5188:	df 93       	push	r29
    518a:	bc 01       	movw	r22, r24
    518c:	82 30       	cpi	r24, 0x02	; 2
    518e:	91 05       	cpc	r25, r1
    5190:	10 f4       	brcc	.+4      	; 0x5196 <malloc+0x10>
    5192:	62 e0       	ldi	r22, 0x02	; 2
    5194:	70 e0       	ldi	r23, 0x00	; 0
    5196:	a0 91 ff 01 	lds	r26, 0x01FF
    519a:	b0 91 00 02 	lds	r27, 0x0200
    519e:	ed 01       	movw	r28, r26
    51a0:	e0 e0       	ldi	r30, 0x00	; 0
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	40 e0       	ldi	r20, 0x00	; 0
    51a6:	50 e0       	ldi	r21, 0x00	; 0
    51a8:	21 c0       	rjmp	.+66     	; 0x51ec <malloc+0x66>
    51aa:	88 81       	ld	r24, Y
    51ac:	99 81       	ldd	r25, Y+1	; 0x01
    51ae:	86 17       	cp	r24, r22
    51b0:	97 07       	cpc	r25, r23
    51b2:	69 f4       	brne	.+26     	; 0x51ce <malloc+0x48>
    51b4:	8a 81       	ldd	r24, Y+2	; 0x02
    51b6:	9b 81       	ldd	r25, Y+3	; 0x03
    51b8:	30 97       	sbiw	r30, 0x00	; 0
    51ba:	19 f0       	breq	.+6      	; 0x51c2 <malloc+0x3c>
    51bc:	93 83       	std	Z+3, r25	; 0x03
    51be:	82 83       	std	Z+2, r24	; 0x02
    51c0:	04 c0       	rjmp	.+8      	; 0x51ca <malloc+0x44>
    51c2:	90 93 00 02 	sts	0x0200, r25
    51c6:	80 93 ff 01 	sts	0x01FF, r24
    51ca:	fe 01       	movw	r30, r28
    51cc:	34 c0       	rjmp	.+104    	; 0x5236 <malloc+0xb0>
    51ce:	68 17       	cp	r22, r24
    51d0:	79 07       	cpc	r23, r25
    51d2:	38 f4       	brcc	.+14     	; 0x51e2 <malloc+0x5c>
    51d4:	41 15       	cp	r20, r1
    51d6:	51 05       	cpc	r21, r1
    51d8:	19 f0       	breq	.+6      	; 0x51e0 <malloc+0x5a>
    51da:	84 17       	cp	r24, r20
    51dc:	95 07       	cpc	r25, r21
    51de:	08 f4       	brcc	.+2      	; 0x51e2 <malloc+0x5c>
    51e0:	ac 01       	movw	r20, r24
    51e2:	fe 01       	movw	r30, r28
    51e4:	8a 81       	ldd	r24, Y+2	; 0x02
    51e6:	9b 81       	ldd	r25, Y+3	; 0x03
    51e8:	9c 01       	movw	r18, r24
    51ea:	e9 01       	movw	r28, r18
    51ec:	20 97       	sbiw	r28, 0x00	; 0
    51ee:	e9 f6       	brne	.-70     	; 0x51aa <malloc+0x24>
    51f0:	41 15       	cp	r20, r1
    51f2:	51 05       	cpc	r21, r1
    51f4:	a9 f1       	breq	.+106    	; 0x5260 <malloc+0xda>
    51f6:	ca 01       	movw	r24, r20
    51f8:	86 1b       	sub	r24, r22
    51fa:	97 0b       	sbc	r25, r23
    51fc:	04 97       	sbiw	r24, 0x04	; 4
    51fe:	08 f4       	brcc	.+2      	; 0x5202 <malloc+0x7c>
    5200:	ba 01       	movw	r22, r20
    5202:	e0 e0       	ldi	r30, 0x00	; 0
    5204:	f0 e0       	ldi	r31, 0x00	; 0
    5206:	2a c0       	rjmp	.+84     	; 0x525c <malloc+0xd6>
    5208:	8d 91       	ld	r24, X+
    520a:	9c 91       	ld	r25, X
    520c:	11 97       	sbiw	r26, 0x01	; 1
    520e:	84 17       	cp	r24, r20
    5210:	95 07       	cpc	r25, r21
    5212:	f9 f4       	brne	.+62     	; 0x5252 <malloc+0xcc>
    5214:	64 17       	cp	r22, r20
    5216:	75 07       	cpc	r23, r21
    5218:	81 f4       	brne	.+32     	; 0x523a <malloc+0xb4>
    521a:	12 96       	adiw	r26, 0x02	; 2
    521c:	8d 91       	ld	r24, X+
    521e:	9c 91       	ld	r25, X
    5220:	13 97       	sbiw	r26, 0x03	; 3
    5222:	30 97       	sbiw	r30, 0x00	; 0
    5224:	19 f0       	breq	.+6      	; 0x522c <malloc+0xa6>
    5226:	93 83       	std	Z+3, r25	; 0x03
    5228:	82 83       	std	Z+2, r24	; 0x02
    522a:	04 c0       	rjmp	.+8      	; 0x5234 <malloc+0xae>
    522c:	90 93 00 02 	sts	0x0200, r25
    5230:	80 93 ff 01 	sts	0x01FF, r24
    5234:	fd 01       	movw	r30, r26
    5236:	32 96       	adiw	r30, 0x02	; 2
    5238:	4f c0       	rjmp	.+158    	; 0x52d8 <malloc+0x152>
    523a:	ca 01       	movw	r24, r20
    523c:	86 1b       	sub	r24, r22
    523e:	97 0b       	sbc	r25, r23
    5240:	fd 01       	movw	r30, r26
    5242:	e8 0f       	add	r30, r24
    5244:	f9 1f       	adc	r31, r25
    5246:	61 93       	st	Z+, r22
    5248:	71 93       	st	Z+, r23
    524a:	02 97       	sbiw	r24, 0x02	; 2
    524c:	8d 93       	st	X+, r24
    524e:	9c 93       	st	X, r25
    5250:	43 c0       	rjmp	.+134    	; 0x52d8 <malloc+0x152>
    5252:	fd 01       	movw	r30, r26
    5254:	82 81       	ldd	r24, Z+2	; 0x02
    5256:	93 81       	ldd	r25, Z+3	; 0x03
    5258:	9c 01       	movw	r18, r24
    525a:	d9 01       	movw	r26, r18
    525c:	10 97       	sbiw	r26, 0x00	; 0
    525e:	a1 f6       	brne	.-88     	; 0x5208 <malloc+0x82>
    5260:	80 91 fd 01 	lds	r24, 0x01FD
    5264:	90 91 fe 01 	lds	r25, 0x01FE
    5268:	89 2b       	or	r24, r25
    526a:	41 f4       	brne	.+16     	; 0x527c <malloc+0xf6>
    526c:	80 91 98 01 	lds	r24, 0x0198
    5270:	90 91 99 01 	lds	r25, 0x0199
    5274:	90 93 fe 01 	sts	0x01FE, r25
    5278:	80 93 fd 01 	sts	0x01FD, r24
    527c:	40 91 9a 01 	lds	r20, 0x019A
    5280:	50 91 9b 01 	lds	r21, 0x019B
    5284:	41 15       	cp	r20, r1
    5286:	51 05       	cpc	r21, r1
    5288:	41 f4       	brne	.+16     	; 0x529a <malloc+0x114>
    528a:	4d b7       	in	r20, 0x3d	; 61
    528c:	5e b7       	in	r21, 0x3e	; 62
    528e:	80 91 96 01 	lds	r24, 0x0196
    5292:	90 91 97 01 	lds	r25, 0x0197
    5296:	48 1b       	sub	r20, r24
    5298:	59 0b       	sbc	r21, r25
    529a:	20 91 fd 01 	lds	r18, 0x01FD
    529e:	30 91 fe 01 	lds	r19, 0x01FE
    52a2:	24 17       	cp	r18, r20
    52a4:	35 07       	cpc	r19, r21
    52a6:	b0 f4       	brcc	.+44     	; 0x52d4 <malloc+0x14e>
    52a8:	ca 01       	movw	r24, r20
    52aa:	82 1b       	sub	r24, r18
    52ac:	93 0b       	sbc	r25, r19
    52ae:	86 17       	cp	r24, r22
    52b0:	97 07       	cpc	r25, r23
    52b2:	80 f0       	brcs	.+32     	; 0x52d4 <malloc+0x14e>
    52b4:	ab 01       	movw	r20, r22
    52b6:	4e 5f       	subi	r20, 0xFE	; 254
    52b8:	5f 4f       	sbci	r21, 0xFF	; 255
    52ba:	84 17       	cp	r24, r20
    52bc:	95 07       	cpc	r25, r21
    52be:	50 f0       	brcs	.+20     	; 0x52d4 <malloc+0x14e>
    52c0:	42 0f       	add	r20, r18
    52c2:	53 1f       	adc	r21, r19
    52c4:	50 93 fe 01 	sts	0x01FE, r21
    52c8:	40 93 fd 01 	sts	0x01FD, r20
    52cc:	f9 01       	movw	r30, r18
    52ce:	61 93       	st	Z+, r22
    52d0:	71 93       	st	Z+, r23
    52d2:	02 c0       	rjmp	.+4      	; 0x52d8 <malloc+0x152>
    52d4:	e0 e0       	ldi	r30, 0x00	; 0
    52d6:	f0 e0       	ldi	r31, 0x00	; 0
    52d8:	cf 01       	movw	r24, r30
    52da:	df 91       	pop	r29
    52dc:	cf 91       	pop	r28
    52de:	08 95       	ret

000052e0 <free>:
    52e0:	cf 93       	push	r28
    52e2:	df 93       	push	r29
    52e4:	00 97       	sbiw	r24, 0x00	; 0
    52e6:	09 f4       	brne	.+2      	; 0x52ea <free+0xa>
    52e8:	50 c0       	rjmp	.+160    	; 0x538a <free+0xaa>
    52ea:	ec 01       	movw	r28, r24
    52ec:	22 97       	sbiw	r28, 0x02	; 2
    52ee:	1b 82       	std	Y+3, r1	; 0x03
    52f0:	1a 82       	std	Y+2, r1	; 0x02
    52f2:	a0 91 ff 01 	lds	r26, 0x01FF
    52f6:	b0 91 00 02 	lds	r27, 0x0200
    52fa:	10 97       	sbiw	r26, 0x00	; 0
    52fc:	09 f1       	breq	.+66     	; 0x5340 <free+0x60>
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	ac 17       	cp	r26, r28
    5304:	bd 07       	cpc	r27, r29
    5306:	08 f1       	brcs	.+66     	; 0x534a <free+0x6a>
    5308:	bb 83       	std	Y+3, r27	; 0x03
    530a:	aa 83       	std	Y+2, r26	; 0x02
    530c:	fe 01       	movw	r30, r28
    530e:	21 91       	ld	r18, Z+
    5310:	31 91       	ld	r19, Z+
    5312:	e2 0f       	add	r30, r18
    5314:	f3 1f       	adc	r31, r19
    5316:	ae 17       	cp	r26, r30
    5318:	bf 07       	cpc	r27, r31
    531a:	79 f4       	brne	.+30     	; 0x533a <free+0x5a>
    531c:	8d 91       	ld	r24, X+
    531e:	9c 91       	ld	r25, X
    5320:	11 97       	sbiw	r26, 0x01	; 1
    5322:	28 0f       	add	r18, r24
    5324:	39 1f       	adc	r19, r25
    5326:	2e 5f       	subi	r18, 0xFE	; 254
    5328:	3f 4f       	sbci	r19, 0xFF	; 255
    532a:	39 83       	std	Y+1, r19	; 0x01
    532c:	28 83       	st	Y, r18
    532e:	12 96       	adiw	r26, 0x02	; 2
    5330:	8d 91       	ld	r24, X+
    5332:	9c 91       	ld	r25, X
    5334:	13 97       	sbiw	r26, 0x03	; 3
    5336:	9b 83       	std	Y+3, r25	; 0x03
    5338:	8a 83       	std	Y+2, r24	; 0x02
    533a:	41 15       	cp	r20, r1
    533c:	51 05       	cpc	r21, r1
    533e:	71 f4       	brne	.+28     	; 0x535c <free+0x7c>
    5340:	d0 93 00 02 	sts	0x0200, r29
    5344:	c0 93 ff 01 	sts	0x01FF, r28
    5348:	20 c0       	rjmp	.+64     	; 0x538a <free+0xaa>
    534a:	12 96       	adiw	r26, 0x02	; 2
    534c:	8d 91       	ld	r24, X+
    534e:	9c 91       	ld	r25, X
    5350:	13 97       	sbiw	r26, 0x03	; 3
    5352:	ad 01       	movw	r20, r26
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	11 f0       	breq	.+4      	; 0x535c <free+0x7c>
    5358:	dc 01       	movw	r26, r24
    535a:	d3 cf       	rjmp	.-90     	; 0x5302 <free+0x22>
    535c:	fa 01       	movw	r30, r20
    535e:	d3 83       	std	Z+3, r29	; 0x03
    5360:	c2 83       	std	Z+2, r28	; 0x02
    5362:	21 91       	ld	r18, Z+
    5364:	31 91       	ld	r19, Z+
    5366:	e2 0f       	add	r30, r18
    5368:	f3 1f       	adc	r31, r19
    536a:	ce 17       	cp	r28, r30
    536c:	df 07       	cpc	r29, r31
    536e:	69 f4       	brne	.+26     	; 0x538a <free+0xaa>
    5370:	88 81       	ld	r24, Y
    5372:	99 81       	ldd	r25, Y+1	; 0x01
    5374:	28 0f       	add	r18, r24
    5376:	39 1f       	adc	r19, r25
    5378:	2e 5f       	subi	r18, 0xFE	; 254
    537a:	3f 4f       	sbci	r19, 0xFF	; 255
    537c:	fa 01       	movw	r30, r20
    537e:	31 83       	std	Z+1, r19	; 0x01
    5380:	20 83       	st	Z, r18
    5382:	8a 81       	ldd	r24, Y+2	; 0x02
    5384:	9b 81       	ldd	r25, Y+3	; 0x03
    5386:	93 83       	std	Z+3, r25	; 0x03
    5388:	82 83       	std	Z+2, r24	; 0x02
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	08 95       	ret

00005390 <realloc>:
    5390:	a0 e0       	ldi	r26, 0x00	; 0
    5392:	b0 e0       	ldi	r27, 0x00	; 0
    5394:	ee ec       	ldi	r30, 0xCE	; 206
    5396:	f9 e2       	ldi	r31, 0x29	; 41
    5398:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__prologue_saves__+0xc>
    539c:	8c 01       	movw	r16, r24
    539e:	00 97       	sbiw	r24, 0x00	; 0
    53a0:	29 f4       	brne	.+10     	; 0x53ac <realloc+0x1c>
    53a2:	cb 01       	movw	r24, r22
    53a4:	0e 94 c3 28 	call	0x5186	; 0x5186 <malloc>
    53a8:	8c 01       	movw	r16, r24
    53aa:	ba c0       	rjmp	.+372    	; 0x5520 <realloc+0x190>
    53ac:	9e ef       	ldi	r25, 0xFE	; 254
    53ae:	e9 2e       	mov	r14, r25
    53b0:	9f ef       	ldi	r25, 0xFF	; 255
    53b2:	f9 2e       	mov	r15, r25
    53b4:	e0 0e       	add	r14, r16
    53b6:	f1 1e       	adc	r15, r17
    53b8:	58 01       	movw	r10, r16
    53ba:	a6 0e       	add	r10, r22
    53bc:	b7 1e       	adc	r11, r23
    53be:	ae 14       	cp	r10, r14
    53c0:	bf 04       	cpc	r11, r15
    53c2:	08 f4       	brcc	.+2      	; 0x53c6 <realloc+0x36>
    53c4:	ab c0       	rjmp	.+342    	; 0x551c <realloc+0x18c>
    53c6:	8e ef       	ldi	r24, 0xFE	; 254
    53c8:	88 2e       	mov	r8, r24
    53ca:	8f ef       	ldi	r24, 0xFF	; 255
    53cc:	98 2e       	mov	r9, r24
    53ce:	8a 0c       	add	r8, r10
    53d0:	9b 1c       	adc	r9, r11
    53d2:	e7 01       	movw	r28, r14
    53d4:	48 81       	ld	r20, Y
    53d6:	59 81       	ldd	r21, Y+1	; 0x01
    53d8:	46 17       	cp	r20, r22
    53da:	57 07       	cpc	r21, r23
    53dc:	b8 f0       	brcs	.+46     	; 0x540c <realloc+0x7c>
    53de:	45 30       	cpi	r20, 0x05	; 5
    53e0:	51 05       	cpc	r21, r1
    53e2:	08 f4       	brcc	.+2      	; 0x53e6 <realloc+0x56>
    53e4:	9d c0       	rjmp	.+314    	; 0x5520 <realloc+0x190>
    53e6:	ca 01       	movw	r24, r20
    53e8:	04 97       	sbiw	r24, 0x04	; 4
    53ea:	86 17       	cp	r24, r22
    53ec:	97 07       	cpc	r25, r23
    53ee:	08 f4       	brcc	.+2      	; 0x53f2 <realloc+0x62>
    53f0:	97 c0       	rjmp	.+302    	; 0x5520 <realloc+0x190>
    53f2:	42 50       	subi	r20, 0x02	; 2
    53f4:	50 40       	sbci	r21, 0x00	; 0
    53f6:	46 1b       	sub	r20, r22
    53f8:	57 0b       	sbc	r21, r23
    53fa:	f4 01       	movw	r30, r8
    53fc:	51 83       	std	Z+1, r21	; 0x01
    53fe:	40 83       	st	Z, r20
    5400:	79 83       	std	Y+1, r23	; 0x01
    5402:	68 83       	st	Y, r22
    5404:	c5 01       	movw	r24, r10
    5406:	0e 94 70 29 	call	0x52e0	; 0x52e0 <free>
    540a:	8a c0       	rjmp	.+276    	; 0x5520 <realloc+0x190>
    540c:	6b 01       	movw	r12, r22
    540e:	c4 1a       	sub	r12, r20
    5410:	d5 0a       	sbc	r13, r21
    5412:	e0 91 ff 01 	lds	r30, 0x01FF
    5416:	f0 91 00 02 	lds	r31, 0x0200
    541a:	a0 e0       	ldi	r26, 0x00	; 0
    541c:	b0 e0       	ldi	r27, 0x00	; 0
    541e:	c0 e0       	ldi	r28, 0x00	; 0
    5420:	d0 e0       	ldi	r29, 0x00	; 0
    5422:	42 c0       	rjmp	.+132    	; 0x54a8 <realloc+0x118>
    5424:	e8 15       	cp	r30, r8
    5426:	f9 05       	cpc	r31, r9
    5428:	a1 f5       	brne	.+104    	; 0x5492 <realloc+0x102>
    542a:	20 81       	ld	r18, Z
    542c:	31 81       	ldd	r19, Z+1	; 0x01
    542e:	2c 15       	cp	r18, r12
    5430:	3d 05       	cpc	r19, r13
    5432:	78 f1       	brcs	.+94     	; 0x5492 <realloc+0x102>
    5434:	c9 01       	movw	r24, r18
    5436:	02 96       	adiw	r24, 0x02	; 2
    5438:	8c 15       	cp	r24, r12
    543a:	9d 05       	cpc	r25, r13
    543c:	a8 f0       	brcs	.+42     	; 0x5468 <realloc+0xd8>
    543e:	4e 5f       	subi	r20, 0xFE	; 254
    5440:	5f 4f       	sbci	r21, 0xFF	; 255
    5442:	42 0f       	add	r20, r18
    5444:	53 1f       	adc	r21, r19
    5446:	e7 01       	movw	r28, r14
    5448:	59 83       	std	Y+1, r21	; 0x01
    544a:	48 83       	st	Y, r20
    544c:	22 81       	ldd	r18, Z+2	; 0x02
    544e:	33 81       	ldd	r19, Z+3	; 0x03
    5450:	10 97       	sbiw	r26, 0x00	; 0
    5452:	29 f0       	breq	.+10     	; 0x545e <realloc+0xce>
    5454:	13 96       	adiw	r26, 0x03	; 3
    5456:	3c 93       	st	X, r19
    5458:	2e 93       	st	-X, r18
    545a:	12 97       	sbiw	r26, 0x02	; 2
    545c:	61 c0       	rjmp	.+194    	; 0x5520 <realloc+0x190>
    545e:	30 93 00 02 	sts	0x0200, r19
    5462:	20 93 ff 01 	sts	0x01FF, r18
    5466:	5c c0       	rjmp	.+184    	; 0x5520 <realloc+0x190>
    5468:	22 50       	subi	r18, 0x02	; 2
    546a:	30 40       	sbci	r19, 0x00	; 0
    546c:	2c 19       	sub	r18, r12
    546e:	3d 09       	sbc	r19, r13
    5470:	31 83       	std	Z+1, r19	; 0x01
    5472:	20 83       	st	Z, r18
    5474:	10 97       	sbiw	r26, 0x00	; 0
    5476:	29 f0       	breq	.+10     	; 0x5482 <realloc+0xf2>
    5478:	13 96       	adiw	r26, 0x03	; 3
    547a:	fc 93       	st	X, r31
    547c:	ee 93       	st	-X, r30
    547e:	12 97       	sbiw	r26, 0x02	; 2
    5480:	04 c0       	rjmp	.+8      	; 0x548a <realloc+0xfa>
    5482:	f0 93 00 02 	sts	0x0200, r31
    5486:	e0 93 ff 01 	sts	0x01FF, r30
    548a:	f7 01       	movw	r30, r14
    548c:	71 83       	std	Z+1, r23	; 0x01
    548e:	60 83       	st	Z, r22
    5490:	47 c0       	rjmp	.+142    	; 0x5520 <realloc+0x190>
    5492:	80 81       	ld	r24, Z
    5494:	91 81       	ldd	r25, Z+1	; 0x01
    5496:	c8 17       	cp	r28, r24
    5498:	d9 07       	cpc	r29, r25
    549a:	08 f4       	brcc	.+2      	; 0x549e <realloc+0x10e>
    549c:	ec 01       	movw	r28, r24
    549e:	df 01       	movw	r26, r30
    54a0:	82 81       	ldd	r24, Z+2	; 0x02
    54a2:	93 81       	ldd	r25, Z+3	; 0x03
    54a4:	9c 01       	movw	r18, r24
    54a6:	f9 01       	movw	r30, r18
    54a8:	30 97       	sbiw	r30, 0x00	; 0
    54aa:	09 f0       	breq	.+2      	; 0x54ae <realloc+0x11e>
    54ac:	bb cf       	rjmp	.-138    	; 0x5424 <realloc+0x94>
    54ae:	40 0f       	add	r20, r16
    54b0:	51 1f       	adc	r21, r17
    54b2:	80 91 fd 01 	lds	r24, 0x01FD
    54b6:	90 91 fe 01 	lds	r25, 0x01FE
    54ba:	84 17       	cp	r24, r20
    54bc:	95 07       	cpc	r25, r21
    54be:	e9 f4       	brne	.+58     	; 0x54fa <realloc+0x16a>
    54c0:	c6 17       	cp	r28, r22
    54c2:	d7 07       	cpc	r29, r23
    54c4:	d0 f4       	brcc	.+52     	; 0x54fa <realloc+0x16a>
    54c6:	20 91 9a 01 	lds	r18, 0x019A
    54ca:	30 91 9b 01 	lds	r19, 0x019B
    54ce:	21 15       	cp	r18, r1
    54d0:	31 05       	cpc	r19, r1
    54d2:	41 f4       	brne	.+16     	; 0x54e4 <realloc+0x154>
    54d4:	2d b7       	in	r18, 0x3d	; 61
    54d6:	3e b7       	in	r19, 0x3e	; 62
    54d8:	80 91 96 01 	lds	r24, 0x0196
    54dc:	90 91 97 01 	lds	r25, 0x0197
    54e0:	28 1b       	sub	r18, r24
    54e2:	39 0b       	sbc	r19, r25
    54e4:	a2 16       	cp	r10, r18
    54e6:	b3 06       	cpc	r11, r19
    54e8:	c8 f4       	brcc	.+50     	; 0x551c <realloc+0x18c>
    54ea:	b0 92 fe 01 	sts	0x01FE, r11
    54ee:	a0 92 fd 01 	sts	0x01FD, r10
    54f2:	e7 01       	movw	r28, r14
    54f4:	79 83       	std	Y+1, r23	; 0x01
    54f6:	68 83       	st	Y, r22
    54f8:	13 c0       	rjmp	.+38     	; 0x5520 <realloc+0x190>
    54fa:	cb 01       	movw	r24, r22
    54fc:	0e 94 c3 28 	call	0x5186	; 0x5186 <malloc>
    5500:	ec 01       	movw	r28, r24
    5502:	00 97       	sbiw	r24, 0x00	; 0
    5504:	59 f0       	breq	.+22     	; 0x551c <realloc+0x18c>
    5506:	f7 01       	movw	r30, r14
    5508:	40 81       	ld	r20, Z
    550a:	51 81       	ldd	r21, Z+1	; 0x01
    550c:	b8 01       	movw	r22, r16
    550e:	0e 94 96 2a 	call	0x552c	; 0x552c <memcpy>
    5512:	c8 01       	movw	r24, r16
    5514:	0e 94 70 29 	call	0x52e0	; 0x52e0 <free>
    5518:	8e 01       	movw	r16, r28
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <realloc+0x190>
    551c:	00 e0       	ldi	r16, 0x00	; 0
    551e:	10 e0       	ldi	r17, 0x00	; 0
    5520:	c8 01       	movw	r24, r16
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
    5526:	ec e0       	ldi	r30, 0x0C	; 12
    5528:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__epilogue_restores__+0xc>

0000552c <memcpy>:
    552c:	fb 01       	movw	r30, r22
    552e:	dc 01       	movw	r26, r24
    5530:	02 c0       	rjmp	.+4      	; 0x5536 <memcpy+0xa>
    5532:	01 90       	ld	r0, Z+
    5534:	0d 92       	st	X+, r0
    5536:	41 50       	subi	r20, 0x01	; 1
    5538:	50 40       	sbci	r21, 0x00	; 0
    553a:	d8 f7       	brcc	.-10     	; 0x5532 <memcpy+0x6>
    553c:	08 95       	ret

0000553e <memset>:
    553e:	dc 01       	movw	r26, r24
    5540:	01 c0       	rjmp	.+2      	; 0x5544 <memset+0x6>
    5542:	6d 93       	st	X+, r22
    5544:	41 50       	subi	r20, 0x01	; 1
    5546:	50 40       	sbci	r21, 0x00	; 0
    5548:	e0 f7       	brcc	.-8      	; 0x5542 <memset+0x4>
    554a:	08 95       	ret

0000554c <snprintf>:
    554c:	ae e0       	ldi	r26, 0x0E	; 14
    554e:	b0 e0       	ldi	r27, 0x00	; 0
    5550:	ec ea       	ldi	r30, 0xAC	; 172
    5552:	fa e2       	ldi	r31, 0x2A	; 42
    5554:	0c 94 7e 28 	jmp	0x50fc	; 0x50fc <__prologue_saves__+0x1c>
    5558:	0d 89       	ldd	r16, Y+21	; 0x15
    555a:	1e 89       	ldd	r17, Y+22	; 0x16
    555c:	8f 89       	ldd	r24, Y+23	; 0x17
    555e:	98 8d       	ldd	r25, Y+24	; 0x18
    5560:	97 ff       	sbrs	r25, 7
    5562:	02 c0       	rjmp	.+4      	; 0x5568 <snprintf+0x1c>
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	90 e8       	ldi	r25, 0x80	; 128
    5568:	01 97       	sbiw	r24, 0x01	; 1
    556a:	9e 83       	std	Y+6, r25	; 0x06
    556c:	8d 83       	std	Y+5, r24	; 0x05
    556e:	1a 83       	std	Y+2, r17	; 0x02
    5570:	09 83       	std	Y+1, r16	; 0x01
    5572:	86 e0       	ldi	r24, 0x06	; 6
    5574:	8c 83       	std	Y+4, r24	; 0x04
    5576:	9e 01       	movw	r18, r28
    5578:	25 5e       	subi	r18, 0xE5	; 229
    557a:	3f 4f       	sbci	r19, 0xFF	; 255
    557c:	ce 01       	movw	r24, r28
    557e:	01 96       	adiw	r24, 0x01	; 1
    5580:	69 8d       	ldd	r22, Y+25	; 0x19
    5582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5584:	a9 01       	movw	r20, r18
    5586:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <vfprintf>
    558a:	4d 81       	ldd	r20, Y+5	; 0x05
    558c:	5e 81       	ldd	r21, Y+6	; 0x06
    558e:	57 fd       	sbrc	r21, 7
    5590:	0a c0       	rjmp	.+20     	; 0x55a6 <snprintf+0x5a>
    5592:	2f 81       	ldd	r18, Y+7	; 0x07
    5594:	38 85       	ldd	r19, Y+8	; 0x08
    5596:	42 17       	cp	r20, r18
    5598:	53 07       	cpc	r21, r19
    559a:	0c f4       	brge	.+2      	; 0x559e <snprintf+0x52>
    559c:	9a 01       	movw	r18, r20
    559e:	02 0f       	add	r16, r18
    55a0:	13 1f       	adc	r17, r19
    55a2:	f8 01       	movw	r30, r16
    55a4:	10 82       	st	Z, r1
    55a6:	2e 96       	adiw	r28, 0x0e	; 14
    55a8:	e4 e0       	ldi	r30, 0x04	; 4
    55aa:	0c 94 9a 28 	jmp	0x5134	; 0x5134 <__epilogue_restores__+0x1c>

000055ae <vfprintf>:
    55ae:	ab e0       	ldi	r26, 0x0B	; 11
    55b0:	b0 e0       	ldi	r27, 0x00	; 0
    55b2:	ed ed       	ldi	r30, 0xDD	; 221
    55b4:	fa e2       	ldi	r31, 0x2A	; 42
    55b6:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <__prologue_saves__>
    55ba:	3c 01       	movw	r6, r24
    55bc:	2b 01       	movw	r4, r22
    55be:	5a 01       	movw	r10, r20
    55c0:	fc 01       	movw	r30, r24
    55c2:	17 82       	std	Z+7, r1	; 0x07
    55c4:	16 82       	std	Z+6, r1	; 0x06
    55c6:	83 81       	ldd	r24, Z+3	; 0x03
    55c8:	81 fd       	sbrc	r24, 1
    55ca:	03 c0       	rjmp	.+6      	; 0x55d2 <vfprintf+0x24>
    55cc:	6f ef       	ldi	r22, 0xFF	; 255
    55ce:	7f ef       	ldi	r23, 0xFF	; 255
    55d0:	c6 c1       	rjmp	.+908    	; 0x595e <vfprintf+0x3b0>
    55d2:	9a e0       	ldi	r25, 0x0A	; 10
    55d4:	89 2e       	mov	r8, r25
    55d6:	1e 01       	movw	r2, r28
    55d8:	08 94       	sec
    55da:	21 1c       	adc	r2, r1
    55dc:	31 1c       	adc	r3, r1
    55de:	f3 01       	movw	r30, r6
    55e0:	23 81       	ldd	r18, Z+3	; 0x03
    55e2:	f2 01       	movw	r30, r4
    55e4:	23 fd       	sbrc	r18, 3
    55e6:	85 91       	lpm	r24, Z+
    55e8:	23 ff       	sbrs	r18, 3
    55ea:	81 91       	ld	r24, Z+
    55ec:	2f 01       	movw	r4, r30
    55ee:	88 23       	and	r24, r24
    55f0:	09 f4       	brne	.+2      	; 0x55f4 <vfprintf+0x46>
    55f2:	b2 c1       	rjmp	.+868    	; 0x5958 <vfprintf+0x3aa>
    55f4:	85 32       	cpi	r24, 0x25	; 37
    55f6:	39 f4       	brne	.+14     	; 0x5606 <vfprintf+0x58>
    55f8:	23 fd       	sbrc	r18, 3
    55fa:	85 91       	lpm	r24, Z+
    55fc:	23 ff       	sbrs	r18, 3
    55fe:	81 91       	ld	r24, Z+
    5600:	2f 01       	movw	r4, r30
    5602:	85 32       	cpi	r24, 0x25	; 37
    5604:	29 f4       	brne	.+10     	; 0x5610 <vfprintf+0x62>
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	b3 01       	movw	r22, r6
    560a:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    560e:	e7 cf       	rjmp	.-50     	; 0x55de <vfprintf+0x30>
    5610:	98 2f       	mov	r25, r24
    5612:	ff 24       	eor	r15, r15
    5614:	ee 24       	eor	r14, r14
    5616:	99 24       	eor	r9, r9
    5618:	ff e1       	ldi	r31, 0x1F	; 31
    561a:	ff 15       	cp	r31, r15
    561c:	d0 f0       	brcs	.+52     	; 0x5652 <vfprintf+0xa4>
    561e:	9b 32       	cpi	r25, 0x2B	; 43
    5620:	69 f0       	breq	.+26     	; 0x563c <vfprintf+0x8e>
    5622:	9c 32       	cpi	r25, 0x2C	; 44
    5624:	28 f4       	brcc	.+10     	; 0x5630 <vfprintf+0x82>
    5626:	90 32       	cpi	r25, 0x20	; 32
    5628:	59 f0       	breq	.+22     	; 0x5640 <vfprintf+0x92>
    562a:	93 32       	cpi	r25, 0x23	; 35
    562c:	91 f4       	brne	.+36     	; 0x5652 <vfprintf+0xa4>
    562e:	0e c0       	rjmp	.+28     	; 0x564c <vfprintf+0x9e>
    5630:	9d 32       	cpi	r25, 0x2D	; 45
    5632:	49 f0       	breq	.+18     	; 0x5646 <vfprintf+0x98>
    5634:	90 33       	cpi	r25, 0x30	; 48
    5636:	69 f4       	brne	.+26     	; 0x5652 <vfprintf+0xa4>
    5638:	41 e0       	ldi	r20, 0x01	; 1
    563a:	24 c0       	rjmp	.+72     	; 0x5684 <vfprintf+0xd6>
    563c:	52 e0       	ldi	r21, 0x02	; 2
    563e:	f5 2a       	or	r15, r21
    5640:	84 e0       	ldi	r24, 0x04	; 4
    5642:	f8 2a       	or	r15, r24
    5644:	28 c0       	rjmp	.+80     	; 0x5696 <vfprintf+0xe8>
    5646:	98 e0       	ldi	r25, 0x08	; 8
    5648:	f9 2a       	or	r15, r25
    564a:	25 c0       	rjmp	.+74     	; 0x5696 <vfprintf+0xe8>
    564c:	e0 e1       	ldi	r30, 0x10	; 16
    564e:	fe 2a       	or	r15, r30
    5650:	22 c0       	rjmp	.+68     	; 0x5696 <vfprintf+0xe8>
    5652:	f7 fc       	sbrc	r15, 7
    5654:	29 c0       	rjmp	.+82     	; 0x56a8 <vfprintf+0xfa>
    5656:	89 2f       	mov	r24, r25
    5658:	80 53       	subi	r24, 0x30	; 48
    565a:	8a 30       	cpi	r24, 0x0A	; 10
    565c:	70 f4       	brcc	.+28     	; 0x567a <vfprintf+0xcc>
    565e:	f6 fe       	sbrs	r15, 6
    5660:	05 c0       	rjmp	.+10     	; 0x566c <vfprintf+0xbe>
    5662:	98 9c       	mul	r9, r8
    5664:	90 2c       	mov	r9, r0
    5666:	11 24       	eor	r1, r1
    5668:	98 0e       	add	r9, r24
    566a:	15 c0       	rjmp	.+42     	; 0x5696 <vfprintf+0xe8>
    566c:	e8 9c       	mul	r14, r8
    566e:	e0 2c       	mov	r14, r0
    5670:	11 24       	eor	r1, r1
    5672:	e8 0e       	add	r14, r24
    5674:	f0 e2       	ldi	r31, 0x20	; 32
    5676:	ff 2a       	or	r15, r31
    5678:	0e c0       	rjmp	.+28     	; 0x5696 <vfprintf+0xe8>
    567a:	9e 32       	cpi	r25, 0x2E	; 46
    567c:	29 f4       	brne	.+10     	; 0x5688 <vfprintf+0xda>
    567e:	f6 fc       	sbrc	r15, 6
    5680:	6b c1       	rjmp	.+726    	; 0x5958 <vfprintf+0x3aa>
    5682:	40 e4       	ldi	r20, 0x40	; 64
    5684:	f4 2a       	or	r15, r20
    5686:	07 c0       	rjmp	.+14     	; 0x5696 <vfprintf+0xe8>
    5688:	9c 36       	cpi	r25, 0x6C	; 108
    568a:	19 f4       	brne	.+6      	; 0x5692 <vfprintf+0xe4>
    568c:	50 e8       	ldi	r21, 0x80	; 128
    568e:	f5 2a       	or	r15, r21
    5690:	02 c0       	rjmp	.+4      	; 0x5696 <vfprintf+0xe8>
    5692:	98 36       	cpi	r25, 0x68	; 104
    5694:	49 f4       	brne	.+18     	; 0x56a8 <vfprintf+0xfa>
    5696:	f2 01       	movw	r30, r4
    5698:	23 fd       	sbrc	r18, 3
    569a:	95 91       	lpm	r25, Z+
    569c:	23 ff       	sbrs	r18, 3
    569e:	91 91       	ld	r25, Z+
    56a0:	2f 01       	movw	r4, r30
    56a2:	99 23       	and	r25, r25
    56a4:	09 f0       	breq	.+2      	; 0x56a8 <vfprintf+0xfa>
    56a6:	b8 cf       	rjmp	.-144    	; 0x5618 <vfprintf+0x6a>
    56a8:	89 2f       	mov	r24, r25
    56aa:	85 54       	subi	r24, 0x45	; 69
    56ac:	83 30       	cpi	r24, 0x03	; 3
    56ae:	18 f0       	brcs	.+6      	; 0x56b6 <vfprintf+0x108>
    56b0:	80 52       	subi	r24, 0x20	; 32
    56b2:	83 30       	cpi	r24, 0x03	; 3
    56b4:	38 f4       	brcc	.+14     	; 0x56c4 <vfprintf+0x116>
    56b6:	44 e0       	ldi	r20, 0x04	; 4
    56b8:	50 e0       	ldi	r21, 0x00	; 0
    56ba:	a4 0e       	add	r10, r20
    56bc:	b5 1e       	adc	r11, r21
    56be:	5f e3       	ldi	r21, 0x3F	; 63
    56c0:	59 83       	std	Y+1, r21	; 0x01
    56c2:	0f c0       	rjmp	.+30     	; 0x56e2 <vfprintf+0x134>
    56c4:	93 36       	cpi	r25, 0x63	; 99
    56c6:	31 f0       	breq	.+12     	; 0x56d4 <vfprintf+0x126>
    56c8:	93 37       	cpi	r25, 0x73	; 115
    56ca:	79 f0       	breq	.+30     	; 0x56ea <vfprintf+0x13c>
    56cc:	93 35       	cpi	r25, 0x53	; 83
    56ce:	09 f0       	breq	.+2      	; 0x56d2 <vfprintf+0x124>
    56d0:	56 c0       	rjmp	.+172    	; 0x577e <vfprintf+0x1d0>
    56d2:	20 c0       	rjmp	.+64     	; 0x5714 <vfprintf+0x166>
    56d4:	f5 01       	movw	r30, r10
    56d6:	80 81       	ld	r24, Z
    56d8:	89 83       	std	Y+1, r24	; 0x01
    56da:	42 e0       	ldi	r20, 0x02	; 2
    56dc:	50 e0       	ldi	r21, 0x00	; 0
    56de:	a4 0e       	add	r10, r20
    56e0:	b5 1e       	adc	r11, r21
    56e2:	61 01       	movw	r12, r2
    56e4:	01 e0       	ldi	r16, 0x01	; 1
    56e6:	10 e0       	ldi	r17, 0x00	; 0
    56e8:	12 c0       	rjmp	.+36     	; 0x570e <vfprintf+0x160>
    56ea:	f5 01       	movw	r30, r10
    56ec:	c0 80       	ld	r12, Z
    56ee:	d1 80       	ldd	r13, Z+1	; 0x01
    56f0:	f6 fc       	sbrc	r15, 6
    56f2:	03 c0       	rjmp	.+6      	; 0x56fa <vfprintf+0x14c>
    56f4:	6f ef       	ldi	r22, 0xFF	; 255
    56f6:	7f ef       	ldi	r23, 0xFF	; 255
    56f8:	02 c0       	rjmp	.+4      	; 0x56fe <vfprintf+0x150>
    56fa:	69 2d       	mov	r22, r9
    56fc:	70 e0       	ldi	r23, 0x00	; 0
    56fe:	42 e0       	ldi	r20, 0x02	; 2
    5700:	50 e0       	ldi	r21, 0x00	; 0
    5702:	a4 0e       	add	r10, r20
    5704:	b5 1e       	adc	r11, r21
    5706:	c6 01       	movw	r24, r12
    5708:	0e 94 bf 2c 	call	0x597e	; 0x597e <strnlen>
    570c:	8c 01       	movw	r16, r24
    570e:	5f e7       	ldi	r21, 0x7F	; 127
    5710:	f5 22       	and	r15, r21
    5712:	14 c0       	rjmp	.+40     	; 0x573c <vfprintf+0x18e>
    5714:	f5 01       	movw	r30, r10
    5716:	c0 80       	ld	r12, Z
    5718:	d1 80       	ldd	r13, Z+1	; 0x01
    571a:	f6 fc       	sbrc	r15, 6
    571c:	03 c0       	rjmp	.+6      	; 0x5724 <vfprintf+0x176>
    571e:	6f ef       	ldi	r22, 0xFF	; 255
    5720:	7f ef       	ldi	r23, 0xFF	; 255
    5722:	02 c0       	rjmp	.+4      	; 0x5728 <vfprintf+0x17a>
    5724:	69 2d       	mov	r22, r9
    5726:	70 e0       	ldi	r23, 0x00	; 0
    5728:	42 e0       	ldi	r20, 0x02	; 2
    572a:	50 e0       	ldi	r21, 0x00	; 0
    572c:	a4 0e       	add	r10, r20
    572e:	b5 1e       	adc	r11, r21
    5730:	c6 01       	movw	r24, r12
    5732:	0e 94 b4 2c 	call	0x5968	; 0x5968 <strnlen_P>
    5736:	8c 01       	movw	r16, r24
    5738:	50 e8       	ldi	r21, 0x80	; 128
    573a:	f5 2a       	or	r15, r21
    573c:	f3 fe       	sbrs	r15, 3
    573e:	07 c0       	rjmp	.+14     	; 0x574e <vfprintf+0x1a0>
    5740:	1a c0       	rjmp	.+52     	; 0x5776 <vfprintf+0x1c8>
    5742:	80 e2       	ldi	r24, 0x20	; 32
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	b3 01       	movw	r22, r6
    5748:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    574c:	ea 94       	dec	r14
    574e:	8e 2d       	mov	r24, r14
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	08 17       	cp	r16, r24
    5754:	19 07       	cpc	r17, r25
    5756:	a8 f3       	brcs	.-22     	; 0x5742 <vfprintf+0x194>
    5758:	0e c0       	rjmp	.+28     	; 0x5776 <vfprintf+0x1c8>
    575a:	f6 01       	movw	r30, r12
    575c:	f7 fc       	sbrc	r15, 7
    575e:	85 91       	lpm	r24, Z+
    5760:	f7 fe       	sbrs	r15, 7
    5762:	81 91       	ld	r24, Z+
    5764:	6f 01       	movw	r12, r30
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	b3 01       	movw	r22, r6
    576a:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    576e:	e1 10       	cpse	r14, r1
    5770:	ea 94       	dec	r14
    5772:	01 50       	subi	r16, 0x01	; 1
    5774:	10 40       	sbci	r17, 0x00	; 0
    5776:	01 15       	cp	r16, r1
    5778:	11 05       	cpc	r17, r1
    577a:	79 f7       	brne	.-34     	; 0x575a <vfprintf+0x1ac>
    577c:	ea c0       	rjmp	.+468    	; 0x5952 <vfprintf+0x3a4>
    577e:	94 36       	cpi	r25, 0x64	; 100
    5780:	11 f0       	breq	.+4      	; 0x5786 <vfprintf+0x1d8>
    5782:	99 36       	cpi	r25, 0x69	; 105
    5784:	69 f5       	brne	.+90     	; 0x57e0 <vfprintf+0x232>
    5786:	f7 fe       	sbrs	r15, 7
    5788:	08 c0       	rjmp	.+16     	; 0x579a <vfprintf+0x1ec>
    578a:	f5 01       	movw	r30, r10
    578c:	20 81       	ld	r18, Z
    578e:	31 81       	ldd	r19, Z+1	; 0x01
    5790:	42 81       	ldd	r20, Z+2	; 0x02
    5792:	53 81       	ldd	r21, Z+3	; 0x03
    5794:	84 e0       	ldi	r24, 0x04	; 4
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	0a c0       	rjmp	.+20     	; 0x57ae <vfprintf+0x200>
    579a:	f5 01       	movw	r30, r10
    579c:	80 81       	ld	r24, Z
    579e:	91 81       	ldd	r25, Z+1	; 0x01
    57a0:	9c 01       	movw	r18, r24
    57a2:	44 27       	eor	r20, r20
    57a4:	37 fd       	sbrc	r19, 7
    57a6:	40 95       	com	r20
    57a8:	54 2f       	mov	r21, r20
    57aa:	82 e0       	ldi	r24, 0x02	; 2
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	a8 0e       	add	r10, r24
    57b0:	b9 1e       	adc	r11, r25
    57b2:	9f e6       	ldi	r25, 0x6F	; 111
    57b4:	f9 22       	and	r15, r25
    57b6:	57 ff       	sbrs	r21, 7
    57b8:	09 c0       	rjmp	.+18     	; 0x57cc <vfprintf+0x21e>
    57ba:	50 95       	com	r21
    57bc:	40 95       	com	r20
    57be:	30 95       	com	r19
    57c0:	21 95       	neg	r18
    57c2:	3f 4f       	sbci	r19, 0xFF	; 255
    57c4:	4f 4f       	sbci	r20, 0xFF	; 255
    57c6:	5f 4f       	sbci	r21, 0xFF	; 255
    57c8:	e0 e8       	ldi	r30, 0x80	; 128
    57ca:	fe 2a       	or	r15, r30
    57cc:	ca 01       	movw	r24, r20
    57ce:	b9 01       	movw	r22, r18
    57d0:	a1 01       	movw	r20, r2
    57d2:	2a e0       	ldi	r18, 0x0A	; 10
    57d4:	30 e0       	ldi	r19, 0x00	; 0
    57d6:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__ultoa_invert>
    57da:	d8 2e       	mov	r13, r24
    57dc:	d2 18       	sub	r13, r2
    57de:	40 c0       	rjmp	.+128    	; 0x5860 <vfprintf+0x2b2>
    57e0:	95 37       	cpi	r25, 0x75	; 117
    57e2:	29 f4       	brne	.+10     	; 0x57ee <vfprintf+0x240>
    57e4:	1f 2d       	mov	r17, r15
    57e6:	1f 7e       	andi	r17, 0xEF	; 239
    57e8:	2a e0       	ldi	r18, 0x0A	; 10
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	1d c0       	rjmp	.+58     	; 0x5828 <vfprintf+0x27a>
    57ee:	1f 2d       	mov	r17, r15
    57f0:	19 7f       	andi	r17, 0xF9	; 249
    57f2:	9f 36       	cpi	r25, 0x6F	; 111
    57f4:	61 f0       	breq	.+24     	; 0x580e <vfprintf+0x260>
    57f6:	90 37       	cpi	r25, 0x70	; 112
    57f8:	20 f4       	brcc	.+8      	; 0x5802 <vfprintf+0x254>
    57fa:	98 35       	cpi	r25, 0x58	; 88
    57fc:	09 f0       	breq	.+2      	; 0x5800 <vfprintf+0x252>
    57fe:	ac c0       	rjmp	.+344    	; 0x5958 <vfprintf+0x3aa>
    5800:	0f c0       	rjmp	.+30     	; 0x5820 <vfprintf+0x272>
    5802:	90 37       	cpi	r25, 0x70	; 112
    5804:	39 f0       	breq	.+14     	; 0x5814 <vfprintf+0x266>
    5806:	98 37       	cpi	r25, 0x78	; 120
    5808:	09 f0       	breq	.+2      	; 0x580c <vfprintf+0x25e>
    580a:	a6 c0       	rjmp	.+332    	; 0x5958 <vfprintf+0x3aa>
    580c:	04 c0       	rjmp	.+8      	; 0x5816 <vfprintf+0x268>
    580e:	28 e0       	ldi	r18, 0x08	; 8
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	0a c0       	rjmp	.+20     	; 0x5828 <vfprintf+0x27a>
    5814:	10 61       	ori	r17, 0x10	; 16
    5816:	14 fd       	sbrc	r17, 4
    5818:	14 60       	ori	r17, 0x04	; 4
    581a:	20 e1       	ldi	r18, 0x10	; 16
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	04 c0       	rjmp	.+8      	; 0x5828 <vfprintf+0x27a>
    5820:	14 fd       	sbrc	r17, 4
    5822:	16 60       	ori	r17, 0x06	; 6
    5824:	20 e1       	ldi	r18, 0x10	; 16
    5826:	32 e0       	ldi	r19, 0x02	; 2
    5828:	17 ff       	sbrs	r17, 7
    582a:	08 c0       	rjmp	.+16     	; 0x583c <vfprintf+0x28e>
    582c:	f5 01       	movw	r30, r10
    582e:	60 81       	ld	r22, Z
    5830:	71 81       	ldd	r23, Z+1	; 0x01
    5832:	82 81       	ldd	r24, Z+2	; 0x02
    5834:	93 81       	ldd	r25, Z+3	; 0x03
    5836:	44 e0       	ldi	r20, 0x04	; 4
    5838:	50 e0       	ldi	r21, 0x00	; 0
    583a:	08 c0       	rjmp	.+16     	; 0x584c <vfprintf+0x29e>
    583c:	f5 01       	movw	r30, r10
    583e:	80 81       	ld	r24, Z
    5840:	91 81       	ldd	r25, Z+1	; 0x01
    5842:	bc 01       	movw	r22, r24
    5844:	80 e0       	ldi	r24, 0x00	; 0
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	42 e0       	ldi	r20, 0x02	; 2
    584a:	50 e0       	ldi	r21, 0x00	; 0
    584c:	a4 0e       	add	r10, r20
    584e:	b5 1e       	adc	r11, r21
    5850:	a1 01       	movw	r20, r2
    5852:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__ultoa_invert>
    5856:	d8 2e       	mov	r13, r24
    5858:	d2 18       	sub	r13, r2
    585a:	8f e7       	ldi	r24, 0x7F	; 127
    585c:	f8 2e       	mov	r15, r24
    585e:	f1 22       	and	r15, r17
    5860:	f6 fe       	sbrs	r15, 6
    5862:	0b c0       	rjmp	.+22     	; 0x587a <vfprintf+0x2cc>
    5864:	5e ef       	ldi	r21, 0xFE	; 254
    5866:	f5 22       	and	r15, r21
    5868:	d9 14       	cp	r13, r9
    586a:	38 f4       	brcc	.+14     	; 0x587a <vfprintf+0x2cc>
    586c:	f4 fe       	sbrs	r15, 4
    586e:	07 c0       	rjmp	.+14     	; 0x587e <vfprintf+0x2d0>
    5870:	f2 fc       	sbrc	r15, 2
    5872:	05 c0       	rjmp	.+10     	; 0x587e <vfprintf+0x2d0>
    5874:	8f ee       	ldi	r24, 0xEF	; 239
    5876:	f8 22       	and	r15, r24
    5878:	02 c0       	rjmp	.+4      	; 0x587e <vfprintf+0x2d0>
    587a:	1d 2d       	mov	r17, r13
    587c:	01 c0       	rjmp	.+2      	; 0x5880 <vfprintf+0x2d2>
    587e:	19 2d       	mov	r17, r9
    5880:	f4 fe       	sbrs	r15, 4
    5882:	0d c0       	rjmp	.+26     	; 0x589e <vfprintf+0x2f0>
    5884:	fe 01       	movw	r30, r28
    5886:	ed 0d       	add	r30, r13
    5888:	f1 1d       	adc	r31, r1
    588a:	80 81       	ld	r24, Z
    588c:	80 33       	cpi	r24, 0x30	; 48
    588e:	19 f4       	brne	.+6      	; 0x5896 <vfprintf+0x2e8>
    5890:	99 ee       	ldi	r25, 0xE9	; 233
    5892:	f9 22       	and	r15, r25
    5894:	08 c0       	rjmp	.+16     	; 0x58a6 <vfprintf+0x2f8>
    5896:	1f 5f       	subi	r17, 0xFF	; 255
    5898:	f2 fe       	sbrs	r15, 2
    589a:	05 c0       	rjmp	.+10     	; 0x58a6 <vfprintf+0x2f8>
    589c:	03 c0       	rjmp	.+6      	; 0x58a4 <vfprintf+0x2f6>
    589e:	8f 2d       	mov	r24, r15
    58a0:	86 78       	andi	r24, 0x86	; 134
    58a2:	09 f0       	breq	.+2      	; 0x58a6 <vfprintf+0x2f8>
    58a4:	1f 5f       	subi	r17, 0xFF	; 255
    58a6:	0f 2d       	mov	r16, r15
    58a8:	f3 fc       	sbrc	r15, 3
    58aa:	14 c0       	rjmp	.+40     	; 0x58d4 <vfprintf+0x326>
    58ac:	f0 fe       	sbrs	r15, 0
    58ae:	0f c0       	rjmp	.+30     	; 0x58ce <vfprintf+0x320>
    58b0:	1e 15       	cp	r17, r14
    58b2:	10 f0       	brcs	.+4      	; 0x58b8 <vfprintf+0x30a>
    58b4:	9d 2c       	mov	r9, r13
    58b6:	0b c0       	rjmp	.+22     	; 0x58ce <vfprintf+0x320>
    58b8:	9d 2c       	mov	r9, r13
    58ba:	9e 0c       	add	r9, r14
    58bc:	91 1a       	sub	r9, r17
    58be:	1e 2d       	mov	r17, r14
    58c0:	06 c0       	rjmp	.+12     	; 0x58ce <vfprintf+0x320>
    58c2:	80 e2       	ldi	r24, 0x20	; 32
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	b3 01       	movw	r22, r6
    58c8:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    58cc:	1f 5f       	subi	r17, 0xFF	; 255
    58ce:	1e 15       	cp	r17, r14
    58d0:	c0 f3       	brcs	.-16     	; 0x58c2 <vfprintf+0x314>
    58d2:	04 c0       	rjmp	.+8      	; 0x58dc <vfprintf+0x32e>
    58d4:	1e 15       	cp	r17, r14
    58d6:	10 f4       	brcc	.+4      	; 0x58dc <vfprintf+0x32e>
    58d8:	e1 1a       	sub	r14, r17
    58da:	01 c0       	rjmp	.+2      	; 0x58de <vfprintf+0x330>
    58dc:	ee 24       	eor	r14, r14
    58de:	04 ff       	sbrs	r16, 4
    58e0:	0f c0       	rjmp	.+30     	; 0x5900 <vfprintf+0x352>
    58e2:	80 e3       	ldi	r24, 0x30	; 48
    58e4:	90 e0       	ldi	r25, 0x00	; 0
    58e6:	b3 01       	movw	r22, r6
    58e8:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    58ec:	02 ff       	sbrs	r16, 2
    58ee:	1d c0       	rjmp	.+58     	; 0x592a <vfprintf+0x37c>
    58f0:	01 fd       	sbrc	r16, 1
    58f2:	03 c0       	rjmp	.+6      	; 0x58fa <vfprintf+0x34c>
    58f4:	88 e7       	ldi	r24, 0x78	; 120
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	0e c0       	rjmp	.+28     	; 0x5916 <vfprintf+0x368>
    58fa:	88 e5       	ldi	r24, 0x58	; 88
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	0b c0       	rjmp	.+22     	; 0x5916 <vfprintf+0x368>
    5900:	80 2f       	mov	r24, r16
    5902:	86 78       	andi	r24, 0x86	; 134
    5904:	91 f0       	breq	.+36     	; 0x592a <vfprintf+0x37c>
    5906:	01 ff       	sbrs	r16, 1
    5908:	02 c0       	rjmp	.+4      	; 0x590e <vfprintf+0x360>
    590a:	8b e2       	ldi	r24, 0x2B	; 43
    590c:	01 c0       	rjmp	.+2      	; 0x5910 <vfprintf+0x362>
    590e:	80 e2       	ldi	r24, 0x20	; 32
    5910:	f7 fc       	sbrc	r15, 7
    5912:	8d e2       	ldi	r24, 0x2D	; 45
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	b3 01       	movw	r22, r6
    5918:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    591c:	06 c0       	rjmp	.+12     	; 0x592a <vfprintf+0x37c>
    591e:	80 e3       	ldi	r24, 0x30	; 48
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	b3 01       	movw	r22, r6
    5924:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    5928:	9a 94       	dec	r9
    592a:	d9 14       	cp	r13, r9
    592c:	c0 f3       	brcs	.-16     	; 0x591e <vfprintf+0x370>
    592e:	da 94       	dec	r13
    5930:	f1 01       	movw	r30, r2
    5932:	ed 0d       	add	r30, r13
    5934:	f1 1d       	adc	r31, r1
    5936:	80 81       	ld	r24, Z
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	b3 01       	movw	r22, r6
    593c:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    5940:	dd 20       	and	r13, r13
    5942:	a9 f7       	brne	.-22     	; 0x592e <vfprintf+0x380>
    5944:	06 c0       	rjmp	.+12     	; 0x5952 <vfprintf+0x3a4>
    5946:	80 e2       	ldi	r24, 0x20	; 32
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	b3 01       	movw	r22, r6
    594c:	0e 94 ca 2c 	call	0x5994	; 0x5994 <fputc>
    5950:	ea 94       	dec	r14
    5952:	ee 20       	and	r14, r14
    5954:	c1 f7       	brne	.-16     	; 0x5946 <vfprintf+0x398>
    5956:	43 ce       	rjmp	.-890    	; 0x55de <vfprintf+0x30>
    5958:	f3 01       	movw	r30, r6
    595a:	66 81       	ldd	r22, Z+6	; 0x06
    595c:	77 81       	ldd	r23, Z+7	; 0x07
    595e:	cb 01       	movw	r24, r22
    5960:	2b 96       	adiw	r28, 0x0b	; 11
    5962:	e2 e1       	ldi	r30, 0x12	; 18
    5964:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__epilogue_restores__>

00005968 <strnlen_P>:
    5968:	fc 01       	movw	r30, r24
    596a:	05 90       	lpm	r0, Z+
    596c:	61 50       	subi	r22, 0x01	; 1
    596e:	70 40       	sbci	r23, 0x00	; 0
    5970:	01 10       	cpse	r0, r1
    5972:	d8 f7       	brcc	.-10     	; 0x596a <strnlen_P+0x2>
    5974:	80 95       	com	r24
    5976:	90 95       	com	r25
    5978:	8e 0f       	add	r24, r30
    597a:	9f 1f       	adc	r25, r31
    597c:	08 95       	ret

0000597e <strnlen>:
    597e:	fc 01       	movw	r30, r24
    5980:	61 50       	subi	r22, 0x01	; 1
    5982:	70 40       	sbci	r23, 0x00	; 0
    5984:	01 90       	ld	r0, Z+
    5986:	01 10       	cpse	r0, r1
    5988:	d8 f7       	brcc	.-10     	; 0x5980 <strnlen+0x2>
    598a:	80 95       	com	r24
    598c:	90 95       	com	r25
    598e:	8e 0f       	add	r24, r30
    5990:	9f 1f       	adc	r25, r31
    5992:	08 95       	ret

00005994 <fputc>:
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	cf 93       	push	r28
    599a:	df 93       	push	r29
    599c:	8c 01       	movw	r16, r24
    599e:	eb 01       	movw	r28, r22
    59a0:	8b 81       	ldd	r24, Y+3	; 0x03
    59a2:	81 ff       	sbrs	r24, 1
    59a4:	1b c0       	rjmp	.+54     	; 0x59dc <fputc+0x48>
    59a6:	82 ff       	sbrs	r24, 2
    59a8:	0d c0       	rjmp	.+26     	; 0x59c4 <fputc+0x30>
    59aa:	2e 81       	ldd	r18, Y+6	; 0x06
    59ac:	3f 81       	ldd	r19, Y+7	; 0x07
    59ae:	8c 81       	ldd	r24, Y+4	; 0x04
    59b0:	9d 81       	ldd	r25, Y+5	; 0x05
    59b2:	28 17       	cp	r18, r24
    59b4:	39 07       	cpc	r19, r25
    59b6:	64 f4       	brge	.+24     	; 0x59d0 <fputc+0x3c>
    59b8:	e8 81       	ld	r30, Y
    59ba:	f9 81       	ldd	r31, Y+1	; 0x01
    59bc:	01 93       	st	Z+, r16
    59be:	f9 83       	std	Y+1, r31	; 0x01
    59c0:	e8 83       	st	Y, r30
    59c2:	06 c0       	rjmp	.+12     	; 0x59d0 <fputc+0x3c>
    59c4:	e8 85       	ldd	r30, Y+8	; 0x08
    59c6:	f9 85       	ldd	r31, Y+9	; 0x09
    59c8:	80 2f       	mov	r24, r16
    59ca:	09 95       	icall
    59cc:	89 2b       	or	r24, r25
    59ce:	31 f4       	brne	.+12     	; 0x59dc <fputc+0x48>
    59d0:	8e 81       	ldd	r24, Y+6	; 0x06
    59d2:	9f 81       	ldd	r25, Y+7	; 0x07
    59d4:	01 96       	adiw	r24, 0x01	; 1
    59d6:	9f 83       	std	Y+7, r25	; 0x07
    59d8:	8e 83       	std	Y+6, r24	; 0x06
    59da:	02 c0       	rjmp	.+4      	; 0x59e0 <fputc+0x4c>
    59dc:	0f ef       	ldi	r16, 0xFF	; 255
    59de:	1f ef       	ldi	r17, 0xFF	; 255
    59e0:	c8 01       	movw	r24, r16
    59e2:	df 91       	pop	r29
    59e4:	cf 91       	pop	r28
    59e6:	1f 91       	pop	r17
    59e8:	0f 91       	pop	r16
    59ea:	08 95       	ret

000059ec <__ultoa_invert>:
    59ec:	fa 01       	movw	r30, r20
    59ee:	aa 27       	eor	r26, r26
    59f0:	28 30       	cpi	r18, 0x08	; 8
    59f2:	51 f1       	breq	.+84     	; 0x5a48 <__ultoa_invert+0x5c>
    59f4:	20 31       	cpi	r18, 0x10	; 16
    59f6:	81 f1       	breq	.+96     	; 0x5a58 <__ultoa_invert+0x6c>
    59f8:	e8 94       	clt
    59fa:	6f 93       	push	r22
    59fc:	6e 7f       	andi	r22, 0xFE	; 254
    59fe:	6e 5f       	subi	r22, 0xFE	; 254
    5a00:	7f 4f       	sbci	r23, 0xFF	; 255
    5a02:	8f 4f       	sbci	r24, 0xFF	; 255
    5a04:	9f 4f       	sbci	r25, 0xFF	; 255
    5a06:	af 4f       	sbci	r26, 0xFF	; 255
    5a08:	b1 e0       	ldi	r27, 0x01	; 1
    5a0a:	3e d0       	rcall	.+124    	; 0x5a88 <__ultoa_invert+0x9c>
    5a0c:	b4 e0       	ldi	r27, 0x04	; 4
    5a0e:	3c d0       	rcall	.+120    	; 0x5a88 <__ultoa_invert+0x9c>
    5a10:	67 0f       	add	r22, r23
    5a12:	78 1f       	adc	r23, r24
    5a14:	89 1f       	adc	r24, r25
    5a16:	9a 1f       	adc	r25, r26
    5a18:	a1 1d       	adc	r26, r1
    5a1a:	68 0f       	add	r22, r24
    5a1c:	79 1f       	adc	r23, r25
    5a1e:	8a 1f       	adc	r24, r26
    5a20:	91 1d       	adc	r25, r1
    5a22:	a1 1d       	adc	r26, r1
    5a24:	6a 0f       	add	r22, r26
    5a26:	71 1d       	adc	r23, r1
    5a28:	81 1d       	adc	r24, r1
    5a2a:	91 1d       	adc	r25, r1
    5a2c:	a1 1d       	adc	r26, r1
    5a2e:	20 d0       	rcall	.+64     	; 0x5a70 <__ultoa_invert+0x84>
    5a30:	09 f4       	brne	.+2      	; 0x5a34 <__ultoa_invert+0x48>
    5a32:	68 94       	set
    5a34:	3f 91       	pop	r19
    5a36:	2a e0       	ldi	r18, 0x0A	; 10
    5a38:	26 9f       	mul	r18, r22
    5a3a:	11 24       	eor	r1, r1
    5a3c:	30 19       	sub	r19, r0
    5a3e:	30 5d       	subi	r19, 0xD0	; 208
    5a40:	31 93       	st	Z+, r19
    5a42:	de f6       	brtc	.-74     	; 0x59fa <__ultoa_invert+0xe>
    5a44:	cf 01       	movw	r24, r30
    5a46:	08 95       	ret
    5a48:	46 2f       	mov	r20, r22
    5a4a:	47 70       	andi	r20, 0x07	; 7
    5a4c:	40 5d       	subi	r20, 0xD0	; 208
    5a4e:	41 93       	st	Z+, r20
    5a50:	b3 e0       	ldi	r27, 0x03	; 3
    5a52:	0f d0       	rcall	.+30     	; 0x5a72 <__ultoa_invert+0x86>
    5a54:	c9 f7       	brne	.-14     	; 0x5a48 <__ultoa_invert+0x5c>
    5a56:	f6 cf       	rjmp	.-20     	; 0x5a44 <__ultoa_invert+0x58>
    5a58:	46 2f       	mov	r20, r22
    5a5a:	4f 70       	andi	r20, 0x0F	; 15
    5a5c:	40 5d       	subi	r20, 0xD0	; 208
    5a5e:	4a 33       	cpi	r20, 0x3A	; 58
    5a60:	18 f0       	brcs	.+6      	; 0x5a68 <__ultoa_invert+0x7c>
    5a62:	49 5d       	subi	r20, 0xD9	; 217
    5a64:	31 fd       	sbrc	r19, 1
    5a66:	40 52       	subi	r20, 0x20	; 32
    5a68:	41 93       	st	Z+, r20
    5a6a:	02 d0       	rcall	.+4      	; 0x5a70 <__ultoa_invert+0x84>
    5a6c:	a9 f7       	brne	.-22     	; 0x5a58 <__ultoa_invert+0x6c>
    5a6e:	ea cf       	rjmp	.-44     	; 0x5a44 <__ultoa_invert+0x58>
    5a70:	b4 e0       	ldi	r27, 0x04	; 4
    5a72:	a6 95       	lsr	r26
    5a74:	97 95       	ror	r25
    5a76:	87 95       	ror	r24
    5a78:	77 95       	ror	r23
    5a7a:	67 95       	ror	r22
    5a7c:	ba 95       	dec	r27
    5a7e:	c9 f7       	brne	.-14     	; 0x5a72 <__ultoa_invert+0x86>
    5a80:	00 97       	sbiw	r24, 0x00	; 0
    5a82:	61 05       	cpc	r22, r1
    5a84:	71 05       	cpc	r23, r1
    5a86:	08 95       	ret
    5a88:	9b 01       	movw	r18, r22
    5a8a:	ac 01       	movw	r20, r24
    5a8c:	0a 2e       	mov	r0, r26
    5a8e:	06 94       	lsr	r0
    5a90:	57 95       	ror	r21
    5a92:	47 95       	ror	r20
    5a94:	37 95       	ror	r19
    5a96:	27 95       	ror	r18
    5a98:	ba 95       	dec	r27
    5a9a:	c9 f7       	brne	.-14     	; 0x5a8e <__ultoa_invert+0xa2>
    5a9c:	62 0f       	add	r22, r18
    5a9e:	73 1f       	adc	r23, r19
    5aa0:	84 1f       	adc	r24, r20
    5aa2:	95 1f       	adc	r25, r21
    5aa4:	a0 1d       	adc	r26, r0
    5aa6:	08 95       	ret

00005aa8 <_exit>:
    5aa8:	f8 94       	cli

00005aaa <__stop_program>:
    5aaa:	ff cf       	rjmp	.-2      	; 0x5aaa <__stop_program>
